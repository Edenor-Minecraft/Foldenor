From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Thu, 4 Jan 2024 15:55:10 +0400
Subject: [PATCH] Pufferfish-Reduce-projectile-chunk-loading


diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 10d7c64fb3a9bafdcdae99f8dc87017722341337..842e69eb6261392623ce74e9460862ac672a59da 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -1,9 +1,13 @@
 package net.minecraft.world.entity.projectile;
 
 import com.google.common.base.MoreObjects;
+
 import java.util.Iterator;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.threadedregions.TickRegionScheduler;
+import net.edenor.foldenor.config.FoldenorConfig;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
@@ -45,6 +49,35 @@ public abstract class Projectile extends Entity implements TraceableEntity {
         super(type, world);
     }
 
+    private static long loadedThisTick = 0;
+    private static long loadedTick;
+
+    private int loadedLifetime = 0;
+
+    @Override
+    public void setPos(double x, double y, double z) {
+        long currentTick = TickRegionScheduler.getCurrentRegion().getData().getCurrentTick();
+        if (loadedTick != currentTick) {
+            loadedTick = currentTick;
+            loadedThisTick = 0;
+        }
+        int previousX = Mth.floor(this.getX()) >> 4, previousZ = Mth.floor(this.getZ()) >> 4;
+        int newX = Mth.floor(x) >> 4, newZ = Mth.floor(z) >> 4;
+        if (previousX != newX || previousZ != newZ) {
+            boolean isLoaded = ((net.minecraft.server.level.ServerChunkCache) this.level().getChunkSource()).getChunkAtIfLoadedMainThread(newX, newZ) != null;
+            if (!isLoaded) {
+                if (Projectile.loadedThisTick > FoldenorConfig.maxProjectileLoadsPerTick) {
+                    if (++this.loadedLifetime > FoldenorConfig.maxProjectileLoadsPerProjectile) {
+                        this.discard();
+                    }
+                    return;
+                }
+                Projectile.loadedThisTick++;
+            }
+        }
+        super.setPos(x, y, z);
+    }
+
     public void setOwner(@Nullable Entity entity) {
         if (entity != null) {
             this.ownerUUID = entity.getUUID();
@@ -202,7 +235,8 @@ public abstract class Projectile extends Entity implements TraceableEntity {
         this.shoot((double) f5, (double) f6, (double) f7, speed, divergence);
         Vec3 vec3d = shooter.getDeltaMovement();
 
-        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity) this.setDeltaMovement(this.getDeltaMovement().add(vec3d.x, shooter.onGround() ? 0.0D : vec3d.y, vec3d.z)); // Paper - allow disabling relative velocity
+        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity)
+            this.setDeltaMovement(this.getDeltaMovement().add(vec3d.x, shooter.onGround() ? 0.0D : vec3d.y, vec3d.z)); // Paper - allow disabling relative velocity
     }
 
     // CraftBukkit start - call projectile hit event
@@ -232,7 +266,8 @@ public abstract class Projectile extends Entity implements TraceableEntity {
 
     }
 
-    protected void onHitEntity(EntityHitResult entityHitResult) {}
+    protected void onHitEntity(EntityHitResult entityHitResult) {
+    }
 
     protected void onHitBlock(BlockHitResult blockHitResult) {
         // CraftBukkit start - cancellable hit event
