From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Sat, 16 Sep 2023 21:03:29 +0400
Subject: [PATCH] Feature-secure-seed


diff --git a/src/main/java/net/edenor/foldenor/secureseed/Globals.java b/src/main/java/net/edenor/foldenor/secureseed/Globals.java
new file mode 100644
index 0000000000000000000000000000000000000000..0530a8a2b31faf64a905515d7f1a2bdbf04f0996
--- /dev/null
+++ b/src/main/java/net/edenor/foldenor/secureseed/Globals.java
@@ -0,0 +1,87 @@
+package net.edenor.foldenor.secureseed;
+
+import com.google.common.collect.Iterables;
+import net.minecraft.server.level.ServerLevel;
+
+import java.math.BigInteger;
+import java.security.SecureRandom;
+import java.util.Optional;
+
+public class Globals {
+    public static final int WORLD_SEED_LONGS = 16;
+    public static final int WORLD_SEED_BITS = WORLD_SEED_LONGS * 64;
+
+    public static final long[] worldSeed = new long[WORLD_SEED_LONGS];
+    public static final ThreadLocal<Integer> dimension = ThreadLocal.withInitial(() -> 0);
+
+    public enum Salt {
+        UNDEFINED,
+        BASTION_FEATURE,
+        WOODLAND_MANSION_FEATURE,
+        MINESHAFT_FEATURE,
+        BURIED_TREASURE_FEATURE,
+        NETHER_FORTRESS_FEATURE,
+        PILLAGER_OUTPOST_FEATURE,
+        GEODE_FEATURE,
+        NETHER_FOSSIL_FEATURE,
+        OCEAN_MONUMENT_FEATURE,
+        RUINED_PORTAL_FEATURE,
+        POTENTIONAL_FEATURE,
+        GENERATE_FEATURE,
+        JIGSAW_PLACEMENT,
+        STRONGHOLDS,
+        POPULATION,
+        DECORATION,
+        SLIME_CHUNK
+    }
+
+    public static void setupGlobals(ServerLevel world) {
+        long[] seed = world.getServer().getWorldData().worldGenOptions().featureSeed();
+        System.arraycopy(seed, 0, worldSeed, 0, WORLD_SEED_LONGS);
+        int worldIndex = Iterables.indexOf(world.getServer().levelKeys(), it -> it == world.dimension());
+        if (worldIndex == -1) worldIndex = world.getServer().levelKeys().size(); // if we are in world construction it may not have been added to the map yet
+            dimension.set(worldIndex);
+    }
+
+        public static long[] createRandomWorldSeed() {
+                long[] seed = new long[WORLD_SEED_LONGS];
+                SecureRandom rand = new SecureRandom();
+                for (int i = 0; i < WORLD_SEED_LONGS; i++) {
+                        seed[i] = rand.nextLong();
+                    }
+                return seed;
+            }
+
+        public static Optional<long[]> parseSeed(String seedStr) {
+                if (seedStr.isEmpty()) return Optional.empty();
+
+                    try {
+                        long[] seed = new long[WORLD_SEED_LONGS];
+                        BigInteger seedBigInt = new BigInteger(seedStr);
+                        if (seedBigInt.signum() < 0) {
+                                seedBigInt = seedBigInt.and(BigInteger.ONE.shiftLeft(WORLD_SEED_BITS).subtract(BigInteger.ONE));
+                            }
+                        for (int i = 0; i < WORLD_SEED_LONGS; i++) {
+                                BigInteger[] divRem = seedBigInt.divideAndRemainder(BigInteger.ONE.shiftLeft(64));
+                                seed[i] = divRem[1].longValue();
+                                seedBigInt = divRem[0];
+                            }
+                        return Optional.of(seed);
+                    } catch (NumberFormatException ignored) {
+                        return Optional.empty();
+                    }
+            }
+
+        public static String seedToString(long[] seed) {
+            BigInteger seedBigInt = BigInteger.ZERO;
+            for (int i = WORLD_SEED_LONGS - 1; i >= 0; i--) {
+                BigInteger val = BigInteger.valueOf(seed[i]);
+            if (val.signum() < 0) {
+                val = val.add(BigInteger.ONE.shiftLeft(64));
+            }
+            seedBigInt = seedBigInt.shiftLeft(64).add(val);
+        }
+
+        return seedBigInt.toString();
+    }
+}
diff --git a/src/main/java/net/edenor/foldenor/secureseed/Hashing.java b/src/main/java/net/edenor/foldenor/secureseed/Hashing.java
new file mode 100644
index 0000000000000000000000000000000000000000..77d09c878458709e37fc692844daa2ec642eb771
--- /dev/null
+++ b/src/main/java/net/edenor/foldenor/secureseed/Hashing.java
@@ -0,0 +1,71 @@
+package net.edenor.foldenor.secureseed;
+
+public class Hashing {
+    private final static long[] blake2b_IV = {
+                            0x6a09e667f3bcc908L, 0xbb67ae8584caa73bL, 0x3c6ef372fe94f82bL,
+                            0xa54ff53a5f1d36f1L, 0x510e527fade682d1L, 0x9b05688c2b3e6c1fL,
+                            0x1f83d9abfb41bd6bL, 0x5be0cd19137e2179L
+                    };
+
+        private final static byte[][] blake2b_sigma = {
+                           {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
+                            {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3},
+                            {11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4},
+                            {7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8},
+                            {9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13},
+                            {2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9},
+                            {12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11},
+                            {13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10},
+                            {6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5},
+                            {10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0},
+                            {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
+                            {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3}
+                        };
+
+       public static long[] hashWorldSeed(long[] worldSeed) {
+                long[] result = blake2b_IV.clone();
+                result[0] ^= 0x01010040;
+                hash(worldSeed, result, new long[16], 0, false);
+                return result;
+            }
+
+        public static void hash(long[] message, long[] chainValue, long[] internalState, long messageOffset, boolean isFinal) {
+                assert message.length == 16;
+                assert chainValue.length == 8;
+                assert internalState.length == 16;
+
+                    System.arraycopy(chainValue, 0, internalState, 0, chainValue.length);
+                System.arraycopy(blake2b_IV, 0, internalState, chainValue.length, 4);
+                internalState[12] = messageOffset ^ blake2b_IV[4];
+                internalState[13] = blake2b_IV[5];
+                if (isFinal) internalState[14] = ~blake2b_IV[6];
+                internalState[15] = blake2b_IV[7];
+
+                    for (int round = 0; round < 12; round++) {
+                        G(message[blake2b_sigma[round][0]], message[blake2b_sigma[round][1]], 0, 4, 8, 12, internalState);
+                        G(message[blake2b_sigma[round][2]], message[blake2b_sigma[round][3]], 1, 5, 9, 13, internalState);
+                        G(message[blake2b_sigma[round][4]], message[blake2b_sigma[round][5]], 2, 6, 10, 14, internalState);
+                        G(message[blake2b_sigma[round][6]], message[blake2b_sigma[round][7]], 3, 7, 11, 15, internalState);
+                        G(message[blake2b_sigma[round][8]], message[blake2b_sigma[round][9]], 0, 5, 10, 15, internalState);
+                        G(message[blake2b_sigma[round][10]], message[blake2b_sigma[round][11]], 1, 6, 11, 12, internalState);
+                        G(message[blake2b_sigma[round][12]], message[blake2b_sigma[round][13]], 2, 7, 8, 13, internalState);
+                        G(message[blake2b_sigma[round][14]], message[blake2b_sigma[round][15]], 3, 4, 9, 14, internalState);
+                    }
+
+                    for (int i = 0; i < 8; i++) {
+                        chainValue[i] ^= internalState[i] ^ internalState[i + 8];
+                    }
+            }
+
+        private static void G(long m1, long m2, int posA, int posB, int posC, int posD, long[] internalState)
+    {
+                internalState[posA] = internalState[posA] + internalState[posB] + m1;
+                internalState[posD] = Long.rotateRight(internalState[posD] ^ internalState[posA], 32);
+                internalState[posC] = internalState[posC] + internalState[posD];
+                internalState[posB] = Long.rotateRight(internalState[posB] ^ internalState[posC], 24); // replaces 25 of BLAKE
+                internalState[posA] = internalState[posA] + internalState[posB] + m2;
+                internalState[posD] = Long.rotateRight(internalState[posD] ^ internalState[posA], 16);
+                internalState[posC] = internalState[posC] + internalState[posD];
+                internalState[posB] = Long.rotateRight(internalState[posB] ^ internalState[posC], 63); // replaces 11 of BLAKE
+            }
+}
diff --git a/src/main/java/net/edenor/foldenor/secureseed/WorldgenCryptoRandom.java b/src/main/java/net/edenor/foldenor/secureseed/WorldgenCryptoRandom.java
new file mode 100644
index 0000000000000000000000000000000000000000..d02b5b487e6b91340a820a06a459273636c86d40
--- /dev/null
+++ b/src/main/java/net/edenor/foldenor/secureseed/WorldgenCryptoRandom.java
@@ -0,0 +1,159 @@
+package net.edenor.foldenor.secureseed;
+
+import net.minecraft.util.Mth;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.level.levelgen.LegacyRandomSource;
+import net.minecraft.world.level.levelgen.WorldgenRandom;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Arrays;
+
+public class WorldgenCryptoRandom extends WorldgenRandom {
+    // hash the world seed to guard against badly chosen world seeds
+    private static final long[] HASHED_ZERO_SEED = Hashing.hashWorldSeed(new long[Globals.WORLD_SEED_LONGS]);
+    private static final ThreadLocal<long[]> LAST_SEEN_WORLD_SEED = ThreadLocal.withInitial(() -> new long[Globals.WORLD_SEED_LONGS]);
+    private static final ThreadLocal<long[]> HASHED_WORLD_SEED = ThreadLocal.withInitial(() -> HASHED_ZERO_SEED);
+
+    private final long[] worldSeed = new long[Globals.WORLD_SEED_LONGS];
+    private final long[] randomBits = new long[8];
+    private int randomBitIndex;
+    private static final int MAX_RANDOM_BIT_INDEX = 64 * 8;
+    private static final int LOG2_MAX_RANDOM_BIT_INDEX = 9;
+    private long counter;
+    private final long[] message = new long[16];
+    private final long[] cachedInternalState = new long[16];
+
+        public WorldgenCryptoRandom(int x, int z, Globals.Salt typeSalt, long salt) {
+                super(new LegacyRandomSource(0L));
+                if (typeSalt != null) {
+                        this.setSecureSeed(x, z, typeSalt, salt);
+                    }
+            }
+
+        public void setSecureSeed(int x, int z, Globals.Salt typeSalt, long salt) {
+                System.arraycopy(Globals.worldSeed, 0, this.worldSeed, 0, Globals.WORLD_SEED_LONGS);
+                message[0] = ((long) x << 32) | ((long) z & 0xffffffffL);
+                message[1] = ((long) Globals.dimension.get() << 32) | ((long) salt & 0xffffffffL);
+                message[2] = typeSalt.ordinal();
+                message[3] = counter = 0;
+                randomBitIndex = MAX_RANDOM_BIT_INDEX;
+            }
+
+        private long[] getHashedWorldSeed() {
+                if (!Arrays.equals(worldSeed, LAST_SEEN_WORLD_SEED.get())) {
+                        HASHED_WORLD_SEED.set(Hashing.hashWorldSeed(worldSeed));
+                        System.arraycopy(worldSeed, 0, LAST_SEEN_WORLD_SEED.get(), 0, Globals.WORLD_SEED_LONGS);
+                    }
+                return HASHED_WORLD_SEED.get();
+            }
+
+        private void moreRandomBits() {
+                message[3] = counter++;
+                System.arraycopy(getHashedWorldSeed(), 0, randomBits, 0, 8);
+                Hashing.hash(message, randomBits, cachedInternalState, 64, true);
+            }
+
+        private long getBits(int count) {
+               if (randomBitIndex >= MAX_RANDOM_BIT_INDEX) {
+                        moreRandomBits();
+                        randomBitIndex -= MAX_RANDOM_BIT_INDEX;
+                    }
+
+                    int alignment = randomBitIndex & 63;
+                if ((randomBitIndex >>> 6) == ((randomBitIndex + count) >>> 6)) {
+                        long result = (randomBits[randomBitIndex >>> 6] >>> alignment) & ((1L << count) - 1);
+                        randomBitIndex += count;
+                        return result;
+                   } else {
+                        long result = (randomBits[randomBitIndex >>> 6] >>> alignment) & ((1L << (64 - alignment)) - 1);
+                        randomBitIndex += count;
+                        if (randomBitIndex >= MAX_RANDOM_BIT_INDEX) {
+                                moreRandomBits();
+                                randomBitIndex -= MAX_RANDOM_BIT_INDEX;
+                            }
+                        alignment = randomBitIndex & 63;
+                       result <<= alignment;
+                        result |= (randomBits[randomBitIndex >>> 6] >>> (64 - alignment)) & ((1L << alignment) - 1);
+
+                            return result;
+                    }
+            }
+
+        @Override
+    public @NotNull RandomSource fork() {
+                WorldgenCryptoRandom fork = new WorldgenCryptoRandom(0, 0, null, 0);
+
+                    System.arraycopy(Globals.worldSeed, 0, fork.worldSeed, 0, Globals.WORLD_SEED_LONGS);
+                fork.message[0] = this.message[0];
+                fork.message[1] = this.message[1];
+                fork.message[2] = this.message[2];
+                fork.message[3] = this.message[3];
+                fork.randomBitIndex = this.randomBitIndex;
+                fork.counter = this.counter;
+                fork.nextLong();
+
+                    return fork;
+            }
+
+       @Override
+    public int next(int bits) {
+                return (int) getBits(bits);
+            }
+
+        @Override
+    public void consumeCount(int count) {
+               randomBitIndex += count;
+                if (randomBitIndex >= MAX_RANDOM_BIT_INDEX * 2) {
+                        randomBitIndex -= MAX_RANDOM_BIT_INDEX;
+                        counter += randomBitIndex >>> LOG2_MAX_RANDOM_BIT_INDEX;
+                        randomBitIndex &= MAX_RANDOM_BIT_INDEX - 1;
+                        randomBitIndex += MAX_RANDOM_BIT_INDEX;
+                    }
+            }
+
+        @Override
+    public int nextInt(int bound) {
+               int bits = Mth.ceillog2(bound);
+                int result;
+                do {
+                        result = (int) getBits(bits);
+                    } while (result >= bound);
+
+                    return result;
+            }
+
+        @Override
+    public long nextLong() {
+                return getBits(64);
+            }
+
+        @Override
+    public double nextDouble() {
+                return getBits(53) * 0x1.0p-53;
+            }
+
+        @Override
+    public long setDecorationSeed(long worldSeed, int blockX, int blockZ) {
+                setSecureSeed(blockX, blockZ, Globals.Salt.POPULATION, 0);
+                return ((long) blockX << 32) | ((long) blockZ & 0xffffffffL);
+            }
+
+        @Override
+    public void setFeatureSeed(long populationSeed, int index, int step) {
+                setSecureSeed((int) (populationSeed >> 32), (int) populationSeed, Globals.Salt.DECORATION, index + 10000L * step);
+            }
+
+        @Override
+    public void setLargeFeatureSeed(long worldSeed, int chunkX, int chunkZ) {
+                super.setLargeFeatureSeed(worldSeed, chunkX, chunkZ);
+            }
+
+        @Override
+    public void setLargeFeatureWithSalt(long worldSeed, int regionX, int regionZ, int salt) {
+                super.setLargeFeatureWithSalt(worldSeed, regionX, regionZ, salt);
+            }
+
+        public static RandomSource seedSlimeChunk(int chunkX, int chunkZ) {
+                return new WorldgenCryptoRandom(chunkX, chunkZ, Globals.Salt.SLIME_CHUNK, 0);
+            }
+}
diff --git a/src/main/java/net/minecraft/server/commands/SeedCommand.java b/src/main/java/net/minecraft/server/commands/SeedCommand.java
index 342362c217df5476a927eb54cef3cafcea3889fd..097f549a0275846199f3ba929f3cb0d9a3dfd347 100644
--- a/src/main/java/net/minecraft/server/commands/SeedCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SeedCommand.java
@@ -1,10 +1,14 @@
 package net.minecraft.server.commands;
 
 import com.mojang.brigadier.CommandDispatcher;
+import net.edenor.foldenor.secureseed.Globals;
+import net.minecraft.ChatFormatting;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
+import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
+import net.minecraft.network.chat.HoverEvent;
 
 public class SeedCommand {
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher, boolean dedicated) {
@@ -12,10 +16,19 @@ public class SeedCommand {
             return !dedicated || source.hasPermission(2);
         }).executes((context) -> {
             long l = context.getSource().getLevel().getSeed();
-            Component component = ComponentUtils.copyOnClickText(String.valueOf(l));
-            context.getSource().sendSuccess(() -> {
-                return Component.translatable("commands.seed.success", component);
-            }, false);
+            Globals.setupGlobals(context.getSource().getLevel());
+            String seedStr = Globals.seedToString(Globals.worldSeed);
+
+            Component seedComponent = ComponentUtils.wrapInSquareBrackets(Component.literal(String.valueOf(l)).withStyle((style) -> {
+                return style.withColor(ChatFormatting.GREEN).withClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, String.valueOf(l))).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Component.translatable("chat.copy.click"))).withInsertion(String.valueOf(l));
+            }));
+
+            Component featureSeedComponent = ComponentUtils.wrapInSquareBrackets(Component.translatable("chat.copy.click").withStyle((style) -> {
+                return style.withColor(ChatFormatting.GREEN).withClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, seedStr)).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Component.translatable("chat.copy.click"))).withInsertion(seedStr);
+            }));
+
+            context.getSource().sendSuccess(() -> {return Component.translatable("commands.seed.success", seedComponent);}, false);
+            context.getSource().sendSuccess(() -> {return Component.translatable("Feature seed: %s", featureSeedComponent);}, false);
             return (int)l;
         }));
     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index bab2471616404821671264ccefd729cab8d0bf58..3e90fb061f1ba37bb7cc49d5c7861d0eb5d55841 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -43,6 +43,7 @@ import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
 import net.minecraft.world.level.levelgen.presets.WorldPreset;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
 import org.slf4j.Logger;
+import net.edenor.foldenor.secureseed.Globals;
 
 // CraftBukkit start
 import joptsimple.OptionSet;
@@ -160,7 +161,17 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         boolean flag = this.get("generate-structures", true);
         long i = WorldOptions.parseSeed(s).orElse(WorldOptions.randomSeed());
 
-        this.worldOptions = new WorldOptions(i, flag, false);
+        // Foldenor start - Feature secure seed
+        String featureSeedString = this.get("feature-level-seed", "");
+        long[] featureSeed;
+        if (featureSeedString.isEmpty()) {
+            featureSeed = Globals.createRandomWorldSeed();
+        } else {
+            featureSeed = Globals.parseSeed(featureSeedString).orElseGet(Globals::createRandomWorldSeed);
+        }
+
+        this.worldOptions = new WorldOptions(i, featureSeed, flag, false);
+        // Foldenor end - Feature secure seed
         this.worldDimensionData = new DedicatedServerProperties.WorldDimensionData((JsonObject) this.get("generator-settings", (s1) -> {
             return GsonHelper.parse(!s1.isEmpty() ? s1 : "{}");
         }, new JsonObject()), (String) this.get("level-type", (s1) -> {
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 74483543836d9ed042cc7b9cbbde8d58d6994475..cd82703d47bf0f2457b5698b5bb08e83d18b20e6 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -46,6 +46,8 @@ import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
+import net.edenor.foldenor.secureseed.Globals;
 
 public class ServerChunkCache extends ChunkSource {
 
@@ -684,6 +686,7 @@ public class ServerChunkCache extends ChunkSource {
     }
 
     public ChunkGenerator getGenerator() {
+        Globals.setupGlobals(level);
         return this.chunkMap.generator();
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index a16fc5ba55dbde0cf7f968884da40d70a754a0d8..3252e4a1f84e3921027d95d2919f0baf45c9c96b 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -178,6 +178,8 @@ import org.bukkit.event.weather.LightningStrikeEvent;
 import org.bukkit.event.world.GenericGameEvent;
 import org.bukkit.event.world.TimeSkipEvent;
 // CraftBukkit end
+import it.unimi.dsi.fastutil.ints.IntArrayList; // Paper
+import net.edenor.foldenor.secureseed.Globals;
 
 public class ServerLevel extends Level implements WorldGenLevel {
 
@@ -807,6 +809,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             chunkgenerator = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, chunkgenerator, gen);
         }
         // CraftBukkit end
+        Globals.setupGlobals(this);
         boolean flag2 = minecraftserver.forceSynchronousWrites();
         DataFixer datafixer = minecraftserver.getFixerUpper();
         this.entityStorage = new EntityRegionFileStorage(convertable_conversionsession.getDimensionPath(resourcekey).resolve("entities"), flag2); // Paper - rewrite chunk system  //EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, convertable_conversionsession.getDimensionPath(resourcekey).resolve("entities"), datafixer, flag2, minecraftserver);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 2502cb476032c6a247132ce2e427721d6c9f8ce4..20ce257b47f2cd062c92169511715ab4f5a23621 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -349,7 +349,7 @@ public class Slime extends Mob implements Enemy {
                 }
 
                 ChunkPos chunkcoordintpair = new ChunkPos(pos);
-                boolean flag = world.getMinecraftWorld().paperConfig().entities.spawning.allChunksAreSlimeChunks || WorldgenRandom.seedSlimeChunk(chunkcoordintpair.x, chunkcoordintpair.z, ((WorldGenLevel) world).getSeed(), world.getMinecraftWorld().spigotConfig.slimeSeed).nextInt(10) == 0; // Spigot // Paper
+                boolean flag = world.getMinecraftWorld().paperConfig().entities.spawning.allChunksAreSlimeChunks || world.getChunk(chunkcoordintpair.x, chunkcoordintpair.z).isSlimeChunk(); // Spigot // Paper
 
                 // Paper start - Replace rules for Height in Slime Chunks
                 final double maxHeightSlimeChunk = world.getMinecraftWorld().paperConfig().entities.spawning.slimeSpawnHeight.slimeChunk.maximum;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index f7e5e016a7028a9196e689e950805b0d5b31fe38..7167cbd0ad37742fbe104508860c13e56e8c5e96 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -53,6 +53,7 @@ import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.ticks.SerializableTickContainer;
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
+import net.edenor.foldenor.secureseed.WorldgenCryptoRandom;
 
 public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiomeSource, LightChunk, StructureAccess {
 
@@ -82,6 +83,9 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     protected final LevelHeightAccessor levelHeightAccessor;
     protected final LevelChunkSection[] sections;
 
+    private boolean slimeChunk;
+    private boolean hasComputedSlimeChunk;
+
     // CraftBukkit start - SPIGOT-6814: move to IChunkAccess to account for 1.17 to 1.18 chunk upgrading.
     private static final org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry();
     public org.bukkit.craftbukkit.persistence.DirtyCraftPersistentDataContainer persistentDataContainer = new org.bukkit.craftbukkit.persistence.DirtyCraftPersistentDataContainer(ChunkAccess.DATA_TYPE_REGISTRY);
@@ -172,6 +176,15 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
         return GameEventListenerRegistry.NOOP;
     }
 
+    public boolean isSlimeChunk() {
+        if (!hasComputedSlimeChunk) {
+            hasComputedSlimeChunk = true;
+            slimeChunk = WorldgenCryptoRandom.seedSlimeChunk(chunkPos.x, chunkPos.z).nextInt(10) == 0;
+        }
+
+        return slimeChunk;
+    }
+
     public abstract BlockState getBlockState(final int x, final int y, final int z); // Paper
     @Nullable
     public abstract BlockState setBlockState(BlockPos pos, BlockState state, boolean moved);
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index b31f1e0522ff18fa5853af6104d46f980b916285..1fa710175069f570850071877b7c5987e279333a 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -76,6 +76,7 @@ import net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStruct
 import net.minecraft.world.level.levelgen.structure.placement.StructurePlacement;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import org.apache.commons.lang3.mutable.MutableBoolean;
+import net.edenor.foldenor.secureseed.*;
 
 public abstract class ChunkGenerator {
 
@@ -339,7 +340,9 @@ public abstract class ChunkGenerator {
                 return structure.step().ordinal();
             }));
             List<FeatureSorter.StepFeatureData> list = (List) this.featuresPerStep.get();
-            WorldgenRandom seededrandom = new WorldgenRandom(new XoroshiroRandomSource(RandomSupport.generateUniqueSeed()));
+            WorldgenRandom seededrandom = new WorldgenCryptoRandom(
+                blockposition.getX(), blockposition.getZ(), Globals.Salt.UNDEFINED, 0
+            );
             long i = seededrandom.setDecorationSeed(generatoraccessseed.getSeed(), blockposition.getX(), blockposition.getZ());
             Set<Holder<Biome>> set = new ObjectArraySet();
 
@@ -578,9 +581,9 @@ public abstract class ChunkGenerator {
                     ArrayList<StructureSet.StructureSelectionEntry> arraylist = new ArrayList(list.size());
 
                     arraylist.addAll(list);
-                    WorldgenRandom seededrandom = new WorldgenRandom(new LegacyRandomSource(0L));
-
-                    seededrandom.setLargeFeatureSeed(placementCalculator.getLevelSeed(), chunkcoordintpair.x, chunkcoordintpair.z);
+                    WorldgenRandom seededrandom = new WorldgenCryptoRandom(
+                        chunkcoordintpair.x, chunkcoordintpair.z, Globals.Salt.GENERATE_FEATURE, 0
+                    );
                     int i = 0;
 
                     StructureSet.StructureSelectionEntry structureset_a1;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
index 798e22fb4d685b5845ebf687e8004e94f13a9751..3ad7297b0e50aa2fd3e13b2ff802d379f588cc76 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
@@ -37,6 +37,7 @@ import org.slf4j.Logger;
 // Spigot start
 import net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStructurePlacement;
 import org.spigotmc.SpigotWorldConfig;
+import net.edenor.foldenor.secureseed.*;
 // Spigot end
 
 public class ChunkGeneratorStructureState {
@@ -224,7 +225,7 @@ public class ChunkGeneratorStructureState {
             List<CompletableFuture<ChunkPos>> list = new ArrayList(j);
             int k = placement.spread();
             HolderSet<Biome> holderset = placement.preferredBiomes();
-            RandomSource randomsource = RandomSource.create();
+            RandomSource randomsource = new WorldgenCryptoRandom(0, 0, Globals.Salt.STRONGHOLDS, 0);
 
             // Paper start - Add missing structure set seed configs
             if (this.conf.strongholdSeed != null && structureSetEntry.is(net.minecraft.world.level.levelgen.structure.BuiltinStructureSets.STRONGHOLDS)) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index a907b79fd8291a0e92db138f37239d17424188a1..61cfd522f8a789beab24e07e5a812c487ac167a4 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -27,6 +27,7 @@ import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.blending.Blender;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
+import net.edenor.foldenor.secureseed.Globals;
 
 public class ChunkStatus {
 
@@ -253,6 +254,7 @@ public class ChunkStatus {
     }
 
     public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> generate(Executor executor, ServerLevel world, ChunkGenerator generator, StructureTemplateManager structureTemplateManager, ThreadedLevelLightEngine lightingProvider, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> fullChunkConverter, List<ChunkAccess> chunks) {
+        Globals.setupGlobals(world);
         ChunkAccess ichunkaccess = (ChunkAccess) chunks.get(chunks.size() / 2);
         ProfiledDuration profiledduration = JvmProfiler.INSTANCE.onChunkGenerate(ichunkaccess.getPos(), world.dimension(), this.toString());
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldOptions.java b/src/main/java/net/minecraft/world/level/levelgen/WorldOptions.java
index d38cabc9eeb45dd863e5f87b7df3b6327ea6a4a2..057e528d22def9ba1e6c4e8dc71049dcfaa8cd33 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldOptions.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldOptions.java
@@ -7,34 +7,54 @@ import java.util.Optional;
 import java.util.OptionalLong;
 import net.minecraft.util.RandomSource;
 import org.apache.commons.lang3.StringUtils;
+import java.util.stream.LongStream;
+import net.edenor.foldenor.secureseed.Globals;
 
 public class WorldOptions {
     public static final MapCodec<WorldOptions> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldOptions::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldOptions::generateStructures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldOptions::generateBonusChest), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((generatorOptions) -> {
-            return generatorOptions.legacyCustomOptions;
+        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldOptions::seed),
+            Codec.LONG_STREAM.fieldOf("feature_seed").stable().forGetter(WorldOptions::featureSeedStream),
+            Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldOptions::generateStructures),
+            Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldOptions::generateBonusChest),
+            Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((generatorOptions) -> {
+                return generatorOptions.legacyCustomOptions;
         })).apply(instance, instance.stable(WorldOptions::new));
     });
-    public static final WorldOptions DEMO_OPTIONS = new WorldOptions((long)"North Carolina".hashCode(), true, true);
+    public static final WorldOptions DEMO_OPTIONS = new WorldOptions((long)"North Carolina".hashCode(), Globals.createRandomWorldSeed(), true, true);
     private final long seed;
+    private final long[] featureSeed;
     private final boolean generateStructures;
     private final boolean generateBonusChest;
     private final Optional<String> legacyCustomOptions;
 
-    public WorldOptions(long seed, boolean generateStructures, boolean bonusChest) {
-        this(seed, generateStructures, bonusChest, Optional.empty());
+    public WorldOptions(long seed, long[] featureSeed, boolean generateStructures, boolean bonusChest) {
+        this(seed, featureSeed, generateStructures, bonusChest, Optional.empty());
     }
 
     public static WorldOptions defaultWithRandomSeed() {
-        return new WorldOptions(randomSeed(), true, false);
+        return new WorldOptions(randomSeed(), Globals.createRandomWorldSeed(), true, false);
     }
 
-    private WorldOptions(long seed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
+    private WorldOptions(long seed, LongStream featureSeed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
+        this(seed, featureSeed.toArray(), generateStructures, bonusChest, legacyCustomOptions);
+    }
+
+    private WorldOptions(long seed, long[] featureSeed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
+        this.featureSeed = featureSeed;
         this.seed = seed;
         this.generateStructures = generateStructures;
         this.generateBonusChest = bonusChest;
         this.legacyCustomOptions = legacyCustomOptions;
     }
 
+    public long[] featureSeed() {
+        return this.featureSeed;
+    }
+
+    public LongStream featureSeedStream() {
+        return LongStream.of(this.featureSeed);
+    }
+
     public long seed() {
         return this.seed;
     }
@@ -52,15 +72,15 @@ public class WorldOptions {
     }
 
     public WorldOptions withBonusChest(boolean bonusChest) {
-        return new WorldOptions(this.seed, this.generateStructures, bonusChest, this.legacyCustomOptions);
+        return new WorldOptions(this.seed, this.featureSeed, this.generateStructures, bonusChest, this.legacyCustomOptions);
     }
 
     public WorldOptions withStructures(boolean structures) {
-        return new WorldOptions(this.seed, structures, this.generateBonusChest, this.legacyCustomOptions);
+        return new WorldOptions(this.seed, this.featureSeed, structures, this.generateBonusChest, this.legacyCustomOptions);
     }
 
     public WorldOptions withSeed(OptionalLong seed) {
-        return new WorldOptions(seed.orElse(randomSeed()), this.generateStructures, this.generateBonusChest, this.legacyCustomOptions);
+        return new WorldOptions(seed.orElse(randomSeed()), Globals.createRandomWorldSeed(), this.generateStructures, this.generateBonusChest, this.legacyCustomOptions);
     }
 
     public static OptionalLong parseSeed(String seed) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/GeodeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/GeodeFeature.java
index f945fae50983424091b58f83ed14f2e8f2621619..b0bce93e634e6f2cd864beb9ca65febdc981f703 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/GeodeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/GeodeFeature.java
@@ -5,6 +5,9 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Codec;
 import java.util.List;
 import java.util.function.Predicate;
+
+import net.edenor.foldenor.secureseed.Globals;
+import net.edenor.foldenor.secureseed.WorldgenCryptoRandom;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -42,7 +45,7 @@ public class GeodeFeature extends Feature<GeodeConfiguration> {
         int j = geodeConfiguration.maxGenOffset;
         List<Pair<BlockPos, Integer>> list = Lists.newLinkedList();
         int k = geodeConfiguration.distributionPoints.sample(randomSource);
-        WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(worldGenLevel.getSeed()));
+        WorldgenRandom worldgenRandom = new WorldgenCryptoRandom(0, 0, Globals.Salt.GEODE_FEATURE, 0);
         NormalNoise normalNoise = NormalNoise.create(worldgenRandom, -4, 1.0D);
         List<BlockPos> list2 = Lists.newLinkedList();
         double d = (double)k / (double)geodeConfiguration.outerWallDistance.getMaxValue();
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java b/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
index 8eaa1a57e904fe7e540b311c6c5c36b755f021fc..50e6b3e67821af228114283142390cec4cc07b36 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
@@ -37,6 +37,7 @@ import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer;
 import net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
+import net.edenor.foldenor.secureseed.*;
 
 public abstract class Structure {
     public static final Codec<Structure> DIRECT_CODEC = BuiltInRegistries.STRUCTURE_TYPE.byNameCodec().dispatch(Structure::type, StructureType::codec);
@@ -164,9 +165,9 @@ public abstract class Structure {
         }
 
         private static WorldgenRandom makeRandom(long seed, ChunkPos chunkPos) {
-            WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(0L));
-            worldgenRandom.setLargeFeatureSeed(seed, chunkPos.x, chunkPos.z);
-            return worldgenRandom;
+            return new WorldgenCryptoRandom(
+                chunkPos.x, chunkPos.z, Globals.Salt.GENERATE_FEATURE, seed
+            );
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
index 41e24325dcb37e08936b1d13af34d338487929f3..f699e89371095ad7baa3f243c323d60fa8b6fc3c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
@@ -4,6 +4,9 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Optional;
+
+import net.edenor.foldenor.secureseed.Globals;
+import net.edenor.foldenor.secureseed.WorldgenCryptoRandom;
 import net.minecraft.core.Vec3i;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.ChunkPos;
@@ -51,8 +54,9 @@ public class RandomSpreadStructurePlacement extends StructurePlacement {
     public ChunkPos getPotentialStructureChunk(long seed, int chunkX, int chunkZ) {
         int i = Math.floorDiv(chunkX, this.spacing);
         int j = Math.floorDiv(chunkZ, this.spacing);
-        WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(0L));
-        worldgenRandom.setLargeFeatureWithSalt(seed, i, j, this.salt());
+        WorldgenRandom worldgenRandom = new WorldgenCryptoRandom(
+            i, j, Globals.Salt.POTENTIONAL_FEATURE, this.salt
+        );
         int k = this.spacing - this.separation;
         int l = this.spreadType.evaluate(worldgenRandom, k);
         int m = this.spreadType.evaluate(worldgenRandom, k);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
index 02e58161a0f5915084230831ee03050d762b67d2..75ef65ce0a0a6c9d709faa7f974b068ef2919e10 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
@@ -4,6 +4,8 @@ import com.mojang.datafixers.Products;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Optional;
+
+import net.edenor.foldenor.secureseed.WorldgenCryptoRandom;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Vec3i;
@@ -17,6 +19,7 @@ import net.minecraft.world.level.chunk.ChunkGeneratorStructureState;
 import net.minecraft.world.level.levelgen.LegacyRandomSource;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.levelgen.structure.StructureSet;
+import net.edenor.foldenor.secureseed.Globals;
 
 public abstract class StructurePlacement {
     public static final Codec<StructurePlacement> CODEC = BuiltInRegistries.STRUCTURE_PLACEMENT.byNameCodec().dispatch(StructurePlacement::type, StructurePlacementType::codec);
@@ -92,34 +95,32 @@ public abstract class StructurePlacement {
     public abstract StructurePlacementType<?> type();
 
     private static boolean probabilityReducer(long seed, int salt, int chunkX, int chunkZ, float frequency, @org.jetbrains.annotations.Nullable Integer saltOverride) { // Paper - Add missing structure set seed configs; ignore here
-        WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(0L));
-        worldgenRandom.setLargeFeatureWithSalt(seed, salt, chunkX, chunkZ);
+        WorldgenRandom worldgenRandom = new WorldgenCryptoRandom(
+            chunkX, chunkZ, Globals.Salt.UNDEFINED, salt
+        );
         return worldgenRandom.nextFloat() < frequency;
     }
 
     private static boolean legacyProbabilityReducerWithDouble(long seed, int salt, int chunkX, int chunkZ, float frequency, @org.jetbrains.annotations.Nullable Integer saltOverride) { // Paper - Add missing structure set seed configs
-        WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(0L));
-        if (saltOverride == null) { // Paper - Add missing structure set seed configs
-        worldgenRandom.setLargeFeatureSeed(seed, chunkX, chunkZ);
-        // Paper start - Add missing structure set seed configs
-        } else {
-            worldgenRandom.setLargeFeatureWithSalt(seed, chunkX, chunkZ, saltOverride);
-        }
-        // Paper end - Add missing structure set seed configs
+        WorldgenRandom worldgenRandom = new WorldgenCryptoRandom(
+            chunkX, chunkZ, Globals.Salt.MINESHAFT_FEATURE, 0
+        );
         return worldgenRandom.nextDouble() < (double)frequency;
     }
 
     private static boolean legacyArbitrarySaltProbabilityReducer(long seed, int salt, int chunkX, int chunkZ, float frequency, @org.jetbrains.annotations.Nullable Integer saltOverride) { // Paper - Add missing structure set seed configs
-        WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(0L));
-        worldgenRandom.setLargeFeatureWithSalt(seed, chunkX, chunkZ, saltOverride != null ? saltOverride : HIGHLY_ARBITRARY_RANDOM_SALT); // Paper - Add missing structure set seed configs
+        WorldgenRandom worldgenRandom = new WorldgenCryptoRandom(
+            chunkX, chunkZ, Globals.Salt.BURIED_TREASURE_FEATURE, 0
+        );
         return worldgenRandom.nextFloat() < frequency;
     }
 
     private static boolean legacyPillagerOutpostReducer(long seed, int salt, int chunkX, int chunkZ, float frequency, @org.jetbrains.annotations.Nullable Integer saltOverride) { // Paper - Add missing structure set seed configs; ignore here
         int i = chunkX >> 4;
         int j = chunkZ >> 4;
-        WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(0L));
-        worldgenRandom.setSeed((long)(i ^ j << 4) ^ seed);
+        WorldgenRandom worldgenRandom = new WorldgenCryptoRandom(
+            i, j, Globals.Salt.PILLAGER_OUTPOST_FEATURE, 0
+        );
         worldgenRandom.nextInt();
         return worldgenRandom.nextInt((int)(1.0F / frequency)) == 0;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index fd702027e62eb38d51fb7c46ef268e9bb94e1e92..f3262940498909734a87f6fbb8c552c2ca53a60d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -200,7 +200,7 @@ public class CraftChunk implements Chunk {
     @Override
     public boolean isSlimeChunk() {
         // 987234911L is deterimined in EntitySlime when seeing if a slime can spawn in a chunk
-        return this.worldServer.paperConfig().entities.spawning.allChunksAreSlimeChunks || WorldgenRandom.seedSlimeChunk(this.getX(), this.getZ(), this.getWorld().getSeed(), worldServer.spigotConfig.slimeSeed).nextInt(10) == 0; // Paper
+        return this.worldServer.paperConfig().entities.spawning.allChunksAreSlimeChunks ||worldServer.getChunk(this.getX(), this.getZ()).isSlimeChunk();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 4a87a64acece79d43f495b6a5f1553273bcca6ce..3b1046cc413d502c518c525a72c74a2d248da22d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -43,6 +43,9 @@ import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 // import jline.console.ConsoleReader;
+
+import net.edenor.foldenor.secureseed.Globals;
+import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.AdvancementHolder;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -1371,7 +1374,7 @@ public final class CraftServer implements Server {
             iregistry = leveldataanddimensions.dimensions().dimensions();
         } else {
             LevelSettings worldsettings;
-            WorldOptions worldoptions = new WorldOptions(creator.seed(), creator.generateStructures(), false);
+            WorldOptions worldoptions = new WorldOptions(creator.seed(), Globals.createRandomWorldSeed(), creator.generateStructures(), false);
             WorldDimensions worlddimensions;
 
             DedicatedServerProperties.WorldDimensionData properties = new DedicatedServerProperties.WorldDimensionData(GsonHelper.parse((creator.generatorSettings().isEmpty()) ? "{}" : creator.generatorSettings()), creator.type().name().toLowerCase(Locale.ROOT));
