From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Fri, 22 Dec 2023 20:54:37 +0400
Subject: [PATCH] Alternative-Keepalive-Handling


diff --git a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
index 3e4af65b58540520a7cde6da06aedadff6e2369c..645345766a0a3f9e92d079c7e2eb8394a216e9f1 100644
--- a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
+++ b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
@@ -26,6 +26,7 @@ public class FoldenorConfig {
 
     public static boolean sendNullEntityPackets = true;
     public static boolean appleskinProtocol = false;
+    public static boolean alternateKeepAlive = false;
 
     public static boolean vanilaEndPortalTeleportation = false;
 
@@ -127,6 +128,7 @@ public class FoldenorConfig {
     private static void networkSettings() {
         sendNullEntityPackets = getBoolean("network.send-null-entity-packets", sendNullEntityPackets);
         appleskinProtocol = getBoolean("network.appleskin-protocol", appleskinProtocol);
+        alternateKeepAlive = getBoolean("network.alternate-keepalive", alternateKeepAlive);
     }
 
     protected static void set(String path, Object val) {
diff --git a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index 2cb41845bd4d7d7ca3dcb11e6934e1f38c47cf17..dcb9fc6772e977e61880294d3315f918831f077f 100644
--- a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -4,6 +4,8 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
 import java.util.Objects;
 import javax.annotation.Nullable;
+
+import net.edenor.foldenor.config.FoldenorConfig;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -51,6 +53,8 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
     private long keepAliveTime = Util.getMillis(); // Paper
     private boolean keepAlivePending;
     private long keepAliveChallenge;
+
+    private it.unimi.dsi.fastutil.longs.LongList keepAlives = new it.unimi.dsi.fastutil.longs.LongArrayList();
     private int latency;
     private volatile boolean suspendFlushingOnServerThread = false;
     public final java.util.Map<java.util.UUID, net.kyori.adventure.resource.ResourcePackCallback> packCallbacks = new java.util.concurrent.ConcurrentHashMap<>(); // Paper - adventure resource pack callbacks
@@ -92,20 +96,28 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
 
     @Override
     public void handleKeepAlive(ServerboundKeepAlivePacket packet) {
-        //PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel()); // CraftBukkit // Paper - This shouldn't be on the main thread
-        if (this.keepAlivePending && packet.getId() == this.keepAliveChallenge) {
-            int i = (int) (Util.getMillis() - this.keepAliveTime);
-
-            this.latency = (this.latency * 3 + i) / 4;
-            this.keepAlivePending = false;
-        } else if (!this.isSingleplayerOwner()) {
-            // Paper start - This needs to be handled on the main thread for plugins
-            // Folia - region threading - do not schedule to main anymore, there is no main
-                this.disconnect(ServerCommonPacketListenerImpl.TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
-            // Folia - region threading - do not schedule to main anymore, there is no main
-            // Paper endg
-        }
 
+        if (FoldenorConfig.alternateKeepAlive) {
+            long id = packet.getId();
+            if (keepAlives.size() > 0 && keepAlives.contains(id)) {
+                int ping = (int) (Util.getMillis() - id);
+                this.latency = (this.latency * 3 + ping) / 4;
+                keepAlives.clear(); // we got a valid response, lets roll with it and forget the rest
+            }
+        } else
+            //PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel()); // CraftBukkit // Paper - This shouldn't be on the main thread
+            if (this.keepAlivePending && packet.getId() == this.keepAliveChallenge) {
+                int i = (int) (Util.getMillis() - this.keepAliveTime);
+
+                this.latency = (this.latency * 3 + i) / 4;
+                this.keepAlivePending = false;
+            } else if (!this.isSingleplayerOwner()) {
+                // Paper start - This needs to be handled on the main thread for plugins
+                // Folia - region threading - do not schedule to main anymore, there is no main
+                    this.disconnect(ServerCommonPacketListenerImpl.TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+                // Folia - region threading - do not schedule to main anymore, there is no main
+                // Paper endg
+            }
     }
 
     @Override
@@ -212,19 +224,31 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
         long currentTime = Util.getMillis();
         long elapsedTime = currentTime - this.keepAliveTime;
 
-        if (this.keepAlivePending) {
-            if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
-                ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName()); // more info
-                this.disconnect(ServerCommonPacketListenerImpl.TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+        if (FoldenorConfig.alternateKeepAlive) {
+            if (elapsedTime >= 1000L) { // 1 second
+                if (!processedDisconnect && keepAlives.size() * 1000L >= KEEPALIVE_LIMIT) {
+                    LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName());
+                    disconnect(ServerCommonPacketListenerImpl.TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT);
+                } else {
+                    keepAliveTime = currentTime; // hijack this field for 1 second intervals
+                    keepAlives.add(currentTime); // currentTime is ID
+                    send(new ClientboundKeepAlivePacket(currentTime));
+                }
             }
-        } else {
-            if (elapsedTime >= 15000L) { // 15 seconds
-                this.keepAlivePending = true;
-                this.keepAliveTime = currentTime;
-                this.keepAliveChallenge = currentTime;
-                this.send(new ClientboundKeepAlivePacket(this.keepAliveChallenge));
+        } else
+            if (this.keepAlivePending) {
+                if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
+                    ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName()); // more info
+                    this.disconnect(ServerCommonPacketListenerImpl.TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+                }
+            } else {
+                if (elapsedTime >= 15000L) { // 15 seconds
+                    this.keepAlivePending = true;
+                    this.keepAliveTime = currentTime;
+                    this.keepAliveChallenge = currentTime;
+                    this.send(new ClientboundKeepAlivePacket(this.keepAliveChallenge));
+                }
             }
-        }
         // Paper end
 
         this.server.getProfiler().pop();
