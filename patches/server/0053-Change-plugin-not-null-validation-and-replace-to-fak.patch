From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Fri, 4 Aug 2023 18:27:30 +0400
Subject: [PATCH] Change-plugin-not-null-validation-and-replace-to-fake-if-null


diff --git a/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaGlobalRegionScheduler.java b/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaGlobalRegionScheduler.java
index d306f911757a4d556c82c0070d4837db87afc497..7160102482a6299a168c4ec23f4fa8b891dd4e15 100644
--- a/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaGlobalRegionScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaGlobalRegionScheduler.java
@@ -2,6 +2,7 @@ package io.papermc.paper.threadedregions.scheduler;
 
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import ca.spottedleaf.concurrentutil.util.Validate;
+import dev.rgbmc.folia.FakePlugin;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
@@ -39,8 +40,11 @@ public class FoliaGlobalRegionScheduler implements GlobalRegionScheduler {
     }
 
     @Override
-    public void execute(final Plugin plugin, final Runnable run) {
-        Validate.notNull(plugin, "Plugin may not be null");
+    public void execute(Plugin plugin, final Runnable run) {
+        //Validate.notNull(plugin, "Plugin may not be null");
+        if (plugin == null){
+            plugin = new FakePlugin();
+        }
         Validate.notNull(run, "Runnable may not be null");
 
         this.run(plugin, (final ScheduledTask task) -> {
@@ -54,8 +58,11 @@ public class FoliaGlobalRegionScheduler implements GlobalRegionScheduler {
     }
 
     @Override
-    public ScheduledTask runDelayed(final Plugin plugin, final Consumer<ScheduledTask> task, final long delayTicks) {
-        Validate.notNull(plugin, "Plugin may not be null");
+    public ScheduledTask runDelayed(Plugin plugin, final Consumer<ScheduledTask> task, final long delayTicks) {
+        //Validate.notNull(plugin, "Plugin may not be null");
+        if (plugin == null){
+            plugin = new FakePlugin();
+        }
         Validate.notNull(task, "Task may not be null");
         if (delayTicks <= 0) {
             throw new IllegalArgumentException("Delay ticks may not be <= 0");
@@ -78,8 +85,11 @@ public class FoliaGlobalRegionScheduler implements GlobalRegionScheduler {
     }
 
     @Override
-    public ScheduledTask runAtFixedRate(final Plugin plugin, final Consumer<ScheduledTask> task, final long initialDelayTicks, final long periodTicks) {
-        Validate.notNull(plugin, "Plugin may not be null");
+    public ScheduledTask runAtFixedRate(Plugin plugin, final Consumer<ScheduledTask> task, final long initialDelayTicks, final long periodTicks) {
+        //Validate.notNull(plugin, "Plugin may not be null");
+        if (plugin == null){
+            plugin = new FakePlugin();
+        }
         Validate.notNull(task, "Task may not be null");
         if (initialDelayTicks <= 0) {
             throw new IllegalArgumentException("Initial delay ticks may not be <= 0");
diff --git a/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaRegionScheduler.java b/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaRegionScheduler.java
index aa10f3273e3bb35cf59d324644c269893cc12e99..1c7e4c8e7f65ca19aacae0cbf11a1a2afdd066dd 100644
--- a/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaRegionScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaRegionScheduler.java
@@ -2,6 +2,7 @@ package io.papermc.paper.threadedregions.scheduler;
 
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import ca.spottedleaf.concurrentutil.util.Validate;
+import dev.rgbmc.folia.FakePlugin;
 import io.papermc.paper.chunk.system.scheduling.ChunkHolderManager;
 import io.papermc.paper.threadedregions.RegionizedData;
 import io.papermc.paper.threadedregions.RegionizedServer;
@@ -61,8 +62,11 @@ public final class FoliaRegionScheduler implements RegionScheduler {
     }
 
     @Override
-    public void execute(final Plugin plugin, final World world, final int chunkX, final int chunkZ, final Runnable run) {
-        Validate.notNull(plugin, "Plugin may not be null");
+    public void execute(Plugin plugin, final World world, final int chunkX, final int chunkZ, final Runnable run) {
+        //Validate.notNull(plugin, "Plugin may not be null");
+        if (plugin == null){
+            plugin = new FakePlugin();
+        }
         Validate.notNull(world, "World may not be null");
         Validate.notNull(run, "Runnable may not be null");
 
@@ -77,9 +81,12 @@ public final class FoliaRegionScheduler implements RegionScheduler {
     }
 
     @Override
-    public ScheduledTask runDelayed(final Plugin plugin, final World world, final int chunkX, final int chunkZ,
+    public ScheduledTask runDelayed(Plugin plugin, final World world, final int chunkX, final int chunkZ,
                                     final Consumer<ScheduledTask> task, final long delayTicks) {
-        Validate.notNull(plugin, "Plugin may not be null");
+        //Validate.notNull(plugin, "Plugin may not be null");
+        if (plugin == null){
+            plugin = new FakePlugin();
+        }
         Validate.notNull(world, "World may not be null");
         Validate.notNull(task, "Task may not be null");
         if (delayTicks <= 0) {
@@ -107,9 +114,12 @@ public final class FoliaRegionScheduler implements RegionScheduler {
     }
 
     @Override
-    public ScheduledTask runAtFixedRate(final Plugin plugin, final World world, final int chunkX, final int chunkZ,
+    public ScheduledTask runAtFixedRate(Plugin plugin, final World world, final int chunkX, final int chunkZ,
                                         final Consumer<ScheduledTask> task, final long initialDelayTicks, final long periodTicks) {
-        Validate.notNull(plugin, "Plugin may not be null");
+        //Validate.notNull(plugin, "Plugin may not be null");
+        if (plugin == null){
+            plugin = new FakePlugin();
+        }
         Validate.notNull(world, "World may not be null");
         Validate.notNull(task, "Task may not be null");
         if (initialDelayTicks <= 0) {
