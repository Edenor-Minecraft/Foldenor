From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Mon, 12 Jun 2023 11:57:33 +0400
Subject: [PATCH] Secure-Seed


diff --git a/src/main/java/net/edenor/foldenor/Globals.java b/src/main/java/net/edenor/foldenor/Globals.java
new file mode 100644
index 0000000000000000000000000000000000000000..a2e7ab99cf17cf9d08c5d93c44325fe6cf4f3df0
--- /dev/null
+++ b/src/main/java/net/edenor/foldenor/Globals.java
@@ -0,0 +1,87 @@
+package net.edenor.foldenor;
+
+import com.google.common.collect.Iterables;
+import net.minecraft.server.level.ServerLevel;
+
+import java.math.BigInteger;
+import java.security.SecureRandom;
+import java.util.Optional;
+
+public class Globals {
+    public static final int WORLD_SEED_LONGS = 16;
+    public static final int WORLD_SEED_BITS = WORLD_SEED_LONGS * 64;
+
+    public static final long[] worldSeed = new long[WORLD_SEED_LONGS];
+    public static final ThreadLocal<Integer> dimension = ThreadLocal.withInitial(() -> 0);
+
+    public enum Salt {
+        UNDEFINED,
+        BASTION_FEATURE,
+        WOODLAND_MANSION_FEATURE,
+        MINESHAFT_FEATURE,
+        BURIED_TREASURE_FEATURE,
+        NETHER_FORTRESS_FEATURE,
+        PILLAGER_OUTPOST_FEATURE,
+        GEODE_FEATURE,
+        NETHER_FOSSIL_FEATURE,
+        OCEAN_MONUMENT_FEATURE,
+        RUINED_PORTAL_FEATURE,
+        POTENTIONAL_FEATURE,
+        GENERATE_FEATURE,
+        JIGSAW_PLACEMENT,
+        STRONGHOLDS,
+        POPULATION,
+        DECORATION,
+        SLIME_CHUNK
+    }
+
+    public static void setupGlobals(ServerLevel world) {
+        long[] seed = world.getServer().getWorldData().worldGenOptions().featureSeed();
+        System.arraycopy(seed, 0, worldSeed, 0, WORLD_SEED_LONGS);
+        int worldIndex = Iterables.indexOf(world.getServer().levelKeys(), it -> it == world.dimension());
+        if (worldIndex == -1) worldIndex = world.getServer().levelKeys().size(); // if we are in world construction it may not have been added to the map yet
+            dimension.set(worldIndex);
+    }
+
+        public static long[] createRandomWorldSeed() {
+                long[] seed = new long[WORLD_SEED_LONGS];
+                SecureRandom rand = new SecureRandom();
+                for (int i = 0; i < WORLD_SEED_LONGS; i++) {
+                        seed[i] = rand.nextLong();
+                    }
+                return seed;
+            }
+
+        public static Optional<long[]> parseSeed(String seedStr) {
+                if (seedStr.isEmpty()) return Optional.empty();
+
+                    try {
+                        long[] seed = new long[WORLD_SEED_LONGS];
+                        BigInteger seedBigInt = new BigInteger(seedStr);
+                        if (seedBigInt.signum() < 0) {
+                                seedBigInt = seedBigInt.and(BigInteger.ONE.shiftLeft(WORLD_SEED_BITS).subtract(BigInteger.ONE));
+                            }
+                        for (int i = 0; i < WORLD_SEED_LONGS; i++) {
+                                BigInteger[] divRem = seedBigInt.divideAndRemainder(BigInteger.ONE.shiftLeft(64));
+                                seed[i] = divRem[1].longValue();
+                                seedBigInt = divRem[0];
+                            }
+                        return Optional.of(seed);
+                    } catch (NumberFormatException ignored) {
+                        return Optional.empty();
+                    }
+            }
+
+        public static String seedToString(long[] seed) {
+            BigInteger seedBigInt = BigInteger.ZERO;
+            for (int i = WORLD_SEED_LONGS - 1; i >= 0; i--) {
+                BigInteger val = BigInteger.valueOf(seed[i]);
+            if (val.signum() < 0) {
+                val = val.add(BigInteger.ONE.shiftLeft(64));
+            }
+            seedBigInt = seedBigInt.shiftLeft(64).add(val);
+        }
+
+        return seedBigInt.toString();
+    }
+}
diff --git a/src/main/java/net/edenor/foldenor/Hashing.java b/src/main/java/net/edenor/foldenor/Hashing.java
new file mode 100644
index 0000000000000000000000000000000000000000..010b620d141b07011740412b9180fb11ef0ef8fc
--- /dev/null
+++ b/src/main/java/net/edenor/foldenor/Hashing.java
@@ -0,0 +1,71 @@
+package net.edenor.foldenor;
+
+public class Hashing {
+    private final static long[] blake2b_IV = {
+                            0x6a09e667f3bcc908L, 0xbb67ae8584caa73bL, 0x3c6ef372fe94f82bL,
+                            0xa54ff53a5f1d36f1L, 0x510e527fade682d1L, 0x9b05688c2b3e6c1fL,
+                            0x1f83d9abfb41bd6bL, 0x5be0cd19137e2179L
+                    };
+
+        private final static byte[][] blake2b_sigma = {
+                           {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
+                            {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3},
+                            {11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4},
+                            {7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8},
+                            {9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13},
+                            {2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9},
+                            {12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11},
+                            {13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10},
+                            {6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5},
+                            {10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0},
+                            {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
+                            {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3}
+                        };
+
+       public static long[] hashWorldSeed(long[] worldSeed) {
+                long[] result = blake2b_IV.clone();
+                result[0] ^= 0x01010040;
+                hash(worldSeed, result, new long[16], 0, false);
+                return result;
+            }
+
+        public static void hash(long[] message, long[] chainValue, long[] internalState, long messageOffset, boolean isFinal) {
+                assert message.length == 16;
+                assert chainValue.length == 8;
+                assert internalState.length == 16;
+
+                    System.arraycopy(chainValue, 0, internalState, 0, chainValue.length);
+                System.arraycopy(blake2b_IV, 0, internalState, chainValue.length, 4);
+                internalState[12] = messageOffset ^ blake2b_IV[4];
+                internalState[13] = blake2b_IV[5];
+                if (isFinal) internalState[14] = ~blake2b_IV[6];
+                internalState[15] = blake2b_IV[7];
+
+                    for (int round = 0; round < 12; round++) {
+                        G(message[blake2b_sigma[round][0]], message[blake2b_sigma[round][1]], 0, 4, 8, 12, internalState);
+                        G(message[blake2b_sigma[round][2]], message[blake2b_sigma[round][3]], 1, 5, 9, 13, internalState);
+                        G(message[blake2b_sigma[round][4]], message[blake2b_sigma[round][5]], 2, 6, 10, 14, internalState);
+                        G(message[blake2b_sigma[round][6]], message[blake2b_sigma[round][7]], 3, 7, 11, 15, internalState);
+                        G(message[blake2b_sigma[round][8]], message[blake2b_sigma[round][9]], 0, 5, 10, 15, internalState);
+                        G(message[blake2b_sigma[round][10]], message[blake2b_sigma[round][11]], 1, 6, 11, 12, internalState);
+                        G(message[blake2b_sigma[round][12]], message[blake2b_sigma[round][13]], 2, 7, 8, 13, internalState);
+                        G(message[blake2b_sigma[round][14]], message[blake2b_sigma[round][15]], 3, 4, 9, 14, internalState);
+                    }
+
+                    for (int i = 0; i < 8; i++) {
+                        chainValue[i] ^= internalState[i] ^ internalState[i + 8];
+                    }
+            }
+
+        private static void G(long m1, long m2, int posA, int posB, int posC, int posD, long[] internalState)
+    {
+                internalState[posA] = internalState[posA] + internalState[posB] + m1;
+                internalState[posD] = Long.rotateRight(internalState[posD] ^ internalState[posA], 32);
+                internalState[posC] = internalState[posC] + internalState[posD];
+                internalState[posB] = Long.rotateRight(internalState[posB] ^ internalState[posC], 24); // replaces 25 of BLAKE
+                internalState[posA] = internalState[posA] + internalState[posB] + m2;
+                internalState[posD] = Long.rotateRight(internalState[posD] ^ internalState[posA], 16);
+                internalState[posC] = internalState[posC] + internalState[posD];
+                internalState[posB] = Long.rotateRight(internalState[posB] ^ internalState[posC], 63); // replaces 11 of BLAKE
+            }
+}
diff --git a/src/main/java/net/edenor/foldenor/WorldgenCryptoRandom.java b/src/main/java/net/edenor/foldenor/WorldgenCryptoRandom.java
new file mode 100644
index 0000000000000000000000000000000000000000..1456e83378be4b83768784bff9421165c405173e
--- /dev/null
+++ b/src/main/java/net/edenor/foldenor/WorldgenCryptoRandom.java
@@ -0,0 +1,159 @@
+package net.edenor.foldenor;
+
+import net.minecraft.util.Mth;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.level.levelgen.LegacyRandomSource;
+import net.minecraft.world.level.levelgen.WorldgenRandom;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Arrays;
+
+public class WorldgenCryptoRandom extends WorldgenRandom {
+    // hash the world seed to guard against badly chosen world seeds
+    private static final long[] HASHED_ZERO_SEED = Hashing.hashWorldSeed(new long[Globals.WORLD_SEED_LONGS]);
+    private static final ThreadLocal<long[]> LAST_SEEN_WORLD_SEED = ThreadLocal.withInitial(() -> new long[Globals.WORLD_SEED_LONGS]);
+    private static final ThreadLocal<long[]> HASHED_WORLD_SEED = ThreadLocal.withInitial(() -> HASHED_ZERO_SEED);
+
+    private final long[] worldSeed = new long[Globals.WORLD_SEED_LONGS];
+    private final long[] randomBits = new long[8];
+    private int randomBitIndex;
+    private static final int MAX_RANDOM_BIT_INDEX = 64 * 8;
+    private static final int LOG2_MAX_RANDOM_BIT_INDEX = 9;
+    private long counter;
+    private final long[] message = new long[16];
+    private final long[] cachedInternalState = new long[16];
+
+        public WorldgenCryptoRandom(int x, int z, Globals.Salt typeSalt, long salt) {
+                super(new LegacyRandomSource(0L));
+                if (typeSalt != null) {
+                        this.setSecureSeed(x, z, typeSalt, salt);
+                    }
+            }
+
+        public void setSecureSeed(int x, int z, Globals.Salt typeSalt, long salt) {
+                System.arraycopy(Globals.worldSeed, 0, this.worldSeed, 0, Globals.WORLD_SEED_LONGS);
+                message[0] = ((long) x << 32) | ((long) z & 0xffffffffL);
+                message[1] = ((long) Globals.dimension.get() << 32) | ((long) salt & 0xffffffffL);
+                message[2] = typeSalt.ordinal();
+                message[3] = counter = 0;
+                randomBitIndex = MAX_RANDOM_BIT_INDEX;
+            }
+
+        private long[] getHashedWorldSeed() {
+                if (!Arrays.equals(worldSeed, LAST_SEEN_WORLD_SEED.get())) {
+                        HASHED_WORLD_SEED.set(Hashing.hashWorldSeed(worldSeed));
+                        System.arraycopy(worldSeed, 0, LAST_SEEN_WORLD_SEED.get(), 0, Globals.WORLD_SEED_LONGS);
+                    }
+                return HASHED_WORLD_SEED.get();
+            }
+
+        private void moreRandomBits() {
+                message[3] = counter++;
+                System.arraycopy(getHashedWorldSeed(), 0, randomBits, 0, 8);
+                Hashing.hash(message, randomBits, cachedInternalState, 64, true);
+            }
+
+        private long getBits(int count) {
+               if (randomBitIndex >= MAX_RANDOM_BIT_INDEX) {
+                        moreRandomBits();
+                        randomBitIndex -= MAX_RANDOM_BIT_INDEX;
+                    }
+
+                    int alignment = randomBitIndex & 63;
+                if ((randomBitIndex >>> 6) == ((randomBitIndex + count) >>> 6)) {
+                        long result = (randomBits[randomBitIndex >>> 6] >>> alignment) & ((1L << count) - 1);
+                        randomBitIndex += count;
+                        return result;
+                   } else {
+                        long result = (randomBits[randomBitIndex >>> 6] >>> alignment) & ((1L << (64 - alignment)) - 1);
+                        randomBitIndex += count;
+                        if (randomBitIndex >= MAX_RANDOM_BIT_INDEX) {
+                                moreRandomBits();
+                                randomBitIndex -= MAX_RANDOM_BIT_INDEX;
+                            }
+                        alignment = randomBitIndex & 63;
+                       result <<= alignment;
+                        result |= (randomBits[randomBitIndex >>> 6] >>> (64 - alignment)) & ((1L << alignment) - 1);
+
+                            return result;
+                    }
+            }
+
+        @Override
+    public @NotNull RandomSource fork() {
+                WorldgenCryptoRandom fork = new WorldgenCryptoRandom(0, 0, null, 0);
+
+                    System.arraycopy(Globals.worldSeed, 0, fork.worldSeed, 0, Globals.WORLD_SEED_LONGS);
+                fork.message[0] = this.message[0];
+                fork.message[1] = this.message[1];
+                fork.message[2] = this.message[2];
+                fork.message[3] = this.message[3];
+                fork.randomBitIndex = this.randomBitIndex;
+                fork.counter = this.counter;
+                fork.nextLong();
+
+                    return fork;
+            }
+
+       @Override
+    public int next(int bits) {
+                return (int) getBits(bits);
+            }
+
+        @Override
+    public void consumeCount(int count) {
+               randomBitIndex += count;
+                if (randomBitIndex >= MAX_RANDOM_BIT_INDEX * 2) {
+                        randomBitIndex -= MAX_RANDOM_BIT_INDEX;
+                        counter += randomBitIndex >>> LOG2_MAX_RANDOM_BIT_INDEX;
+                        randomBitIndex &= MAX_RANDOM_BIT_INDEX - 1;
+                        randomBitIndex += MAX_RANDOM_BIT_INDEX;
+                    }
+            }
+
+        @Override
+    public int nextInt(int bound) {
+               int bits = Mth.ceillog2(bound);
+                int result;
+                do {
+                        result = (int) getBits(bits);
+                    } while (result >= bound);
+
+                    return result;
+            }
+
+        @Override
+    public long nextLong() {
+                return getBits(64);
+            }
+
+        @Override
+    public double nextDouble() {
+                return getBits(53) * 0x1.0p-53;
+            }
+
+        @Override
+    public long setDecorationSeed(long worldSeed, int blockX, int blockZ) {
+                setSecureSeed(blockX, blockZ, Globals.Salt.POPULATION, 0);
+                return ((long) blockX << 32) | ((long) blockZ & 0xffffffffL);
+            }
+
+        @Override
+    public void setFeatureSeed(long populationSeed, int index, int step) {
+                setSecureSeed((int) (populationSeed >> 32), (int) populationSeed, Globals.Salt.DECORATION, index + 10000L * step);
+            }
+
+        @Override
+    public void setLargeFeatureSeed(long worldSeed, int chunkX, int chunkZ) {
+                super.setLargeFeatureSeed(worldSeed, chunkX, chunkZ);
+            }
+
+        @Override
+    public void setLargeFeatureWithSalt(long worldSeed, int regionX, int regionZ, int salt) {
+                super.setLargeFeatureWithSalt(worldSeed, regionX, regionZ, salt);
+            }
+
+        public static RandomSource seedSlimeChunk(int chunkX, int chunkZ) {
+                return new WorldgenCryptoRandom(chunkX, chunkZ, Globals.Salt.SLIME_CHUNK, 0);
+            }
+}
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 144b0b57e21bb735ceef3302dab3e36912d616db..fe7220a53fafd6d4a5674678c1d1b42472bdba9c 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -39,81 +39,7 @@ import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.game.ClientboundCommandsPacket;
 import net.minecraft.resources.ResourceKey;
-import net.minecraft.server.commands.AdvancementCommands;
-import net.minecraft.server.commands.AttributeCommand;
-import net.minecraft.server.commands.BanIpCommands;
-import net.minecraft.server.commands.BanListCommands;
-import net.minecraft.server.commands.BanPlayerCommands;
-import net.minecraft.server.commands.BossBarCommands;
-import net.minecraft.server.commands.ClearInventoryCommands;
-import net.minecraft.server.commands.CloneCommands;
-import net.minecraft.server.commands.DamageCommand;
-import net.minecraft.server.commands.DataPackCommand;
-import net.minecraft.server.commands.DeOpCommands;
-import net.minecraft.server.commands.DebugCommand;
-import net.minecraft.server.commands.DefaultGameModeCommands;
-import net.minecraft.server.commands.DifficultyCommand;
-import net.minecraft.server.commands.EffectCommands;
-import net.minecraft.server.commands.EmoteCommands;
-import net.minecraft.server.commands.EnchantCommand;
-import net.minecraft.server.commands.ExecuteCommand;
-import net.minecraft.server.commands.ExperienceCommand;
-import net.minecraft.server.commands.FillBiomeCommand;
-import net.minecraft.server.commands.FillCommand;
-import net.minecraft.server.commands.ForceLoadCommand;
-import net.minecraft.server.commands.FunctionCommand;
-import net.minecraft.server.commands.GameModeCommand;
-import net.minecraft.server.commands.GameRuleCommand;
-import net.minecraft.server.commands.GiveCommand;
-import net.minecraft.server.commands.HelpCommand;
-import net.minecraft.server.commands.ItemCommands;
-import net.minecraft.server.commands.JfrCommand;
-import net.minecraft.server.commands.KickCommand;
-import net.minecraft.server.commands.KillCommand;
-import net.minecraft.server.commands.ListPlayersCommand;
-import net.minecraft.server.commands.LocateCommand;
-import net.minecraft.server.commands.LootCommand;
-import net.minecraft.server.commands.MsgCommand;
-import net.minecraft.server.commands.OpCommand;
-import net.minecraft.server.commands.PardonCommand;
-import net.minecraft.server.commands.PardonIpCommand;
-import net.minecraft.server.commands.ParticleCommand;
-import net.minecraft.server.commands.PerfCommand;
-import net.minecraft.server.commands.PlaceCommand;
-import net.minecraft.server.commands.PlaySoundCommand;
-import net.minecraft.server.commands.PublishCommand;
-import net.minecraft.server.commands.RecipeCommand;
-import net.minecraft.server.commands.ReloadCommand;
-import net.minecraft.server.commands.ReturnCommand;
-import net.minecraft.server.commands.RideCommand;
-import net.minecraft.server.commands.SaveAllCommand;
-import net.minecraft.server.commands.SaveOffCommand;
-import net.minecraft.server.commands.SaveOnCommand;
-import net.minecraft.server.commands.SayCommand;
-import net.minecraft.server.commands.ScheduleCommand;
-import net.minecraft.server.commands.ScoreboardCommand;
-import net.minecraft.server.commands.SeedCommand;
-import net.minecraft.server.commands.SetBlockCommand;
-import net.minecraft.server.commands.SetPlayerIdleTimeoutCommand;
-import net.minecraft.server.commands.SetSpawnCommand;
-import net.minecraft.server.commands.SetWorldSpawnCommand;
-import net.minecraft.server.commands.SpawnArmorTrimsCommand;
-import net.minecraft.server.commands.SpectateCommand;
-import net.minecraft.server.commands.SpreadPlayersCommand;
-import net.minecraft.server.commands.StopCommand;
-import net.minecraft.server.commands.StopSoundCommand;
-import net.minecraft.server.commands.SummonCommand;
-import net.minecraft.server.commands.TagCommand;
-import net.minecraft.server.commands.TeamCommand;
-import net.minecraft.server.commands.TeamMsgCommand;
-import net.minecraft.server.commands.TeleportCommand;
-import net.minecraft.server.commands.TellRawCommand;
-import net.minecraft.server.commands.TimeCommand;
-import net.minecraft.server.commands.TitleCommand;
-import net.minecraft.server.commands.TriggerCommand;
-import net.minecraft.server.commands.WeatherCommand;
-import net.minecraft.server.commands.WhitelistCommand;
-import net.minecraft.server.commands.WorldBorderCommand;
+import net.minecraft.server.commands.*;
 import net.minecraft.server.commands.data.DataCommands;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.TagKey;
@@ -178,15 +104,15 @@ public class Commands {
         //ReloadCommand.register(this.dispatcher); // Folia - region threading
         RecipeCommand.register(this.dispatcher);
         //ReturnCommand.register(this.dispatcher); // Folia - region threading - TODO later
-        //RideCommand.register(this.dispatcher); // Folia - region threading - TODO later
+        RideCommand.register(this.dispatcher); // Folia - region threading - TODO later
         SayCommand.register(this.dispatcher);
         //ScheduleCommand.register(this.dispatcher); // Folia - region threading
         //ScoreboardCommand.register(this.dispatcher); // Folia - region threading - TODO later
-        SeedCommand.register(this.dispatcher, environment != Commands.CommandSelection.INTEGRATED);
+        NewSeedCommand.register(this.dispatcher, environment != Commands.CommandSelection.INTEGRATED);
         SetBlockCommand.register(this.dispatcher, commandRegistryAccess);
         SetSpawnCommand.register(this.dispatcher);
         SetWorldSpawnCommand.register(this.dispatcher);
-        //SpectateCommand.register(this.dispatcher); // Folia - region threading - TODO later
+        SpectateCommand.register(this.dispatcher); // Folia - region threading - TODO later
         //SpreadPlayersCommand.register(this.dispatcher); // Folia - region threading - TODO later
         StopSoundCommand.register(this.dispatcher);
         SummonCommand.register(this.dispatcher, commandRegistryAccess);
@@ -199,7 +125,7 @@ public class Commands {
         TitleCommand.register(this.dispatcher);
         //TriggerCommand.register(this.dispatcher); // Folia - region threading - TODO later
         WeatherCommand.register(this.dispatcher);
-        //WorldBorderCommand.register(this.dispatcher); // Folia - region threading - TODO later
+        WorldBorderCommand.register(this.dispatcher); // Folia - region threading - TODO later
         if (JvmProfiler.INSTANCE.isAvailable()) {
             JfrCommand.register(this.dispatcher);
         }
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index dae36c6452ccd57a436dd918547b64d59957ab0a..d031e34edd0b5e9af6901f86961601f2a4f6c977 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -55,6 +55,7 @@ import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.dimension.LevelStem;
+import net.minecraft.world.level.levelgen.NewWorldOptions;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
@@ -254,12 +255,12 @@ public class Main {
                             return new WorldLoader.DataLoadOutput<>((WorldData) pair.getFirst(), ((WorldDimensions.Complete) pair.getSecond()).dimensionsRegistryAccess());
                         } else {
                             LevelSettings worldsettings;
-                            WorldOptions worldoptions;
+                            NewWorldOptions worldoptions;
                             WorldDimensions worlddimensions;
 
                             if (optionset.has("demo")) { // CraftBukkit
                                 worldsettings = MinecraftServer.DEMO_SETTINGS;
-                                worldoptions = WorldOptions.DEMO_OPTIONS;
+                                worldoptions = NewWorldOptions.DEMO_OPTIONS;
                                 worlddimensions = WorldPresets.createNormalWorldDimensions(worldloader_a.datapackWorldgen());
                             } else {
                                 DedicatedServerProperties dedicatedserverproperties = dedicatedserversettings.getProperties();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b6b83ee995bd359f7a25091a7d8f21b1dccfaa8a..3ddbae380899043f51bd5595f0303db3ccbc0a3d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -151,15 +151,7 @@ import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
-import net.minecraft.world.level.storage.CommandStorage;
-import net.minecraft.world.level.storage.DimensionDataStorage;
-import net.minecraft.world.level.storage.LevelData;
-import net.minecraft.world.level.storage.LevelResource;
-import net.minecraft.world.level.storage.LevelStorageSource;
-import net.minecraft.world.level.storage.PlayerDataStorage;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-import net.minecraft.world.level.storage.ServerLevelData;
-import net.minecraft.world.level.storage.WorldData;
+import net.minecraft.world.level.storage.*;
 import net.minecraft.world.level.storage.loot.LootDataManager;
 import org.slf4j.Logger;
 
@@ -283,7 +275,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private String serverId;
     public MinecraftServer.ReloadableResources resources;
     private final StructureTemplateManager structureTemplateManager;
-    protected WorldData worldData;
+    protected NewWorldData worldData;
     private volatile boolean isSaving;
 
     // CraftBukkit start
@@ -2700,7 +2692,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.structureTemplateManager;
     }
 
-    public WorldData getWorldData() {
+    public NewWorldData getWorldData() {
         return this.worldData;
     }
 
diff --git a/src/main/java/net/minecraft/server/commands/NewSeedCommand.java b/src/main/java/net/minecraft/server/commands/NewSeedCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc5e2fcdba09be7dae8fec7dd7e0222592bf81b7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/commands/NewSeedCommand.java
@@ -0,0 +1,39 @@
+package net.minecraft.server.commands;
+
+import com.mojang.brigadier.CommandDispatcher;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.ComponentUtils;
+
+import net.minecraft.ChatFormatting;
+import net.minecraft.network.chat.ClickEvent;
+import net.minecraft.network.chat.HoverEvent;
+import net.edenor.foldenor.Globals;
+
+import java.util.function.Supplier;
+
+public class NewSeedCommand {
+    public static void register(CommandDispatcher<CommandSourceStack> dispatcher, boolean dedicated) {
+        dispatcher.register(Commands.literal("seed").requires((source) -> {
+            return !dedicated || source.hasPermission(2);
+        }).executes((context) -> {
+            long l = context.getSource().getLevel().getSeed();
+            Globals.setupGlobals(context.getSource().getLevel());
+            String seedStr = Globals.seedToString(Globals.worldSeed);
+
+            Component seedComponent = ComponentUtils.wrapInSquareBrackets(Component.literal(String.valueOf(l)).withStyle((style) -> {
+                 return style.withColor(ChatFormatting.GREEN).withClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, String.valueOf(l))).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Component.translatable("chat.copy.click"))).withInsertion(String.valueOf(l));
+           }));
+
+           Component featureSeedComponent = ComponentUtils.wrapInSquareBrackets(Component.translatable("chat.copy.click").withStyle((style) -> {
+                 return style.withColor(ChatFormatting.GREEN).withClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, seedStr)).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Component.translatable("chat.copy.click"))).withInsertion(seedStr);
+           }));
+
+            context.getSource().sendSuccess((Supplier<Component>) Component.translatable("commands.seed.success", seedComponent), false);
+            context.getSource().sendSuccess((Supplier<Component>) Component.translatable("Feature seed: %s", featureSeedComponent), false);
+            return (int)l;
+        }));
+    }
+}
+
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 49cc391aa6e94e9ac7f9138bb0a8851c5d14f068..9eb5fc79add47129efd665bab4758e27b542a413 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -26,11 +26,7 @@ import net.minecraft.SystemReport;
 import net.minecraft.Util;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
-import net.minecraft.server.ConsoleInput;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.ServerInterface;
-import net.minecraft.server.Services;
-import net.minecraft.server.WorldStem;
+import net.minecraft.server.*;
 import net.minecraft.server.gui.MinecraftServerGui;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -53,7 +49,6 @@ import net.minecraft.world.level.storage.LevelStorageSource;
 import org.slf4j.Logger;
 
 // CraftBukkit start
-import net.minecraft.server.WorldLoader;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index f3a6ed604960438aa81fb959956a8026e93169bb..5bcf24798ff37baa2d0f6ace4fa35c08537ca2b5 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -38,6 +38,7 @@ import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.levelgen.FlatLevelSource;
+import net.minecraft.world.level.levelgen.NewWorldOptions;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
@@ -49,6 +50,8 @@ import org.slf4j.Logger;
 import joptsimple.OptionSet;
 // CraftBukkit end
 
+import net.edenor.foldenor.Globals;
+
 public class DedicatedServerProperties extends Settings<DedicatedServerProperties> {
 
     static final Logger LOGGER = LogUtils.getLogger();
@@ -106,7 +109,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
     public final Settings<DedicatedServerProperties>.MutableValue<Boolean> whiteList;
     public final boolean enforceSecureProfile;
     private final DedicatedServerProperties.WorldDimensionData worldDimensionData;
-    public final WorldOptions worldOptions;
+    public final NewWorldOptions worldOptions;
 
     public final boolean enableNonFoliaPlugins = this.get("enableNonFoliaPlugins", true);
 
@@ -161,7 +164,15 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         boolean flag = this.get("generate-structures", true);
         long i = WorldOptions.parseSeed(s).orElse(WorldOptions.randomSeed());
 
-        this.worldOptions = new WorldOptions(i, flag, false);
+        String featureSeedString = this.get("feature-level-seed", "");
+        long[] featureSeed;
+        if (featureSeedString.isEmpty()) {
+            featureSeed = Globals.createRandomWorldSeed();
+        } else {
+            featureSeed = Globals.parseSeed(featureSeedString).orElseGet(Globals::createRandomWorldSeed);
+        }
+
+        this.worldOptions = new NewWorldOptions(i, featureSeed, flag, false);
         this.worldDimensionData = new DedicatedServerProperties.WorldDimensionData((JsonObject) this.get("generator-settings", (s1) -> {
             return GsonHelper.parse(!s1.isEmpty() ? s1 : "{}");
         }, new JsonObject()), (String) this.get("level-type", (s1) -> {
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 55f0fbc0d311f76b9345b21361f5d087a5288d6c..5d5814ee2cc0f2704f26864c8c09ed4a77e10324 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -305,10 +305,6 @@ public class ChunkHolder {
 
     public void broadcastChanges(LevelChunk chunk) {
         if (this.needsBroadcastChanges()) { // Paper - moved into above, other logic needs to call
-            if (chunk == null){
-                MinecraftServer.LOGGER.error("Failed to tick chunk, beacause chunk is null");
-                return;
-            }
             Level world = chunk.getLevel();
             List list;
 
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index af35fd63b090aa3d89bc60cb9cb7694b5f502681..865b8c9631605a6270e014459bf9e8c2bcdf6aa7 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -49,6 +49,7 @@ import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
+import net.edenor.foldenor.Globals;
 
 public class ServerChunkCache extends ChunkSource {
 
@@ -654,6 +655,7 @@ public class ServerChunkCache extends ChunkSource {
     }
 
     public ChunkGenerator getGenerator() {
+        Globals.setupGlobals(level);
         return this.chunkMap.generator();
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index cf8f93734121e5c1959959f0ba13ee4e6db31959..12d1e4644ddfedb1af63603c80b93fb97fb0cede 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -177,6 +177,7 @@ import org.bukkit.event.world.GenericGameEvent;
 import org.bukkit.event.world.TimeSkipEvent;
 // CraftBukkit end
 import it.unimi.dsi.fastutil.ints.IntArrayList; // Paper
+import net.edenor.foldenor.Globals;
 
 public class ServerLevel extends Level implements WorldGenLevel {
 
@@ -691,6 +692,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             chunkgenerator = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, chunkgenerator, gen);
         }
         // CraftBukkit end
+        Globals.setupGlobals(this);
         boolean flag2 = minecraftserver.forceSynchronousWrites();
         DataFixer datafixer = minecraftserver.getFixerUpper();
         this.entityStorage = new EntityRegionFileStorage(convertable_conversionsession.getDimensionPath(resourcekey).resolve("entities"), flag2); // Paper - rewrite chunk system  //EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, convertable_conversionsession.getDimensionPath(resourcekey).resolve("entities"), datafixer, flag2, minecraftserver);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 343433158507451152e5b2fc5e5fd0b0e6b229db..fd4dbe2bf055f855bc93d6b325cc100191bec9fc 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -340,7 +340,7 @@ public class Slime extends Mob implements Enemy {
             }
 
             ChunkPos chunkcoordintpair = new ChunkPos(pos);
-            boolean flag = world.getMinecraftWorld().paperConfig().entities.spawning.allChunksAreSlimeChunks || WorldgenRandom.seedSlimeChunk(chunkcoordintpair.x, chunkcoordintpair.z, ((WorldGenLevel) world).getSeed(), world.getMinecraftWorld().spigotConfig.slimeSeed).nextInt(10) == 0; // Spigot // Paper
+            boolean flag = world.getMinecraftWorld().paperConfig().entities.spawning.allChunksAreSlimeChunks || world.getChunk(chunkcoordintpair.x, chunkcoordintpair.z).isSlimeChunk();
 
             // Paper start - Replace rules for Height in Slime Chunks
             final double maxHeightSlimeChunk = world.getMinecraftWorld().paperConfig().entities.spawning.slimeSpawnHeight.slimeChunk.maximum;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index e8fb179c5f443efd70293f31cdf00ca2eaf05006..564fa4b0665696383c50f673e5ec42123c4166c6 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -53,6 +53,7 @@ import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.ticks.SerializableTickContainer;
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
+import net.edenor.foldenor.WorldgenCryptoRandom;
 
 public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiomeSource, LightChunk, StructureAccess {
 
@@ -82,6 +83,9 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     protected final LevelHeightAccessor levelHeightAccessor;
     protected final LevelChunkSection[] sections;
 
+    private boolean slimeChunk;
+    private boolean hasComputedSlimeChunk;
+
     // CraftBukkit start - SPIGOT-6814: move to IChunkAccess to account for 1.17 to 1.18 chunk upgrading.
     private static final org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry();
     public org.bukkit.craftbukkit.persistence.DirtyCraftPersistentDataContainer persistentDataContainer = new org.bukkit.craftbukkit.persistence.DirtyCraftPersistentDataContainer(ChunkAccess.DATA_TYPE_REGISTRY);
@@ -99,6 +103,15 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
         return this.blockNibbles;
     }
 
+
+    public boolean isSlimeChunk() {
+         if (!hasComputedSlimeChunk) {
+              hasComputedSlimeChunk = true;
+              slimeChunk = WorldgenCryptoRandom.seedSlimeChunk(chunkPos.x, chunkPos.z).nextInt(10) == 0;
+         }
+
+         return slimeChunk;
+    }
     public void setBlockNibbles(final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] nibbles) {
         this.blockNibbles = nibbles;
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index dfae4b5bb0b7e0439c916bc470b32622e96187ea..f6a5c922722e9bee4739d95c64966f750623512c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -77,6 +77,8 @@ import net.minecraft.world.level.levelgen.structure.placement.StructurePlacement
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 
+import net.edenor.foldenor.*;
+
 public abstract class ChunkGenerator {
 
     public static final Codec<ChunkGenerator> CODEC = BuiltInRegistries.CHUNK_GENERATOR.byNameCodec().dispatchStable(ChunkGenerator::codec, Function.identity());
@@ -336,7 +338,9 @@ public abstract class ChunkGenerator {
                 return structure.step().ordinal();
             }));
             List<FeatureSorter.StepFeatureData> list = (List) this.featuresPerStep.get();
-            WorldgenRandom seededrandom = new WorldgenRandom(new XoroshiroRandomSource(RandomSupport.generateUniqueSeed()));
+            WorldgenRandom seededrandom = new WorldgenCryptoRandom(
+                blockposition.getX(), blockposition.getZ(), Globals.Salt.UNDEFINED, 0
+            );
             long i = seededrandom.setDecorationSeed(generatoraccessseed.getSeed(), blockposition.getX(), blockposition.getZ());
             Set<Holder<Biome>> set = new ObjectArraySet();
 
@@ -575,9 +579,9 @@ public abstract class ChunkGenerator {
                     ArrayList<StructureSet.StructureSelectionEntry> arraylist = new ArrayList(list.size());
 
                     arraylist.addAll(list);
-                    WorldgenRandom seededrandom = new WorldgenRandom(new LegacyRandomSource(0L));
-
-                    seededrandom.setLargeFeatureSeed(placementCalculator.getLevelSeed(), chunkcoordintpair.x, chunkcoordintpair.z);
+                    WorldgenRandom seededrandom = new WorldgenCryptoRandom(
+                         chunkcoordintpair.x, chunkcoordintpair.z, Globals.Salt.GENERATE_FEATURE, 0
+                    );
                     int i = 0;
 
                     StructureSet.StructureSelectionEntry structureset_a1;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
index f8cd23fb6ea7909b8f30bd21d3f2c7bcc483ef21..ebc6b0295e952fc186b2e7e5a05c685f3f08dba6 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
@@ -39,6 +39,8 @@ import net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStruct
 import org.spigotmc.SpigotWorldConfig;
 // Spigot end
 
+import net.edenor.foldenor.*;
+
 public class ChunkGeneratorStructureState {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -221,15 +223,8 @@ public class ChunkGeneratorStructureState {
             List<CompletableFuture<ChunkPos>> list = new ArrayList(j);
             int k = placement.spread();
             HolderSet<Biome> holderset = placement.preferredBiomes();
-            RandomSource randomsource = RandomSource.create();
+            RandomSource randomsource = new WorldgenCryptoRandom(0, 0, Globals.Salt.STRONGHOLDS, 0);
 
-            // Paper start
-            if (this.conf.strongholdSeed != null && structureSetEntry.is(net.minecraft.world.level.levelgen.structure.BuiltinStructureSets.STRONGHOLDS)) {
-                randomsource.setSeed(this.conf.strongholdSeed);
-            } else {
-            // Paper end
-            randomsource.setSeed(this.concentricRingsSeed);
-            } // Paper
             double d0 = randomsource.nextDouble() * 3.141592653589793D * 2.0D;
             int l = 0;
             int i1 = 0;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index a907b79fd8291a0e92db138f37239d17424188a1..9a157fd179035cd7032cd96664f9c6ac10d503cb 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -28,6 +28,8 @@ import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.blending.Blender;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 
+import net.edenor.foldenor.Globals;
+
 public class ChunkStatus {
 
     // Paper start - rewrite chunk system
@@ -253,6 +255,7 @@ public class ChunkStatus {
     }
 
     public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> generate(Executor executor, ServerLevel world, ChunkGenerator generator, StructureTemplateManager structureTemplateManager, ThreadedLevelLightEngine lightingProvider, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> fullChunkConverter, List<ChunkAccess> chunks) {
+        Globals.setupGlobals(world);
         ChunkAccess ichunkaccess = (ChunkAccess) chunks.get(chunks.size() / 2);
         ProfiledDuration profiledduration = JvmProfiler.INSTANCE.onChunkGenerate(ichunkaccess.getPos(), world.dimension(), this.toString());
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NewWorldOptions.java b/src/main/java/net/minecraft/world/level/levelgen/NewWorldOptions.java
new file mode 100644
index 0000000000000000000000000000000000000000..c8c8223629ca5e5e33afd7b320e1b76d4fa0705d
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/levelgen/NewWorldOptions.java
@@ -0,0 +1,96 @@
+package net.minecraft.world.level.levelgen;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.MapCodec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.util.RandomSource;
+import org.apache.commons.lang3.StringUtils;
+
+import java.util.Optional;
+import java.util.OptionalLong;
+
+import java.util.stream.LongStream;
+import net.edenor.foldenor.Globals;
+
+public class NewWorldOptions extends WorldOptions {
+    public static final MapCodec<NewWorldOptions> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
+        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(NewWorldOptions::seed),
+           Codec.LONG_STREAM.fieldOf("feature_seed").stable().forGetter(NewWorldOptions::featureSeedStream),
+           Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(NewWorldOptions::generateStructures),
+           Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(NewWorldOptions::generateBonusChest),
+           Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((generatorOptions) -> {
+                return generatorOptions.legacyCustomOptions;
+        })).apply(instance, instance.stable(NewWorldOptions::new));
+    });
+    public static final NewWorldOptions DEMO_OPTIONS = new NewWorldOptions((long)"North Carolina".hashCode(), Globals.createRandomWorldSeed(), true, true);
+    private final long[] featureSeed;
+
+    public NewWorldOptions(long seed, long[] featureSeed, boolean generateStructures, boolean bonusChest) {
+        this(seed, featureSeed, generateStructures, bonusChest, Optional.empty());
+    }
+
+    public static NewWorldOptions defaultWithRandomSeed() {
+        return new NewWorldOptions(randomSeed(), Globals.createRandomWorldSeed(), true, false);
+    }
+
+    private NewWorldOptions(long seed, long[] featureSeed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
+        super(seed, generateStructures, bonusChest);
+        this.featureSeed = featureSeed;
+    }
+
+    public long[] featureSeed() {
+        return this.featureSeed;
+    }
+
+    public LongStream featureSeedStream() {
+        return LongStream.of(this.featureSeed);
+    }
+
+    public long seed() {
+        return this.seed;
+    }
+
+    public boolean generateStructures() {
+        return this.generateStructures;
+    }
+
+    public boolean generateBonusChest() {
+        return this.generateBonusChest;
+    }
+
+    public boolean isOldCustomizedWorld() {
+        return this.legacyCustomOptions.isPresent();
+    }
+
+    public NewWorldOptions withBonusChest(boolean bonusChest) {
+        return new NewWorldOptions(this.seed, this.featureSeed, this.generateStructures, bonusChest, this.legacyCustomOptions);
+    }
+
+    public NewWorldOptions withStructures(boolean structures) {
+        return new NewWorldOptions(this.seed, this.featureSeed, structures, this.generateBonusChest, this.legacyCustomOptions);
+    }
+
+    public NewWorldOptions withSeed(OptionalLong seed) {
+        return new NewWorldOptions(seed.orElse(randomSeed()), Globals.createRandomWorldSeed(), this.generateStructures, this.generateBonusChest, this.legacyCustomOptions);
+    }
+
+    public static OptionalLong parseSeed(String seed) {
+        seed = seed.trim();
+        if (StringUtils.isEmpty(seed)) {
+            return OptionalLong.empty();
+        } else {
+            try {
+                return OptionalLong.of(Long.parseLong(seed));
+            } catch (NumberFormatException var2) {
+                return OptionalLong.of((long)seed.hashCode());
+            }
+        }
+    }
+
+    public static long randomSeed() {
+        return RandomSource.create().nextLong();
+    }
+}
+
+
+
diff --git a/src/main/java/net/minecraft/world/level/storage/NewWorldData.java b/src/main/java/net/minecraft/world/level/storage/NewWorldData.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7ee0eeb6b29aafeb62879b2eba3a9a2dd81d1c5
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/storage/NewWorldData.java
@@ -0,0 +1,114 @@
+package net.minecraft.world.level.storage;
+
+import com.mojang.serialization.Lifecycle;
+import java.util.Locale;
+import java.util.Set;
+import javax.annotation.Nullable;
+import net.minecraft.CrashReportCategory;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.flag.FeatureFlagSet;
+import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.GameType;
+import net.minecraft.world.level.LevelSettings;
+import net.minecraft.world.level.WorldDataConfiguration;
+import net.minecraft.world.level.dimension.end.EndDragonFight;
+import net.minecraft.world.level.levelgen.NewWorldOptions;
+import net.minecraft.world.level.levelgen.WorldOptions;
+
+public interface NewWorldData extends WorldData {
+    int ANVIL_VERSION_ID = 19133;
+    int MCREGION_VERSION_ID = 19132;
+
+    WorldDataConfiguration getDataConfiguration();
+
+    void setDataConfiguration(WorldDataConfiguration dataConfiguration);
+
+    boolean wasModded();
+
+    Set<String> getKnownServerBrands();
+
+    Set<String> getRemovedFeatureFlags();
+
+    void setModdedInfo(String brand, boolean modded);
+
+    default void fillCrashReportCategory(CrashReportCategory section) {
+        section.setDetail("Known server brands", () -> {
+            return String.join(", ", this.getKnownServerBrands());
+        });
+        section.setDetail("Removed feature flags", () -> {
+            return String.join(", ", this.getRemovedFeatureFlags());
+        });
+        section.setDetail("Level was modded", () -> {
+            return Boolean.toString(this.wasModded());
+        });
+        section.setDetail("Level storage version", () -> {
+            int i = this.getVersion();
+            return String.format(Locale.ROOT, "0x%05X - %s", i, this.getStorageVersionName(i));
+        });
+    }
+
+    default String getStorageVersionName(int id) {
+        switch (id) {
+            case 19132:
+                return "McRegion";
+            case 19133:
+                return "Anvil";
+            default:
+                return "Unknown?";
+        }
+    }
+
+    @Nullable
+    CompoundTag getCustomBossEvents();
+
+    void setCustomBossEvents(@Nullable CompoundTag customBossEvents);
+
+    ServerLevelData overworldData();
+
+    LevelSettings getLevelSettings();
+
+    CompoundTag createTag(RegistryAccess registryManager, @Nullable CompoundTag playerNbt);
+
+    boolean isHardcore();
+
+    int getVersion();
+
+    String getLevelName();
+
+    GameType getGameType();
+
+    void setGameType(GameType gameMode);
+
+    boolean getAllowCommands();
+
+    Difficulty getDifficulty();
+
+    void setDifficulty(Difficulty difficulty);
+
+    boolean isDifficultyLocked();
+
+    void setDifficultyLocked(boolean difficultyLocked);
+
+    GameRules getGameRules();
+
+    @Nullable
+    CompoundTag getLoadedPlayerTag();
+
+    EndDragonFight.Data endDragonFightData();
+
+    void setEndDragonFightData(EndDragonFight.Data dragonFight);
+
+    NewWorldOptions worldGenOptions();
+
+    boolean isFlatWorld();
+
+    boolean isDebugWorld();
+
+    Lifecycle worldGenSettingsLifecycle();
+
+    default FeatureFlagSet enabledFeatures() {
+        return this.getDataConfiguration().enabledFeatures();
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index 31c31a9138cb5f6e41de01a6210f84e72fd7dc58..113989246083617277ac38648c4ba1438964cd2a 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -37,6 +37,7 @@ import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
+import net.minecraft.world.level.levelgen.NewWorldOptions;
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.timers.TimerCallbacks;
 import net.minecraft.world.level.timers.TimerQueue;
@@ -62,7 +63,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
     protected static final String PLAYER = "Player";
     protected static final String WORLD_GEN_SETTINGS = "WorldGenSettings";
     public LevelSettings settings;
-    private final WorldOptions worldOptions;
+    private final NewWorldOptions worldOptions;
     private final PrimaryLevelData.SpecialWorldProperty specialWorldProperty;
     private final Lifecycle worldGenSettingsLifecycle;
     private int xSpawn;
@@ -112,7 +113,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
     }
     // CraftBukkit end
 
-    private PrimaryLevelData(@Nullable DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, boolean modded, int spawnX, int spawnY, int spawnZ, float spawnAngle, long time, long timeOfDay, int version, int clearWeatherTime, int rainTime, boolean raining, int thunderTime, boolean thundering, boolean initialized, boolean difficultyLocked, WorldBorder.Settings worldBorder, int wanderingTraderSpawnDelay, int wanderingTraderSpawnChance, @Nullable UUID wanderingTraderId, Set<String> serverBrands, Set<String> removedFeatures, TimerQueue<MinecraftServer> scheduledEvents, @Nullable CompoundTag customBossEvents, EndDragonFight.Data dragonFight, LevelSettings levelInfo, WorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty specialProperty, Lifecycle lifecycle) {
+    private PrimaryLevelData(@Nullable DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, boolean modded, int spawnX, int spawnY, int spawnZ, float spawnAngle, long time, long timeOfDay, int version, int clearWeatherTime, int rainTime, boolean raining, int thunderTime, boolean thundering, boolean initialized, boolean difficultyLocked, WorldBorder.Settings worldBorder, int wanderingTraderSpawnDelay, int wanderingTraderSpawnChance, @Nullable UUID wanderingTraderId, Set<String> serverBrands, Set<String> removedFeatures, TimerQueue<MinecraftServer> scheduledEvents, @Nullable CompoundTag customBossEvents, EndDragonFight.Data dragonFight, LevelSettings levelInfo, NewWorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty specialProperty, Lifecycle lifecycle) {
         this.fixerUpper = dataFixer;
         this.wasModded = modded;
         this.xSpawn = spawnX;
@@ -146,11 +147,11 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
         this.worldGenSettingsLifecycle = lifecycle;
     }
 
-    public PrimaryLevelData(LevelSettings levelInfo, WorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty specialProperty, Lifecycle lifecycle) {
+    public PrimaryLevelData(LevelSettings levelInfo, NewWorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty specialProperty, Lifecycle lifecycle) {
         this((DataFixer) null, SharedConstants.getCurrentVersion().getDataVersion().getVersion(), (CompoundTag) null, false, 0, 0, 0, 0.0F, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, (UUID) null, Sets.newLinkedHashSet(), new HashSet(), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS), (CompoundTag) null, EndDragonFight.Data.DEFAULT, levelInfo.copy(), generatorOptions, specialProperty, lifecycle);
     }
 
-    public static <T> PrimaryLevelData parse(Dynamic<T> dynamic, DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, LevelSettings levelInfo, LevelVersion saveVersionInfo, PrimaryLevelData.SpecialWorldProperty specialProperty, WorldOptions generatorOptions, Lifecycle lifecycle) {
+    public static <T> PrimaryLevelData parse(Dynamic<T> dynamic, DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, LevelSettings levelInfo, LevelVersion saveVersionInfo, PrimaryLevelData.SpecialWorldProperty specialProperty, NewWorldOptions generatorOptions, Lifecycle lifecycle) {
         long j = dynamic.get("Time").asLong(0L);
         boolean flag = dynamic.get("WasModded").asBoolean(false);
         int k = dynamic.get("SpawnX").asInt(0);
@@ -549,7 +550,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
     }
 
     @Override
-    public WorldOptions worldGenOptions() {
+    public NewWorldOptions worldGenOptions() {
         return this.worldOptions;
     }
 
