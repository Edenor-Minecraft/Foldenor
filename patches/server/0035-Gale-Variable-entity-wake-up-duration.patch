From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Thu, 4 Jan 2024 15:58:12 +0400
Subject: [PATCH] Gale-Variable-entity-wake-up-duration


diff --git a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
index 5aea39f46bdc4d61c817b37b61f2ff9ab1cb349f..3a531564559bbd333b7bb56b9896c34056576a94 100644
--- a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
+++ b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
@@ -33,6 +33,7 @@ public class FoldenorConfig {
     public static int maxProjectileLoadsPerProjectile = 10;
 
     public static int maxProjectileLoadsPerTick = 10;
+    public static double entityWakeUpDurationRatioStandardDeviation = 0.2;
 
     public static int acquirePoiForStuckEntityInterval = 60;
     public static boolean enableSuffocationOptimization = true;
@@ -128,6 +129,7 @@ public class FoldenorConfig {
         maxProjectileLoadsPerTick = getInt("optimizations.max_projectile_loads_per_tick",maxProjectileLoadsPerTick);
         acquirePoiForStuckEntityInterval = getInt("optimizations.acquire_poi_for_stuck_entity_interval", acquirePoiForStuckEntityInterval);
         enableSuffocationOptimization = getBoolean("optimizations.optimize_suffocation_check",enableSuffocationOptimization);
+        entityWakeUpDurationRatioStandardDeviation = getDouble("optimizations.entity_wakeup_duration_ratio_standard_deviation",entityWakeUpDurationRatioStandardDeviation);
     }
 
     private static void networkSettings() {
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 09ac38a803ade3e757204a62d3e696562462b9aa..6c3170dfcdfaeafec6917262fbe65195c0570427 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -1,5 +1,6 @@
 package org.spigotmc;
 
+import net.edenor.foldenor.config.FoldenorConfig;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerChunkCache;
@@ -71,28 +72,38 @@ public class ActivationRange
         if (entity.activationType == ActivationType.VILLAGER) {
             if (inactiveFor > config.wakeUpInactiveVillagersEvery && worldData.wakeupInactiveRemainingVillagers > 0) { // Folia - threaded regions
                 worldData.wakeupInactiveRemainingVillagers--; // Folia - threaded regions
-                return config.wakeUpInactiveVillagersFor;
+                return getWakeUpDurationWithVariance(entity, config.wakeUpInactiveVillagersFor);
             }
         } else if (entity.activationType == ActivationType.ANIMAL) {
             if (inactiveFor > config.wakeUpInactiveAnimalsEvery && worldData.wakeupInactiveRemainingAnimals > 0) { // Folia - threaded regions
                 worldData.wakeupInactiveRemainingAnimals--; // Folia - threaded regions
-                return config.wakeUpInactiveAnimalsFor;
+                return getWakeUpDurationWithVariance(entity, config.wakeUpInactiveAnimalsFor);
             }
         } else if (entity.activationType == ActivationType.FLYING_MONSTER) {
             if (inactiveFor > config.wakeUpInactiveFlyingEvery && worldData.wakeupInactiveRemainingFlying > 0) { // Folia - threaded regions
                 worldData.wakeupInactiveRemainingFlying--; // Folia - threaded regions
-                return config.wakeUpInactiveFlyingFor;
+                return getWakeUpDurationWithVariance(entity, config.wakeUpInactiveFlyingFor);
             }
         } else if (entity.activationType == ActivationType.MONSTER || entity.activationType == ActivationType.RAIDER) {
             if (inactiveFor > config.wakeUpInactiveMonstersEvery && worldData.wakeupInactiveRemainingMonsters > 0) { // Folia - threaded regions
                 worldData.wakeupInactiveRemainingMonsters--; // Folia - threaded regions
-                return config.wakeUpInactiveMonstersFor;
+                return getWakeUpDurationWithVariance(entity, config.wakeUpInactiveMonstersFor);
             }
         }
         return -1;
     }
     // Paper end
 
+    private static final java.util.Random wakeUpDurationRandom = new java.util.Random();
+
+    private static int getWakeUpDurationWithVariance(Entity entity, int wakeUpDuration) {
+        double deviation = FoldenorConfig.entityWakeUpDurationRatioStandardDeviation;
+        if (deviation <= 0) {
+            return wakeUpDuration;
+        }
+        return (int) Math.min(Integer.MAX_VALUE, Math.max(1, Math.round(wakeUpDuration * wakeUpDurationRandom.nextGaussian(1, deviation))));
+    }
+
     static AABB maxBB = new AABB( 0, 0, 0, 0, 0, 0 );
 
     /**
