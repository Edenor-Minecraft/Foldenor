From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Thu, 13 Jul 2023 14:53:21 +0400
Subject: [PATCH] addEntity-in-region-thread


diff --git a/src/main/java/dev/rgbmc/folia/CachedRegionData.java b/src/main/java/dev/rgbmc/folia/CachedRegionData.java
new file mode 100644
index 0000000000000000000000000000000000000000..3d8431243d64e490d5c7c54a4a98a3e94fea58b3
--- /dev/null
+++ b/src/main/java/dev/rgbmc/folia/CachedRegionData.java
@@ -0,0 +1,39 @@
+package dev.rgbmc.folia;
+
+import io.papermc.paper.threadedregions.RegionizedWorldData;
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
+import io.papermc.paper.threadedregions.TickRegions;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class CachedRegionData {
+    private static final Map<Long, ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>> cachedData = new HashMap<>();
+    private static final Map<String, ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>> worldCachedData = new HashMap<>();
+
+    public static void update(long id, ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> data) {
+        cachedData.put(id, data);
+    }
+
+    public static void updateWorld(String world, ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> data) {
+        worldCachedData.put(world, data);
+    }
+
+    public static boolean isCached(long id) {
+        return cachedData.containsKey(id);
+    }
+
+    public static boolean isCachedWorld(String world) {
+        return worldCachedData.containsKey(world);
+    }
+
+    public static ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> get(long id) {
+        return cachedData.get(id);
+    }
+
+    public static ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> getWorld(String world) {
+        return worldCachedData.get(world);
+    }
+
+
+}
diff --git a/src/main/java/dev/rgbmc/folia/CachedWorldData.java b/src/main/java/dev/rgbmc/folia/CachedWorldData.java
new file mode 100644
index 0000000000000000000000000000000000000000..85515235d59669db0dc189438af85759c3f3b81e
--- /dev/null
+++ b/src/main/java/dev/rgbmc/folia/CachedWorldData.java
@@ -0,0 +1,19 @@
+package dev.rgbmc.folia;
+
+import io.papermc.paper.threadedregions.RegionizedWorldData;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+
+public class CachedWorldData {
+    private static final Map<String, RegionizedWorldData> cachedData = new HashMap<>();
+
+    public static void update(String world, RegionizedWorldData data) {
+        cachedData.put(world, data);
+    }
+
+    public static RegionizedWorldData get(String world) {
+        return cachedData.get(world);
+    }
+}
diff --git a/src/main/java/dev/rgbmc/folia/FakePlugin.java b/src/main/java/dev/rgbmc/folia/FakePlugin.java
new file mode 100644
index 0000000000000000000000000000000000000000..f245258c456f44543752d8fbb01b371587f36046
--- /dev/null
+++ b/src/main/java/dev/rgbmc/folia/FakePlugin.java
@@ -0,0 +1,182 @@
+package dev.rgbmc.folia;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.event.Event;
+import org.bukkit.event.Listener;
+import org.bukkit.generator.BiomeProvider;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.plugin.*;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.io.InputStream;
+import java.util.*;
+import java.util.logging.Logger;
+import java.util.regex.Pattern;
+
+public class FakePlugin implements Plugin {
+    @Override
+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {
+        return false;
+    }
+
+    @Override
+    public @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {
+        return new ArrayList<>();
+    }
+
+    @Override
+    public @NotNull File getDataFolder() {
+        return new File(System.getProperty("user.dir"));
+    }
+
+    @Override
+    public @NotNull PluginDescriptionFile getDescription() {
+        return new PluginDescriptionFile("Folia",
+            "Folia",new ArrayList<>(),
+            "folia.folia.Folia", "",
+            new ArrayList<>(), new ArrayList<>(),
+            new ArrayList<>(), "1.0.0",
+            new HashMap<>(), "Folia Fake Plugin",
+            List.of("PaperMC"), new ArrayList<>(),
+            "https://papermc.io", "Folia",
+            PluginLoadOrder.STARTUP, new ArrayList<>(),
+            PermissionDefault.FALSE, new HashSet<>(),
+            "1.19.4", new ArrayList<>());
+    }
+
+    @NotNull
+    @Override
+    public PluginMeta getPluginMeta() {
+        return getDescription();
+    }
+
+    @Override
+    public @NotNull FileConfiguration getConfig() {
+        return null;
+    }
+
+    @Override
+    public @Nullable InputStream getResource(@NotNull String filename) {
+        return null;
+    }
+
+    @Override
+    public void saveConfig() {
+
+    }
+
+    @Override
+    public void saveDefaultConfig() {
+
+    }
+
+    @Override
+    public void saveResource(@NotNull String resourcePath, boolean replace) {
+
+    }
+
+    @Override
+    public void reloadConfig() {
+
+    }
+
+    @Override
+    public @NotNull PluginLoader getPluginLoader() {
+        Plugin fakePlugin = this;
+        return new PluginLoader() {
+            @Override
+            public @NotNull Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException {
+                return fakePlugin;
+            }
+
+            @Override
+            public @NotNull PluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidDescriptionException {
+                return getDescription();
+            }
+
+            @Override
+            public @NotNull Pattern[] getPluginFileFilters() {
+                return new Pattern[0];
+            }
+
+            @Override
+            public @NotNull Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull Plugin plugin) {
+                return new HashMap<>();
+            }
+
+            @Override
+            public void enablePlugin(@NotNull Plugin plugin) {
+
+            }
+
+            @Override
+            public void disablePlugin(@NotNull Plugin plugin) {
+
+            }
+        };
+    }
+
+    @Override
+    public @NotNull Server getServer() {
+        return Bukkit.getServer();
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+
+    @Override
+    public void onDisable() {
+
+    }
+
+    @Override
+    public void onLoad() {
+
+    }
+
+    @Override
+    public void onEnable() {
+
+    }
+
+    @Override
+    public boolean isNaggable() {
+        return false;
+    }
+
+    @Override
+    public void setNaggable(boolean canNag) {
+
+    }
+
+    @Override
+    public @Nullable ChunkGenerator getDefaultWorldGenerator(@NotNull String worldName, @Nullable String id) {
+        return MinecraftServer.getServer().server.getGenerator(worldName);
+    }
+
+    @Override
+    public @Nullable BiomeProvider getDefaultBiomeProvider(@NotNull String worldName, @Nullable String id) {
+        return MinecraftServer.getServer().server.getBiomeProvider(worldName);
+    }
+
+    @Override
+    public @NotNull Logger getLogger() {
+        return Bukkit.getLogger();
+    }
+
+    @Override
+    public @NotNull String getName() {
+        return "Folia";
+    }
+}
diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 0cdf092d5c3f65a23e26f201768c0e2fea1ffe09..27161fc8ec25be3541a431c06a8fd630460f0901 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -2,6 +2,7 @@ package io.papermc.paper.chunk.system.entity;
 
 import com.destroystokyo.paper.util.maplist.EntityList;
 import com.mojang.logging.LogUtils;
+import dev.rgbmc.folia.FakePlugin;
 import io.papermc.paper.util.CoordinateUtils;
 import io.papermc.paper.util.TickThread;
 import io.papermc.paper.util.WorldUtil;
@@ -26,6 +27,9 @@ import net.minecraft.world.level.entity.LevelEntityGetter;
 import net.minecraft.world.level.entity.Visibility;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.CraftServer;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
@@ -435,7 +439,13 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
 
         entity.setLevelCallback(new EntityCallback(entity));
 
-        this.world.getCurrentWorldData().addEntity(entity); // Folia - region threading
+        if (TickThread.isTickThreadFor(this.world, entity.chunkPosition())) {
+            this.world.getCurrentWorldData().addEntity(entity); // Folia - region threading
+        } else {
+            this.world.getServer().server.getRegionScheduler().run(new FakePlugin(), this.world.getWorld(), entity.chunkPosition().x, entity.chunkPosition().z, stask -> {
+                this.world.getCurrentWorldData().addEntity(entity); // Folia - region threading
+            });
+        }
 
         this.entityStatusChange(entity, slices, Visibility.HIDDEN, getEntityStatus(entity), false, !fromDisk, false);
 
