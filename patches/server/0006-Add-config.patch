From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Sat, 16 Sep 2023 21:20:41 +0400
Subject: [PATCH] Add-config


diff --git a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..b4c760a05e204a7a355f37c31ef2929d56bc2388
--- /dev/null
+++ b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
@@ -0,0 +1,186 @@
+package net.edenor.foldenor.config;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+public class FoldenorConfig {
+    protected static final String HEADER = "This is the main configuration file for Foldenor.";
+    protected static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    public static int version;
+    static boolean verbose;
+
+    public static boolean alternateKeepAlive = false;
+
+    public static boolean sendNullEntityPackets = true;
+
+    public static boolean vanilaEndPortalTeleportation = false;
+
+    public static int maxProjectileLoadsPerProjectile = 10;
+
+    public static int maxProjectileLoadsPerTick = 10;
+
+    public static void init(File configFile) {
+        init(configFile, true);
+    }
+
+    public static void reload(File configFile) {
+        init(configFile, false);
+    }
+
+    private static void init(File configFile, boolean setup) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        if (configFile.exists()) {
+            try {
+                config.load(CONFIG_FILE);
+            } catch (InvalidConfigurationException ex){
+                Bukkit.getLogger().log(Level.SEVERE, "Could not load foldenor.yml, please correct your syntax errors", ex);
+                throw Throwables.propagate(ex);
+            } catch (IOException ignore) {}
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig();
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    static void readConfig() {
+        networkSettings();
+
+        optimizationSettings();
+
+        otherSettings();
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void otherSettings() {
+        vanilaEndPortalTeleportation = getBoolean("other.vanila-end-portal-teleportation", vanilaEndPortalTeleportation);
+    }
+
+    private static void optimizationSettings() {
+        maxProjectileLoadsPerProjectile = getInt("optimizations.max_projectile_loads_per_projectile",maxProjectileLoadsPerProjectile);
+        maxProjectileLoadsPerTick = getInt("optimizations.max_projectile_loads_per_tick",maxProjectileLoadsPerTick);
+    }
+
+    private static void networkSettings() {
+        alternateKeepAlive = getBoolean("network.alternate-keepalive", alternateKeepAlive);
+        sendNullEntityPackets = getBoolean("network.send-null-entity-packets", sendNullEntityPackets);
+    }
+
+    protected static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    protected static String getString(String path, String def, String... comment) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    protected static boolean getBoolean(String path, boolean def, String... comment) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    protected static double getDouble(String path, double def, String... comment) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    protected static int getInt(String path, int def, String... comment) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    protected static <T> List getList(String path, T def, String... comment) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def, String... comment) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    protected static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    protected static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    protected static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    protected static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    protected static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    protected static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index c5dfd99a38a79fd19a2bf85fa297a28e40612b51..2935496c2dbf704f40befe54cb9cd020fb173fe4 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -19,6 +19,8 @@ import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
+
+import net.edenor.foldenor.config.FoldenorConfig;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
@@ -218,6 +220,12 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         thread.start(); // Paper - start console thread after MinecraftServer.console & PaperConfig are initialized
         io.papermc.paper.command.PaperCommands.registerCommands(this);
         com.destroystokyo.paper.Metrics.PaperMetrics.startMetrics();
+        try {
+            FoldenorConfig.init((java.io.File) options.valueOf("foldenor-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 2001b26c058bea99df5df9cea568e725908184a5..503b3787d39717a9e3022da8e4edf597c9bc594c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -45,6 +45,7 @@ import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 
+import net.edenor.foldenor.config.FoldenorConfig;
 import net.edenor.foldenor.secureseed.Globals;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.commands.CommandSourceStack;
@@ -323,6 +324,10 @@ public final class CraftServer implements Server {
         return this.asyncScheduler;
     }
 
+    public YamlConfiguration getFoldenorConfig() {
+        return FoldenorConfig.config;
+    }
+
     @Override
     public final io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler getGlobalRegionScheduler() {
         return this.globalRegionScheduler;
@@ -1100,6 +1105,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
+        net.edenor.foldenor.config.FoldenorConfig.init((File) console.options.valueOf("foldenor-settings"));
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 776b7fc26fe96b69be260bbd36efae147d988640..d3fb1f8dd047ae44cd17794d2be945a2b484d3fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -173,6 +173,12 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                acceptsAll(asList("foldenor", "foldenor-settings"), "File for foldenor settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File("foldenor.yml"))
+                    .describedAs("Yml file");
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
