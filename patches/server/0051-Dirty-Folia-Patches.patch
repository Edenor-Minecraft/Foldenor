From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Sun, 16 Jul 2023 00:19:45 +0400
Subject: [PATCH] Dirty-Folia-Patches


diff --git a/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
index fad9b1abe3a48b60c464a096b406f0714dac0101..583a29f6671860a177aa75004a6434bd25357409 100644
--- a/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
@@ -124,7 +124,7 @@ public class RegionizedPlayerChunkLoader {
     }
 
     public void addPlayer(final ServerPlayer player) {
-        TickThread.ensureTickThread(player, "Cannot add player to player chunk loader async");
+        //TickThread.ensureTickThread(player, "Cannot add player to player chunk loader async");
         if (!player.isRealPlayer) {
             return;
         }
@@ -147,7 +147,7 @@ public class RegionizedPlayerChunkLoader {
     }
 
     public void removePlayer(final ServerPlayer player) {
-        TickThread.ensureTickThread(player, "Cannot remove player from player chunk loader async");
+        //TickThread.ensureTickThread(player, "Cannot remove player from player chunk loader async");
         if (!player.isRealPlayer) {
             return;
         }
@@ -232,7 +232,7 @@ public class RegionizedPlayerChunkLoader {
     }
 
     public void tick() {
-        TickThread.ensureTickThread("Cannot tick player chunk loader async");
+        //TickThread.ensureTickThread("Cannot tick player chunk loader async");
         long currTime = System.nanoTime();
         for (final ServerPlayer player : new java.util.ArrayList<>(this.world.getLocalPlayers())) { // Folia - region threding
             final PlayerChunkLoaderData loader = player.chunkLoader;
@@ -676,7 +676,7 @@ public class RegionizedPlayerChunkLoader {
         }
 
         void updateQueues(final long time) {
-            TickThread.ensureTickThread(this.player, "Cannot tick player chunk loader async");
+            //TickThread.ensureTickThread(this.player, "Cannot tick player chunk loader async");
             if (this.removed) {
                 throw new IllegalStateException("Ticking removed player chunk loader");
             }
@@ -894,7 +894,7 @@ public class RegionizedPlayerChunkLoader {
         }
 
         void add() {
-            TickThread.ensureTickThread(this.player, "Cannot add player asynchronously");
+            //TickThread.ensureTickThread(this.player, "Cannot add player asynchronously");
             if (this.removed) {
                 throw new IllegalStateException("Adding removed player chunk loader");
             }
@@ -940,7 +940,7 @@ public class RegionizedPlayerChunkLoader {
         }
 
         void update() {
-            TickThread.ensureTickThread(this.player, "Cannot update player asynchronously");
+            //TickThread.ensureTickThread(this.player, "Cannot update player asynchronously");
             if (this.removed) {
                 throw new IllegalStateException("Updating removed player chunk loader");
             }
@@ -1089,7 +1089,7 @@ public class RegionizedPlayerChunkLoader {
         }
 
         void remove() {
-            TickThread.ensureTickThread(this.player, "Cannot add player asynchronously");
+            //TickThread.ensureTickThread(this.player, "Cannot add player asynchronously");
             if (this.removed) {
                 throw new IllegalStateException("Removing removed player chunk loader");
             }
diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 91cf530d5fda44f5d6d7bcd654ca8280c42a3f6a..b67e66d56d62535a272d2fedcbae80f773bb4e45 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -244,7 +244,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
 
     public void entityStatusChange(final Entity entity, final ChunkEntitySlices slices, final Visibility oldVisibility, final Visibility newVisibility, final boolean moved,
                                    final boolean created, final boolean destroyed) {
-        TickThread.ensureTickThread(entity, "Entity status change must only happen on the main thread");
+        //TickThread.ensureTickThread(entity, "Entity status change must only happen on the main thread");
 
         if (entity.updatingSectionStatus) {
             // recursive status update
@@ -393,7 +393,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         final int sectionX = pos.getX() >> 4;
         final int sectionY = Mth.clamp(pos.getY() >> 4, this.minSection, this.maxSection);
         final int sectionZ = pos.getZ() >> 4;
-        TickThread.ensureTickThread(this.world, sectionX, sectionZ, "Cannot add entity off-main thread");
+        //TickThread.ensureTickThread(this.world, sectionX, sectionZ, "Cannot add entity off-main thread");
 
         if (entity.isRemoved()) {
             LOGGER.warn("Refusing to add removed entity: " + entity);
@@ -442,7 +442,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         if (TickThread.isTickThreadFor(this.world, entity.chunkPosition())) {
             this.world.getCurrentWorldData().addEntity(entity); // Folia - region threading
         } else {
-            this.world.getServer().server.getRegionScheduler().run(new FakePlugin(), this.world.getWorld(), entity.chunkPosition().x, entity.chunkPosition().z, stask -> {
+            Bukkit.getRegionScheduler().run(new FakePlugin(), this.world.getWorld(), entity.chunkPosition().x, entity.chunkPosition().z, stask -> {
                 this.world.getCurrentWorldData().addEntity(entity); // Folia - region threading
             });
         }
@@ -469,7 +469,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         final int sectionX = entity.sectionX;
         final int sectionY = entity.sectionY;
         final int sectionZ = entity.sectionZ;
-        TickThread.ensureTickThread(this.world, sectionX, sectionZ, "Cannot remove entity off-main");
+        //TickThread.ensureTickThread(this.world, sectionX, sectionZ, "Cannot remove entity off-main");
         if (!entity.isRemoved()) {
             throw new IllegalStateException("Only call Entity#setRemoved to remove an entity");
         }
@@ -500,7 +500,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
 
     private ChunkEntitySlices moveEntity(final Entity entity) {
         // ensure we own the entity
-        TickThread.ensureTickThread(entity, "Cannot move entity off-main");
+        //TickThread.ensureTickThread(entity, "Cannot move entity off-main");
 
         final BlockPos newPos = entity.blockPosition();
         final int newSectionX = newPos.getX() >> 4;
@@ -512,10 +512,10 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
 
         // ensure the new section is owned by this tick thread
-        TickThread.ensureTickThread(this.world, newSectionX, newSectionZ, "Cannot move entity off-main");
+        //TickThread.ensureTickThread(this.world, newSectionX, newSectionZ, "Cannot move entity off-main");
 
         // ensure the old section is owned by this tick thread
-        TickThread.ensureTickThread(this.world, entity.sectionX, entity.sectionZ, "Cannot move entity off-main");
+        //TickThread.ensureTickThread(this.world, entity.sectionX, entity.sectionZ, "Cannot move entity off-main");
 
         final ChunkEntitySlices old = this.getChunk(entity.sectionX, entity.sectionZ);
         final ChunkEntitySlices slices = this.getOrCreateChunk(newSectionX, newSectionZ);
@@ -733,7 +733,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     }
 
     public void entitySectionLoad(final int chunkX, final int chunkZ, final ChunkEntitySlices slices) {
-        TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot load in entity section off-main");
+        //TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot load in entity section off-main");
         synchronized (this) {
             final ChunkEntitySlices curr = this.getChunk(chunkX, chunkZ);
             if (curr != null) {
@@ -749,7 +749,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     }
 
     public void entitySectionUnload(final int chunkX, final int chunkZ) {
-        TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot unload entity section off-main");
+        //TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot unload entity section off-main");
         this.removeChunk(chunkX, chunkZ);
     }
 
@@ -891,7 +891,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         @Override
         public void onRemove(final Entity.RemovalReason reason) {
             final Entity entity = this.entity;
-            TickThread.ensureTickThread(entity, "Cannot remove entity off-main"); // Paper - rewrite chunk system
+            //TickThread.ensureTickThread(entity, "Cannot remove entity off-main"); // Paper - rewrite chunk system
             final Visibility tickingState = EntityLookup.getEntityStatus(entity);
 
             EntityLookup.this.removeEntity(entity);
diff --git a/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java b/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
index d72041aa814ff179e6e29a45dcd359a91d426d47..47dc96a9971798a4dc1f2e88ec2860f930ed48b7 100644
--- a/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
+++ b/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
@@ -50,7 +50,7 @@ public final class PoiChunk {
     }
 
     public void load() {
-        TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Loading in poi chunk off-main");
+        //TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Loading in poi chunk off-main");
         if (this.loaded) {
             return;
         }
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
index 40411b335e99f67d6a82e70db6e5e4c0372102ec..25cd45dd9072027321deca3e96211dda4dce38ca 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
@@ -244,7 +244,7 @@ public final class ChunkHolderManager {
     }
     public void close(final boolean save, final boolean halt, final boolean first, final boolean last, final boolean checkRegions) {
         // Folia end - region threading
-        TickThread.ensureTickThread("Closing world off-main");
+        //TickThread.ensureTickThread("Closing world off-main");
         if (first && halt) { // Folia - region threading
             LOGGER.info("Waiting 60s for chunk system to halt for world '" + this.world.getWorld().getName() + "'");
             if (!this.taskScheduler.halt(true, TimeUnit.SECONDS.toNanos(60L))) {
@@ -902,6 +902,11 @@ public final class ChunkHolderManager {
             }
         }
 
+        if (region.getData().world.serverLevelData.getLevelName().equalsIgnoreCase("world")) {
+            MinecraftServer.currentTick = (int) region.getData().getCurrentTick();
+            MinecraftServer.currentTickLong = region.getData().getCurrentTick();
+        }
+
         this.processTicketUpdates();
     }
 
@@ -980,7 +985,7 @@ public final class ChunkHolderManager {
     private final AtomicLong entityLoadCounter = new AtomicLong();
 
     public ChunkEntitySlices getOrCreateEntityChunk(final int chunkX, final int chunkZ, final boolean transientChunk) {
-        TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot create entity chunk off-main");
+        //TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot create entity chunk off-main");
         ChunkEntitySlices ret;
 
         NewChunkHolder current = this.getChunkHolder(chunkX, chunkZ);
@@ -1067,7 +1072,7 @@ public final class ChunkHolderManager {
     private final AtomicLong poiLoadCounter = new AtomicLong();
 
     public PoiChunk loadPoiChunk(final int chunkX, final int chunkZ) {
-        TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot create poi chunk off-main");
+        //TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot create poi chunk off-main");
         PoiChunk ret;
 
         NewChunkHolder current = this.getChunkHolder(chunkX, chunkZ);
@@ -1207,7 +1212,7 @@ public final class ChunkHolderManager {
 
     // note: never call while inside the chunk system, this will absolutely break everything
     public void processUnloads() {
-        TickThread.ensureTickThread("Cannot unload chunks off-main");
+        //TickThread.ensureTickThread("Cannot unload chunks off-main");
 
         if (BLOCK_TICKET_UPDATES.get() == Boolean.TRUE) {
             throw new IllegalStateException("Cannot unload chunks recursively");
@@ -1482,7 +1487,7 @@ public final class ChunkHolderManager {
     }
 
     private boolean processTicketUpdates(final boolean checkLocks, final boolean processFullUpdates, List<ChunkProgressionTask> scheduledTasks) {
-        TickThread.ensureTickThread("Cannot process ticket levels off-main");
+        //TickThread.ensureTickThread("Cannot process ticket levels off-main");
         if (BLOCK_TICKET_UPDATES.get() == Boolean.TRUE) {
             throw new IllegalStateException("Cannot update ticket level while unloading chunks or updating entity manager");
         }
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index 23018da22eac29931a65129d928fc00f9c24fd67..0d513f5f98fda785790ff58d2bbffd596940886c 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -77,7 +77,7 @@ public final class NewChunkHolder {
     private CompoundTag pendingEntityChunk;
 
     ChunkEntitySlices loadInEntityChunk(final boolean transientChunk) {
-        TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot sync load entity data off-main");
+        //TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot sync load entity data off-main");
         final CompoundTag entityChunk;
         final ChunkEntitySlices ret;
         final ReentrantAreaLock.Node schedulingLock = this.scheduler.schedulingLockArea.lock(this.chunkX, this.chunkZ);
@@ -1271,7 +1271,7 @@ public final class NewChunkHolder {
 
     // only to be called on the main thread, no locks need to be held
     public boolean handleFullStatusChange(final List<NewChunkHolder> changedFullStatus) {
-        TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot update full status thread off-main");
+        //TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot update full status thread off-main");
 
         boolean ret = false;
 
@@ -1753,7 +1753,7 @@ public final class NewChunkHolder {
     public static final record SaveStat(boolean savedChunk, boolean savedEntityChunk, boolean savedPoiChunk) {}
 
     public SaveStat save(final boolean shutdown, final boolean unloading) {
-        TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot save data off-main");
+        //TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot save data off-main");
         ChunkAccess chunk = this.getCurrentChunk();
         PoiChunk poi = this.getPoiChunk();
         ChunkEntitySlices entities = this.getEntityChunk();
diff --git a/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java b/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
index 519da6886613b8460e989767b1a21e3126cb1894..3633d88f6212535e516b218738a5a27621b83225 100644
--- a/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
+++ b/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
@@ -20,7 +20,7 @@ public class PaperSchoolableFish extends CraftFish implements SchoolableFish {
 
     @Override
     public AbstractSchoolingFish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractSchoolingFish) super.getHandle();
     }
 
diff --git a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
index 62484ebf4550b05182f693a3180bbac5d5fd906d..ee491389207b82a9b16954e774dbdf219b0ab40f 100644
--- a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
@@ -140,7 +140,7 @@ public final class EntityScheduler {
     public void executeTick() {
         final Entity thisEntity = this.entity.getHandleRaw();
 
-        TickThread.ensureTickThread(thisEntity, "May not tick entity scheduler asynchronously");
+        //TickThread.ensureTickThread(thisEntity, "May not tick entity scheduler asynchronously");
         final List<ScheduledTask> toRun;
         synchronized (this.stateLock) {
             if (this.tickCount == RETIRED_TICK_COUNT) {
diff --git a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
index 00d79c8095ec689b4a30648665c8fc0843783fd9..cb0e0c4bbd2ef98accb851ee19fc2f6c57786228 100644
--- a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
+++ b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
@@ -81,6 +81,10 @@ public final class RegionizedServer {
         TickRegions.getScheduler().setHasTasks(this.tickHandle);
     }
 
+    public List<Connection> getConnections() {
+        return this.connections;
+    }
+
     /**
      * Returns the current tick of the region ticking.
      * @throws IllegalStateException If there is no current region.
diff --git a/src/main/java/io/papermc/paper/threadedregions/RegionizedWorldData.java b/src/main/java/io/papermc/paper/threadedregions/RegionizedWorldData.java
index 3af0035463a7dd0d4abf10430bb8e3005b4b724d..2976729d552940fdea63b342b3ee5130e27b8e5e 100644
--- a/src/main/java/io/papermc/paper/threadedregions/RegionizedWorldData.java
+++ b/src/main/java/io/papermc/paper/threadedregions/RegionizedWorldData.java
@@ -617,7 +617,7 @@ public final class RegionizedWorldData {
     // Note that we can only ever not own the event data when the chunk unloads, and so I've decided to
     // make the code easier by simply discarding it in such an event
     public void pushBlockEvent(final BlockEventData blockEventData) {
-        TickThread.ensureTickThread(this.world, blockEventData.pos(), "Cannot queue block even data async");
+        //TickThread.ensureTickThread(this.world, blockEventData.pos(), "Cannot queue block even data async");
         this.blockEvents.add(blockEventData);
     }
 
@@ -658,7 +658,7 @@ public final class RegionizedWorldData {
 
     // tile entity ticking
     public void addBlockEntityTicker(final TickingBlockEntity ticker) {
-        TickThread.ensureTickThread(this.world, ticker.getPos(), "Tile entity must be owned by current region");
+        //TickThread.ensureTickThread(this.world, ticker.getPos(), "Tile entity must be owned by current region");
 
         (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker);
     }
diff --git a/src/main/java/io/papermc/paper/util/MCUtil.java b/src/main/java/io/papermc/paper/util/MCUtil.java
index 38441121cf7cdc1d64ef9fc17ae76dc16fbf96f2..439a60b86e82e619eb19e27a95a85536c3978ee1 100644
--- a/src/main/java/io/papermc/paper/util/MCUtil.java
+++ b/src/main/java/io/papermc/paper/util/MCUtil.java
@@ -333,14 +333,14 @@ public final class MCUtil {
      * @return
      */
     public static void ensureMain(String reason, Runnable run) {
-        if (!isMainThread()) {
+        /*if (!isMainThread()) {
             if (true) throw new UnsupportedOperationException(); // Folia - region threading
             if (reason != null) {
                 MinecraftServer.LOGGER.warn("Asynchronous " + reason + "!", new IllegalStateException());
             }
             getProcessQueue().add(run);
             return;
-        }
+        }*/
         run.run();
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5f7bae9a8f926c6299586ed38abcd52cda275ef0..b8843d127554bca971eea97a426fb0cdcf12c76f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -16,6 +16,7 @@ import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
 import dev.rgbmc.folia.CachedWorldData;
 import dev.rgbmc.folia.FakePlugin;
+import io.papermc.paper.threadedregions.RegionizedServer;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import java.awt.image.BufferedImage;
@@ -283,7 +284,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public org.bukkit.command.ConsoleCommandSender console;
     public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
     //public ConsoleReader reader; // Paper
-    //public static int currentTick = 0; // Paper - Further improve tick loop // Folia - region threading
+    public static int currentTick = 0; // Paper - Further improve tick loop // Folia - region threading
     public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
     public int autosavePeriod;
     public Commands vanillaCommandDispatcher;
@@ -296,7 +297,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public final double[] recentTps = new double[ 3 ];
     // Spigot end
     public final io.papermc.paper.configuration.PaperConfigurations paperConfigurations;
-    //public static long currentTickLong = 0L; // Paper // Folia - threaded regions
+    public static long currentTickLong = 0L; // Paper // Folia - threaded regions
 
     public volatile Thread shutdownThread; // Paper
     public volatile boolean abnormalExit = false; // Paper
@@ -1390,7 +1391,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @Override
     public boolean pollTask() {
-        if (true) throw new UnsupportedOperationException(); // Folia - region threading
+        //if (true) throw new UnsupportedOperationException(); // Folia - region threading
         boolean flag = this.pollTaskInternal();
 
         this.mayHaveDelayedTasks = flag;
@@ -1398,7 +1399,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     private boolean pollTaskInternal() {
-        if (true) throw new UnsupportedOperationException(); // Folia - region threading
+        //if (true) throw new UnsupportedOperationException(); // Folia - region threading
         if (super.pollTask()) {
             this.executeMidTickTasks(); // Paper - execute chunk tasks mid tick
             return true;
@@ -1421,7 +1422,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public void doRunTask(TickTask ticktask) { // CraftBukkit - decompile error
-        if (true) throw new UnsupportedOperationException(); // Folia - region threading
+        //if (true) throw new UnsupportedOperationException(); // Folia - region threading
         this.getProfiler().incrementCounter("runTask");
         super.doRunTask(ticktask);
     }
@@ -1475,7 +1476,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                         LOGGER.info("Initialising world '" + region.world.getWorld().getName() + "' before it can be ticked...");
                         this.initWorld(region.world, region.world.serverLevelData, worldData, region.world.serverLevelData.worldGenOptions()); // Folia - delayed until first tick of world
                         region.world.checkInitialised.set(ServerLevel.WORLD_INIT_CHECKED);
-                        CachedWorldData.update(region.world.getWorld().getName(), region.world.getCurrentWorldData());
+                        CachedWorldData.update(region.world.serverLevelData.getLevelName(), region.world.getCurrentWorldData());
                         LOGGER.info("World " + region.world.getWorld().getName() + " data status: " + (CachedWorldData.get(region.world.getWorld().getName()) == null ? "(Unavailable)" : "(Cached)"));
                         LOGGER.info("Initialised world '" + region.world.getWorld().getName() + "'");
                     } // else: must be checked
@@ -1671,7 +1672,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     regionManager.recalculateRegions();
                 }
                 Bukkit.getRegionScheduler().run(new FakePlugin(), worldserver.getWorld(), 0, 0, scheduledTask -> {
-                    CachedWorldData.update(worldserver.getWorld().getName(), worldserver.getCurrentWorldData());
+                    CachedWorldData.update(region.world.serverLevelData.getLevelName(), worldserver.getCurrentWorldData());
                 });
                 // Paper end
                 worldserver.timings.doTick.stopTiming(); // Spigot
@@ -1702,7 +1703,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         MinecraftTimings.connectionTimer.stopTiming(); // Spigot
         this.profiler.popPush("players");
         MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
-        if (false) this.playerList.tick(); // Folia - region threading
+        /*if (false) */this.playerList.tick(); // Folia - region threading
         MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
         if (SharedConstants.IS_RUNNING_IN_IDE) {
             GameTestTicker.SINGLETON.tick();
@@ -2051,7 +2052,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public int getTickCount() {
-        throw new UnsupportedOperationException(); // Folia - region threading
+        //throw new UnsupportedOperationException(); // Folia - region threading
+        return (int) RegionizedServer.getCurrentTick();
     }
 
     public int getSpawnProtectionRadius() {
@@ -2129,7 +2131,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @Override
     public void executeIfPossible(Runnable runnable) {
-        if (true) throw new UnsupportedOperationException(); // Folia - region threading
+        //if (true) throw new UnsupportedOperationException(); // Folia - region threading
         if (this.isStopped()) {
             throw new RejectedExecutionException("Server already shutting down");
         } else {
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 5d5814ee2cc0f2704f26864c8c09ed4a77e10324..f81b39178a24b30b437a64ee02b0be9d74883f7d 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -298,7 +298,7 @@ public class ChunkHolder {
     }
 
     private void addToBroadcastMap() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.chunkMap.level, this.pos, "Cannot update chunk holder asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.chunkMap.level, this.pos, "Cannot update chunk holder asynchronously"); // Folia - region threading
         this.chunkMap.level.needsChangeBroadcasting.add(this); // Folia - region threading
     }
     // Paper end - optimise chunk tick iteration
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 7c8a64a070c5c754c97cc4991fa7b2c4bd36a38e..2b2542eed171eba85d0acd2ab7dc9e451cbdeb37 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -148,7 +148,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     public final StructureTemplateManager structureTemplateManager; // Paper - rewrite chunk system
     private final String storageName;
     //private final PlayerMap playerMap; // Folia - region threading
-    //public final Int2ObjectMap<ChunkMap.TrackedEntity> entityMap; // Folia - region threading
+    public final Int2ObjectMap<ChunkMap.TrackedEntity> entityMap; // Folia - region threading
     private final Long2ByteMap chunkTypeCache;
     private final Long2LongMap chunkSaveCooldowns;
     private final Queue<Runnable> unloadQueue;
@@ -273,7 +273,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         // Paper - rewrite chunk system
         this.tickingGenerated = new AtomicInteger();
         //this.playerMap = new PlayerMap(); // Folia - region threading
-        //this.entityMap = new Int2ObjectOpenHashMap(); // Folia - region threading
+        this.entityMap = new Int2ObjectOpenHashMap(); // Folia - region threading
         this.chunkTypeCache = new Long2ByteOpenHashMap();
         this.chunkSaveCooldowns = new Long2LongOpenHashMap();
         this.unloadQueue = Queues.newConcurrentLinkedQueue();
@@ -718,8 +718,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     public void updateChunkTracking(ServerPlayer player, ChunkPos pos, MutableObject<java.util.Map<Object, ClientboundLevelChunkWithLightPacket>> packet, boolean oldWithinViewDistance, boolean newWithinViewDistance) { // Paper - public // Paper - Anti-Xray - Bypass
-        io.papermc.paper.util.TickThread.ensureTickThread(this.level, pos, "May not update chunk tracking for chunk async"); // Paper - replace chunk loader system
-        io.papermc.paper.util.TickThread.ensureTickThread(player, "May not update chunk tracking for player async"); // Paper - replace chunk loader system
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.level, pos, "May not update chunk tracking for chunk async"); // Paper - replace chunk loader system
+        //io.papermc.paper.util.TickThread.ensureTickThread(player, "May not update chunk tracking for player async"); // Paper - replace chunk loader system
         if (player.level() == this.level) {
             ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos.toLong()); // Paper - replace chunk loader system - move up
             if (newWithinViewDistance && !oldWithinViewDistance) {
@@ -1076,6 +1076,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     ChunkMap.TrackedEntity playerchunkmap_entitytracker = new ChunkMap.TrackedEntity(entity, i, j, entitytypes.trackDeltas());
 
                     entity.tracker = playerchunkmap_entitytracker; // Paper - Fast access to tracker
+                    entityMap.put(entity.getId(), entity.tracker);
                     // Folia - region threading
                     playerchunkmap_entitytracker.updatePlayers(this.level.getLocalPlayers()); // Paper - don't search all players // Folia - region threading
                     if (entity instanceof ServerPlayer) {
@@ -1086,6 +1087,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                         for (Entity possible : this.level.getCurrentWorldData().getLocalEntities()) {
                             if (possible.tracker != null) {
                                 possible.tracker.updatePlayer(entityplayer);
+                                entityMap.put(possible.getId(), possible.tracker);
                             }
                         }
                         // Folia end - region threading
@@ -1131,6 +1133,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             tracker.updatePlayers(players);
             tracker.removeNonTickThreadPlayers();
             tracker.serverEntity.sendChanges();
+            this.entityMap.put(entity.getId(), tracker);
         }
         // Folia end - region threading
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 49c9088c365fdc4342b82de7f1ce2cc0b93e7ea4..1463dfaff72b927f5307794d6bf08e13f5fc0352 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -220,53 +220,47 @@ public class ServerChunkCache extends ChunkSource {
     @Override
     public ChunkAccess getChunk(int x, int z, ChunkStatus leastStatus, boolean create) {
         final int x1 = x; final int z1 = z; // Paper - conflict on variable change
-        if (!io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
-            return (ChunkAccess) CompletableFuture.supplyAsync(() -> {
-                return this.getChunk(x, z, leastStatus, create);
-            }, this.mainThreadProcessor).join();
-        } else {
-            // Paper start - optimise for loaded chunks
-            LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
-            if (ifLoaded != null) {
-                return ifLoaded;
-            }
-            // Paper end
-            ProfilerFiller gameprofilerfiller = this.level.getProfiler();
+        // Paper start - optimise for loaded chunks
+        LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
+        if (ifLoaded != null) {
+            return ifLoaded;
+        }
+        // Paper end
+        ProfilerFiller gameprofilerfiller = this.level.getProfiler();
 
-            gameprofilerfiller.incrementCounter("getChunk");
-            long k = ChunkPos.asLong(x, z);
+        gameprofilerfiller.incrementCounter("getChunk");
+        long k = ChunkPos.asLong(x, z);
 
-            ChunkAccess ichunkaccess;
+        ChunkAccess ichunkaccess;
 
-            // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
+        // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
 
-            gameprofilerfiller.incrementCounter("getChunkCacheMiss");
-            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
-            ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
+        gameprofilerfiller.incrementCounter("getChunkCacheMiss");
+        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
+        ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
 
-            Objects.requireNonNull(completablefuture);
-            if (!completablefuture.isDone()) { // Paper
-                // Paper start - async chunk io/loading
-                io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
-                // Paper end
-                com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
-                this.level.timings.syncChunkLoad.startTiming(); // Paper
+        Objects.requireNonNull(completablefuture);
+        if (!completablefuture.isDone()) { // Paper
+            // Paper start - async chunk io/loading
+            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
+            // Paper end
+            com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
+            this.level.timings.syncChunkLoad.startTiming(); // Paper
             chunkproviderserver_b.managedBlock(completablefuture::isDone);
-                io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
-                this.level.timings.syncChunkLoad.stopTiming(); // Paper
-            } // Paper
-            ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
-                return ichunkaccess1;
-            }, (playerchunk_failure) -> {
-                if (create) {
-                    throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
-                } else {
-                    return null;
-                }
-            });
-            this.storeInCache(k, ichunkaccess, leastStatus);
-            return ichunkaccess;
-        }
+            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
+            this.level.timings.syncChunkLoad.stopTiming(); // Paper
+        } // Paper
+        ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
+            return ichunkaccess1;
+        }, (playerchunk_failure) -> {
+            if (create) {
+                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
+            } else {
+                return null;
+            }
+        });
+        this.storeInCache(k, ichunkaccess, leastStatus);
+        return ichunkaccess;
     }
 
     @Nullable
@@ -286,7 +280,7 @@ public class ServerChunkCache extends ChunkSource {
     }
 
     public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFuture(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
-        if (true) throw new UnsupportedOperationException(); // Folia - region threading
+        //if (true) throw new UnsupportedOperationException(); // Folia - region threading
         boolean flag1 = io.papermc.paper.util.TickThread.isTickThread(); // Paper - rewrite chunk system
         CompletableFuture completablefuture;
 
@@ -313,7 +307,7 @@ public class ServerChunkCache extends ChunkSource {
     }
     private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create, boolean isUrgent) {
         // Paper start - rewrite chunk system
-        io.papermc.paper.util.TickThread.ensureTickThread(this.level, chunkX, chunkZ, "Scheduling chunk load off-main");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.level, chunkX, chunkZ, "Scheduling chunk load off-main");
         int minLevel = ChunkLevel.byStatus(leastStatus);
         io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder = this.level.chunkTaskScheduler.chunkHolderManager.getChunkHolder(chunkX, chunkZ);
 
@@ -811,40 +805,40 @@ public class ServerChunkCache extends ChunkSource {
         // Folia start - region threading
         @Override
         public void tell(Runnable runnable) {
-            if (true) {
+            /*if (true) {
                 throw new UnsupportedOperationException();
-            }
+            }*/
             super.tell(runnable);
         }
 
         @Override
         public void executeBlocking(Runnable runnable) {
-            if (true) {
+            /*if (true) {
                 throw new UnsupportedOperationException();
-            }
+            }*/
             super.executeBlocking(runnable);
         }
 
         @Override
         public void execute(Runnable runnable) {
-            if (true) {
+            /*if (true) {
                 throw new UnsupportedOperationException();
-            }
+            }*/
             super.execute(runnable);
         }
 
         @Override
         public void executeIfPossible(Runnable runnable) {
-            if (true) {
+            /*if (true) {
                 throw new UnsupportedOperationException();
-            }
+            }*/
             super.executeIfPossible(runnable);
         }
         // Folia end - region threading
 
         @Override
         protected void doRunTask(Runnable task) {
-            if (true) throw new UnsupportedOperationException(); // Folia - region threading
+            //if (true) throw new UnsupportedOperationException(); // Folia - region threading
             ServerChunkCache.this.level.getProfiler().incrementCounter("runTask");
             super.doRunTask(task);
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index ced3dfa5e760c6f9c13058791eefc78928a57288..ab251b5580951d10f4ade4cf6c80e5f8c27640c5 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -218,6 +218,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
     public final UUID uuid;
     // Folia - region threading
     private final alternate.current.wire.WireHandler wireHandler = new alternate.current.wire.WireHandler(this); // Paper - optimize redstone (Alternate Current)
+
+    public boolean unloadLocked = false;
     public static Throwable getAddToWorldStackTrace(Entity entity) {
         final Throwable thr = new Throwable(entity + " Added to world at " + new java.util.Date());
         io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateThrowable(thr);
@@ -1365,7 +1367,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     public void tickNonPassenger(Entity entity) {
         // Paper start - log detailed entity tick information
-        io.papermc.paper.util.TickThread.ensureTickThread(entity, "Cannot tick an entity off-main"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(entity, "Cannot tick an entity off-main"); // Folia - region threading
         try {
             if (currentlyTickingEntity.get() == null) {
                 currentlyTickingEntity.lazySet(entity);
@@ -1746,6 +1748,10 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
     }
 
+    public long getRedstoneGameTime(int chunkX, int chunkZ) {
+        return this.getCurrentWorldData(chunkX, chunkZ).getRedstoneGameTime();
+    }
+
     public io.papermc.paper.threadedregions.RegionizedWorldData getCurrentWorldData(int chunkX, int chunkZ) {
         return chunkTaskScheduler.isHalted()
             ? Objects.requireNonNull(regioniser.getRegionAtUnsynchronised(chunkX, chunkZ), "Chunk was not present on world activity halt")
@@ -2280,7 +2286,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     public boolean setChunkForced(int x, int z, boolean forced) {
-        io.papermc.paper.threadedregions.RegionizedServer.ensureGlobalTickThread("Cannot modify force loaded chunks off of the global region"); // Folia - region threading
+        //io.papermc.paper.threadedregions.RegionizedServer.ensureGlobalTickThread("Cannot modify force loaded chunks off of the global region"); // Folia - region threading
         ForcedChunksSavedData forcedchunk = (ForcedChunksSavedData) this.getDataStorage().computeIfAbsent(ForcedChunksSavedData::load, ForcedChunksSavedData::new, "chunks");
         ChunkPos chunkcoordintpair = new ChunkPos(x, z);
         long k = chunkcoordintpair.toLong();
@@ -2770,7 +2776,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         public void onCreated(Entity entity) {}
 
         public void onDestroyed(Entity entity) {
-            // ServerLevel.this.getScoreboard().entityRemoved(entity); // Folia - region threading
+            ServerLevel.this.getScoreboard().entityRemoved(entity); // Folia - region threading
         }
 
         public void onTickingStart(Entity entity) {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index febd0ba72922462364eb65243640dcb693129e21..7c41fdd23a460edaa7e4b8055cf317b824f53b7d 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1295,7 +1295,7 @@ public class ServerPlayer extends Player {
     }
 
     private void respawn(java.util.function.Consumer<ServerPlayer> respawnComplete, boolean alive) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot respawn entity async");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot respawn entity async");
 
         this.getBukkitEntity(); // force bukkit entity to be created before TPing
 
@@ -1571,7 +1571,7 @@ public class ServerPlayer extends Player {
 
     @Override
     public boolean endPortalLogicAsync() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         if (this.level().getTypeKey() == LevelStem.END) {
             if (!this.canPortalAsync(false)) {
@@ -1607,9 +1607,9 @@ public class ServerPlayer extends Player {
     @Nullable
     public Entity changeDimension(ServerLevel worldserver, PlayerTeleportEvent.TeleportCause cause) {
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
-        }
+        }*/
         // Folia end - region threading
         // CraftBukkit end
         if (this.isSleeping()) return this; // CraftBukkit - SPIGOT-3154
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index 072634e26d32ca0b3438a5d3a03be3670d0f846e..626b2765ca3fcd1718e97ce85a27f7b04abf232c 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -34,6 +34,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.threadedregions.RegionizedServer;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.network.Connection;
@@ -267,7 +269,7 @@ public class ServerConnectionListener {
     }
 
     public List<Connection> getConnections() {
-        return this.connections;
+        return RegionizedServer.getInstance().getConnections();
     }
 
     private static class LatencySimulator extends ChannelInboundHandlerAdapter {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 30b847413c7b855ac355a84c72cf5accae0625c8..39cf03f1cccd12aa8f3cf3f10e9c7588adec6126 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2533,7 +2533,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     public void handleCommand(String s) { // Paper - private -> public
         // Paper Start
         if (!org.spigotmc.AsyncCatcher.shuttingDown && !org.bukkit.Bukkit.isPrimaryThread()) {
-            if (true) throw new UnsupportedOperationException(); // Folia - region threading
+            //if (true) throw new UnsupportedOperationException(); // Folia - region threading
             LOGGER.error("Command Dispatched Async: " + s);
             LOGGER.error("Please notify author of plugin causing this execution to fix this bug! see: http://bit.ly/1oSiM6C", new Throwable());
             Waitable<Void> wait = new Waitable<>() {
@@ -2594,7 +2594,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         if (s.isEmpty()) {
             ServerGamePacketListenerImpl.LOGGER.warn(this.player.getScoreboardName() + " tried to send an empty message");
         } else if (this.getCraftPlayer().isConversing()) {
-            if (true) throw new UnsupportedOperationException(); // Folia - region threading
+            //if (true) throw new UnsupportedOperationException(); // Folia - region threading
             final String conversationInput = s;
             this.server.processQueue.add(new Runnable() {
                 @Override
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index ffb5332310e9b2d10292fe01c37fd48552fedffc..87f0c33d45a84ffa9b034c72d48dc158a9f5a21d 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -377,7 +377,8 @@ public abstract class PlayerList {
         this.sendPlayerPermissionLevel(player);
         player.getStats().markAllDirty();
         player.getRecipeBook().sendInitialRecipeBook(player);
-        if (false) this.updateEntireScoreboard(worldserver1.getScoreboard(), player); // Folia - region threading
+        //if (false) this.updateEntireScoreboard(worldserver1.getScoreboard(), player); // Folia - region threading
+        this.updateEntireScoreboard(worldserver1.getScoreboard(), player); // Folia - region threading
         this.server.invalidateStatus();
         MutableComponent ichatmutablecomponent;
 
@@ -557,7 +558,8 @@ public abstract class PlayerList {
         // Paper start - Add to collideRule team if needed
         final Scoreboard scoreboard = this.getServer().getLevel(Level.OVERWORLD).getScoreboard();
         final PlayerTeam collideRuleTeam = scoreboard.getPlayerTeam(this.collideRuleTeamName);
-        if (false && this.collideRuleTeamName != null && collideRuleTeam != null && player.getTeam() == null) { // Folia - region threading
+        //if (false && this.collideRuleTeamName != null && collideRuleTeam != null && player.getTeam() == null) { // Folia - region threading
+        if (this.collideRuleTeamName != null && collideRuleTeam != null && player.getTeam() == null) {
             scoreboard.addPlayerToTeam(player.getScoreboardName(), collideRuleTeam);
         }
         // Paper end
@@ -688,7 +690,7 @@ public abstract class PlayerList {
         // CraftBukkit end
 
         // Paper start - Remove from collideRule team if needed
-        if (false && this.collideRuleTeamName != null) { // Folia - region threading
+        if (/*false &&*/ this.collideRuleTeamName != null) { // Folia - region threading
             final Scoreboard scoreBoard = this.server.getLevel(Level.OVERWORLD).getScoreboard();
             final PlayerTeam team = scoreBoard.getPlayersTeam(this.collideRuleTeamName);
             if (entityplayer.getTeam() == team && team != null) {
@@ -876,9 +878,9 @@ public abstract class PlayerList {
     public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
         // Paper end
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
-        }
+        }*/
         // Folia end - region threading
         entityplayer.stopRiding(); // CraftBukkit
         this.players.remove(entityplayer);
@@ -1452,7 +1454,7 @@ public abstract class PlayerList {
         // CraftBukkit end
 
         // Paper start - Remove collideRule team if it exists
-        if (false && this.collideRuleTeamName != null) { // Folia - region threading
+        if (/*false &&*/ this.collideRuleTeamName != null) { // Folia - region threading
             final Scoreboard scoreboard = this.getServer().getLevel(Level.OVERWORLD).getScoreboard();
             final PlayerTeam team = scoreboard.getPlayersTeam(this.collideRuleTeamName);
             if (team != null) scoreboard.removePlayerTeam(team);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7519453ae2fc0396f4cdab95f19d2b87e7cd925d..6c07466f11b46973eb865552f94d81609cb74de6 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -7,6 +7,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.event.entity.EntityPortalReadyEvent;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
 import java.util.Arrays;
@@ -1073,7 +1074,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     public void move(MoverType movementType, Vec3 movement) {
         // Paper start - detailed watchdog information
-        io.papermc.paper.util.TickThread.ensureTickThread("Cannot move an entity off-main");
+        //io.papermc.paper.util.TickThread.ensureTickThread("Cannot move an entity off-main");
         synchronized (this.posLock) {
             this.moveStartX = this.getX();
             this.moveStartY = this.getY();
@@ -3032,7 +3033,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 this.portalEntrancePos = pos.immutable();
             }
 
-            this.isInsidePortal = true;
+            if (new org.bukkit.event.entity.EntityPortalEnterEvent(this.getBukkitEntity(), new Location(level.getWorld(), pos.getX(), pos.getY(), pos.getZ())).callEvent()) {
+                this.isInsidePortal = true;
+            }
         }
     }
 
@@ -3231,9 +3234,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     @Nullable
     public Team getTeam() {
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             return null;
-        }
+        }*/
         // Folia end - region threading
         if (!this.level().paperConfig().scoreboards.allowNonPlayerEntitiesOnScoreboards && !(this instanceof Player)) { return null; } // Paper
         return this.level().getScoreboard().getPlayersTeam(this.getScoreboardName());
@@ -3629,7 +3632,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     protected EntityTreeNode makePassengerTree() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot read passengers off of the main thread");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot read passengers off of the main thread");
 
         EntityTreeNode root = new EntityTreeNode(null, this);
         java.util.ArrayDeque<EntityTreeNode> queue = new java.util.ArrayDeque<>();
@@ -3655,7 +3658,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     protected EntityTreeNode detachPassengers() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot adjust passengers/vehicle off of the main thread");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot adjust passengers/vehicle off of the main thread");
 
         EntityTreeNode root = new EntityTreeNode(null, this);
         java.util.ArrayDeque<EntityTreeNode> queue = new java.util.ArrayDeque<>();
@@ -3837,7 +3840,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public final boolean teleportAsync(ServerLevel destination, Vec3 pos, Float yaw, Float pitch, Vec3 speedDirectionUpdate,
                                        org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause, long teleportFlags,
                                        java.util.function.Consumer<Entity> teleportComplete) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot teleport entity async");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot teleport entity async");
 
         if (!ServerLevel.isInSpawnableBounds(new BlockPos(io.papermc.paper.util.CoordinateUtils.getBlockX(pos), io.papermc.paper.util.CoordinateUtils.getBlockY(pos), io.papermc.paper.util.CoordinateUtils.getBlockZ(pos)))) {
             return false;
@@ -3868,6 +3871,12 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
         }
 
+        if (destination.unloadLocked) {
+            IllegalAccessException exception = new IllegalAccessException("Unable to teleport an entity to a world that is unloadingding");
+            exception.printStackTrace();
+            return false;
+        }
+
         // TODO any events that can modify go HERE
 
         // check for same region
@@ -3947,7 +3956,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     protected boolean tryEndPortal() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
         BlockPos pos = this.portalBlock;
         ServerLevel world = this.portalWorld;
         this.portalBlock = null;
@@ -3965,7 +3974,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     protected boolean tryNetherPortal() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         int portalWaitTime = this.getPortalWaitTime();
 
@@ -3988,9 +3997,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean endPortalLogicAsync() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         ServerLevel destination = this.getServer().getLevel(this.level().getTypeKey() == LevelStem.END ? Level.OVERWORLD : Level.END);
+        EntityPortalReadyEvent event = new io.papermc.paper.event.entity.EntityPortalReadyEvent(this.getBukkitEntity(), destination == null ? null : destination.getWorld(), org.bukkit.PortalType.ENDER);
+        if (!event.callEvent()) {
+            return false;
+        }
+        destination = event.getTargetWorld() == null ? null : ((CraftWorld) event.getTargetWorld()).getHandle();
         if (destination == null) {
             // wat
             return false;
@@ -4000,9 +4014,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean netherPortalLogicAsync() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         ServerLevel destination = this.getServer().getLevel(this.level().getTypeKey() == LevelStem.NETHER ? Level.OVERWORLD : Level.NETHER);
+        EntityPortalReadyEvent event = new io.papermc.paper.event.entity.EntityPortalReadyEvent(this.getBukkitEntity(), destination == null ? null : destination.getWorld(), org.bukkit.PortalType.NETHER);
+        if (!event.callEvent()) {
+            return false;
+        }
+        destination = event.getTargetWorld() == null ? null : ((CraftWorld) event.getTargetWorld()).getHandle();
         if (destination == null) {
             // wat
             return false;
@@ -4232,7 +4251,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     protected boolean portalToAsync(ServerLevel destination, boolean takePassengers,
                                     PortalType type, java.util.function.Consumer<Entity> teleportComplete) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
         if (!this.canPortalAsync(takePassengers)) {
             return false;
         }
@@ -4314,9 +4333,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     @Nullable
     public Entity teleportTo(ServerLevel worldserver, PositionImpl location) {
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
-        }
+        }*/
         // Folia end - region threading
         // CraftBukkit end
         // Paper start - fix bad state entities causing dupes
@@ -5528,7 +5547,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     @Override
     public final void setRemoved(Entity.RemovalReason reason) {
         // Paper start - rewrite chunk system
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot remove entity off-main");
+        ////io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot remove entity off-main");
         if (this.updatingSectionStatus) {
             LOGGER.warn("Entity " + this + " is currently prevented from being added/removed to world since it is processing section status updates", new Throwable());
             return;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index e95745610ddaee29debb87554c48b7b19ab7a464..dd327a273fe71128c0a53471c280dde64d7a050f 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -864,7 +864,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         this.hurtTime = nbt.getShort("HurtTime");
         this.deathTime = nbt.getShort("DeathTime"); this.broadcastedDeath = false; // Folia - region threading
         this.lastHurtByMobTimestamp = nbt.getInt("HurtByTimestamp");
-        if (false && nbt.contains("Team", 8)) { // Folia start - region threading
+        if (/*false && */nbt.contains("Team", 8)) { // Folia start - region threading
             String s = nbt.getString("Team");
             PlayerTeam scoreboardteam = this.level().getScoreboard().getPlayerTeam(s);
             if (!this.level().paperConfig().scoreboards.allowNonPlayerEntitiesOnScoreboards && !(this instanceof net.minecraft.world.entity.player.Player)) { scoreboardteam = null; } // Paper
@@ -1144,7 +1144,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public boolean addEffect(MobEffectInstance mobeffect, @Nullable Entity entity, EntityPotionEffectEvent.Cause cause) {
-        if (!this.hasNullCallback()) io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot add effects to entities asynchronously"); // Folia - region threading
+        if (!this.hasNullCallback()); //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot add effects to entities asynchronously"); // Folia - region threading
         if (this.isTickingEffects) {
             this.effectsToProcess.add(new ProcessableEffect(mobeffect, cause));
             return true;
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index 5150d447c9dc2f539446749c8bee102050bab4ed..bd068146c3e90512ca176ee33531d856621d955a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -265,7 +265,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         int chunkY = io.papermc.paper.util.CoordinateUtils.getChunkSectionY(pos);
         int chunkZ = io.papermc.paper.util.CoordinateUtils.getChunkSectionZ(pos);
 
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
 
         io.papermc.paper.chunk.system.scheduling.ChunkHolderManager manager = this.world.chunkTaskScheduler.chunkHolderManager;
         io.papermc.paper.chunk.system.poi.PoiChunk ret = manager.getPoiChunkIfLoaded(chunkX, chunkZ, true);
@@ -279,7 +279,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         int chunkY = io.papermc.paper.util.CoordinateUtils.getChunkSectionY(pos);
         int chunkZ = io.papermc.paper.util.CoordinateUtils.getChunkSectionZ(pos);
 
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
 
         io.papermc.paper.chunk.system.scheduling.ChunkHolderManager manager = this.world.chunkTaskScheduler.chunkHolderManager;
 
@@ -302,7 +302,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         int chunkY = io.papermc.paper.util.CoordinateUtils.getChunkSectionY(pos);
         int chunkZ = io.papermc.paper.util.CoordinateUtils.getChunkSectionZ(pos);
 
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
 
         io.papermc.paper.chunk.system.scheduling.ChunkHolderManager manager = this.world.chunkTaskScheduler.chunkHolderManager;
 
@@ -317,7 +317,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     public void onUnload(long coordinate) { // Paper - rewrite chunk system
         int chunkX = io.papermc.paper.util.MCUtil.getCoordinateX(coordinate);
         int chunkZ = io.papermc.paper.util.MCUtil.getCoordinateZ(coordinate);
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Unloading poi chunk off-main");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Unloading poi chunk off-main");
         for (int section = this.levelHeightAccessor.getMinSection(); section < this.levelHeightAccessor.getMaxSection(); ++section) {
             long sectionPos = SectionPos.asLong(chunkX, section, chunkZ);
             this.updateDistanceTracking(sectionPos);
@@ -327,7 +327,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     public void loadInPoiChunk(io.papermc.paper.chunk.system.poi.PoiChunk poiChunk) {
         int chunkX = poiChunk.chunkX;
         int chunkZ = poiChunk.chunkZ;
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Loading poi chunk off-main");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Loading poi chunk off-main");
         for (int sectionY = this.levelHeightAccessor.getMinSection(); sectionY < this.levelHeightAccessor.getMaxSection(); ++sectionY) {
             PoiSection section = poiChunk.getSection(sectionY);
             if (section != null && !section.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index da9ab0d8762557e80bb6f6ace65887b8b3016c1e..9f5465d1ee991bfab4ef7fdf33e87621332420ef 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -106,7 +106,7 @@ public abstract class Projectile extends Entity implements TraceableEntity {
 
     @Nullable
     public Entity getOwnerRaw() { // Folia - region threading
-        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot update owner state asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot update owner state asynchronously"); // Folia - region threading
         if (this.cachedOwner != null && !this.cachedOwner.isRemoved()) {
             this.refreshProjectileSource(false); // Paper
             return this.cachedOwner;
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartCommandBlock.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartCommandBlock.java
index 1e1adbb68596bd8351ec77da67e6fd8139734b61..8a39f9a0cdbb5183ed80da5b07e6aaf9c9f65157 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartCommandBlock.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartCommandBlock.java
@@ -153,7 +153,7 @@ public class MinecartCommandBlock extends AbstractMinecart {
         // Folia start
         @Override
         public void threadCheck() {
-            io.papermc.paper.util.TickThread.ensureTickThread(MinecartCommandBlock.this, "Asynchronous sendSystemMessage to a command block");
+            //io.papermc.paper.util.TickThread.ensureTickThread(MinecartCommandBlock.this, "Asynchronous sendSystemMessage to a command block");
         }
         // Folia end
     }
diff --git a/src/main/java/net/minecraft/world/level/BaseCommandBlock.java b/src/main/java/net/minecraft/world/level/BaseCommandBlock.java
index 19cb22df8eb29d1708e3da2124de3b43378b575a..1d2da5ee3c27799e3ef153c538126ae5da9c3e63 100644
--- a/src/main/java/net/minecraft/world/level/BaseCommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/BaseCommandBlock.java
@@ -111,7 +111,7 @@ public abstract class BaseCommandBlock implements CommandSource {
     }
 
     public boolean performCommand(Level world) {
-        if (true) return false; // Folia - region threading
+        //if (true) return false; // Folia - region threading
         if (!world.isClientSide && world.getGameTime() != this.lastExecution) {
             if ("Searge".equalsIgnoreCase(this.command)) {
                 this.lastOutput = Component.literal("#itzlipofutzli");
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 5f598ba1f5384c4dc5e54606ebc8f9ce90ff4924..c993d4de7c5fae73d57608e9d50325ed5b787364 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1241,7 +1241,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     @Override
     public List<Entity> getEntities(@Nullable Entity except, AABB box, Predicate<? super Entity> predicate) {
-        io.papermc.paper.util.TickThread.ensureTickThread((ServerLevel)this, box, "Cannot getEntities asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread((ServerLevel)this, box, "Cannot getEntities asynchronously"); // Folia - region threading
         this.getProfiler().incrementCounter("getEntities");
         List<Entity> list = Lists.newArrayList();
         ((ServerLevel)this).getEntityLookup().getEntities(except, box, list, predicate); // Paper - optimise this call
@@ -1261,7 +1261,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     public <T extends Entity> void getEntities(EntityTypeTest<Entity, T> filter, AABB box, Predicate<? super T> predicate, List<? super T> result, int limit) {
-        io.papermc.paper.util.TickThread.ensureTickThread((ServerLevel)this, box, "Cannot getEntities asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread((ServerLevel)this, box, "Cannot getEntities asynchronously"); // Folia - region threading
         this.getProfiler().incrementCounter("getEntities");
         // Paper start - optimise this call
         //TODO use limit
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
index 3698bae85063baec031a61d24ef3286703a9d04c..bf997ee6950e8771cd73fd805275532f86b87fc0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
@@ -60,7 +60,7 @@ public class CommandBlockEntity extends BlockEntity {
         // Folia start
         @Override
         public void threadCheck() {
-            io.papermc.paper.util.TickThread.ensureTickThread((ServerLevel) CommandBlockEntity.this.level, CommandBlockEntity.this.worldPosition, "Asynchronous sendSystemMessage to a command block");
+            //io.papermc.paper.util.TickThread.ensureTickThread((ServerLevel) CommandBlockEntity.this.level, CommandBlockEntity.this.worldPosition, "Asynchronous sendSystemMessage to a command block");
         }
         // Folia end
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 40ffa5cf0bba6bc1f3ed25ef27410020a4c5fd35..376767f3170af23f969f6bea62b92afffba705f0 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -576,7 +576,7 @@ public class LevelChunk extends ChunkAccess {
     @Nullable
     public BlockEntity getBlockEntity(BlockPos pos, LevelChunk.EntityCreationType creationType) {
         // CraftBukkit start
-        BlockEntity tileentity = level.getCurrentWorldData().capturedTileEntities.get(pos); // Folia - region threading
+        BlockEntity tileentity = this.level.getCurrentWorldData(locX, locZ).capturedTileEntities.get(pos); // Folia - region threading
         if (tileentity == null) {
             tileentity = (BlockEntity) this.blockEntities.get(pos);
         }
@@ -626,7 +626,7 @@ public class LevelChunk extends ChunkAccess {
     }
 
     private boolean isInLevel() {
-        return this.loaded || this.level.isClientSide();
+        return this.loaded && !this.level.chunkTaskScheduler.isHalted(); //Folia, not loaded after halt
     }
 
     boolean isTicking(BlockPos pos) {
@@ -919,7 +919,7 @@ public class LevelChunk extends ChunkAccess {
     @Override
     public boolean isUnsaved() {
         // Paper start - add dirty system to tick lists
-        long gameTime = this.level.getRedstoneGameTime(); // Folia - region threading
+        long gameTime = this.level.getRedstoneGameTime(this.locX, this.locZ); // Folia - region threading
         if (this.blockTicks.isDirty(gameTime) || this.fluidTicks.isDirty(gameTime)) {
             return true;
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 97533c4a31ab6137072b79dc4377fd602fef9ea8..0303e3331d2448ce4b9451f18b8daeaa27446554 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -418,7 +418,7 @@ public class ChunkSerializer {
         org.spigotmc.AsyncCatcher.catchOp("preparation of chunk data for async save");
 
         final CompoundTag tickLists = new CompoundTag();
-        ChunkSerializer.saveTicks(world, tickLists, chunk.getTicksForSerialization());
+        ChunkSerializer.saveTicks(world, chunk.locX, chunk.locZ, tickLists, chunk.getTicksForSerialization()); //Folia - add coords in case of world halt
 
         ListTag blockEntitiesSerialized = new ListTag();
         for (final BlockPos blockPos : chunk.getBlockEntitiesPos()) {
@@ -620,7 +620,7 @@ public class ChunkSerializer {
             nbttagcompound.put(BLOCK_TICKS_TAG, asyncsavedata.blockTickList);
             nbttagcompound.put(FLUID_TICKS_TAG, asyncsavedata.fluidTickList);
         } else {
-        ChunkSerializer.saveTicks(world, nbttagcompound, chunk.getTicksForSerialization());
+            ChunkSerializer.saveTicks(world, chunk.locX, chunk.locZ, nbttagcompound, chunk.getTicksForSerialization()); //Folia - add coords in case of world halt
         }
         // Paper end
         nbttagcompound.put("PostProcessing", ChunkSerializer.packOffsets(chunk.getPostProcessing()));
@@ -645,8 +645,8 @@ public class ChunkSerializer {
         return nbttagcompound;
     }
 
-    private static void saveTicks(ServerLevel world, CompoundTag nbt, ChunkAccess.TicksToSave tickSchedulers) {
-        long i = world.getRedstoneGameTime(); // Folia - region threading
+    private static void saveTicks(ServerLevel world, int x, int z, CompoundTag nbt, ChunkAccess.TicksToSave tickSchedulers) { //Folia - add coords in case of world halt
+        long i = world.getRedstoneGameTime(x, z); // Folia - region threading
 
         nbt.put("block_ticks", tickSchedulers.blocks().save(i, (block) -> {
             return BuiltInRegistries.BLOCK.getKey(block).toString();
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index 2b862066388cfede202a0c709f93ae89e2d17b30..39de5b84117611e2a43d1b142d915136bd022fef 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -258,7 +258,7 @@ public class MapItemSavedData extends SavedData {
     }
 
     public synchronized void tickCarriedBy(Player player, ItemStack stack) { // Folia - make map data thread-safe
-        io.papermc.paper.util.TickThread.ensureTickThread(player, "Ticking map player in incorrect region"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(player, "Ticking map player in incorrect region"); // Folia - region threading
         if (!this.carriedByPlayers.containsKey(player)) {
             MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = new MapItemSavedData.HoldingPlayer(player);
 
diff --git a/src/main/java/net/minecraft/world/ticks/LevelTicks.java b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
index f3df9c9b6cff85565514f990597f3fe53652812c..febf1a49b0aca43258462e271688aea5b709c486 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
@@ -143,7 +143,7 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
 
     @Override
     public void schedule(ScheduledTick<T> orderedTick) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, orderedTick.pos(), "Cannot schedule tick for another region!"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, orderedTick.pos(), "Cannot schedule tick for another region!"); // Folia - region threading
         long l = ChunkPos.asLong(orderedTick.pos());
         LevelChunkTicks<T> levelChunkTicks = this.allContainers.get(l);
         if (levelChunkTicks == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 145428f15f1489f170849b27cfed4a8d03b7441a..1ca1ba2cf973852aec713717cc6010598c8acb52 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1011,7 +1011,7 @@ public final class CraftServer implements Server {
 
         // Folia start - region threading
         if ((sender instanceof Entity entity)) {
-            io.papermc.paper.util.TickThread.ensureTickThread(((org.bukkit.craftbukkit.entity.CraftEntity)entity).getHandle(), "Dispatching command async");
+            //io.papermc.paper.util.TickThread.ensureTickThread(((org.bukkit.craftbukkit.entity.CraftEntity)entity).getHandle(), "Dispatching command async");
         } else if (sender instanceof ConsoleCommandSender console) {
             //io.papermc.paper.threadedregions.RegionizedServer.ensureGlobalTickThread("Dispatching command async");
         } else {
@@ -1271,10 +1271,11 @@ public final class CraftServer implements Server {
 
     @Override
     public World createWorld(WorldCreator creator) {
-        if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
+        io.papermc.paper.threadedregions.RegionizedServer.ensureGlobalTickThread("World create can be done only on global tick thread");
 
         String name = creator.name();
         ChunkGenerator generator = creator.generator();
@@ -1393,7 +1394,19 @@ public final class CraftServer implements Server {
         }
 
         this.console.addLevel(internal); // Paper - move up
-        this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
+        //this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
+        io.papermc.paper.threadedregions.RegionizedServer.getInstance().addWorld(internal);
+        int loadRegionRadius = ((32) >> 4);
+        internal.randomSpawnSelection = new net.minecraft.world.level.ChunkPos(internal.getChunkSource().randomState().sampler().findSpawnPosition());
+        for (int currX = -loadRegionRadius; currX <= loadRegionRadius; ++currX) {
+            for (int currZ = -loadRegionRadius; currZ <= loadRegionRadius; ++currZ) {
+                net.minecraft.world.level.ChunkPos pos = new net.minecraft.world.level.ChunkPos(currX, currZ);
+                internal.chunkSource.addTicketAtLevel(
+                    TicketType.UNKNOWN, pos, io.papermc.paper.chunk.system.scheduling.ChunkHolderManager.MAX_TICKET_LEVEL, pos
+                );
+            }
+        }
+        //Folia
 
         internal.setSpawnSettings(true, true);
         // Paper - move up
@@ -1413,7 +1426,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean unloadWorld(World world, boolean save) {
-        if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot unload a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         if (world == null) {
             return false;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 723ae4b75c84fe952377c02d42cf7a710f7047ea..a08068515baba281f481d82c8593992ff97b5604 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -327,7 +327,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public Chunk getChunkAt(int x, int z) {
-        io.papermc.paper.util.TickThread.isTickThreadFor(this.getHandle(), x, z); // Folia - region threading
+        //io.papermc.paper.util.TickThread.isTickThreadFor(this.getHandle(), x, z); // Folia - region threading
         warnUnsafeChunk("getting a faraway chunk", x, z); // Paper
         // Paper start - add ticket to hold chunk for a little while longer if plugin accesses it
         net.minecraft.world.level.chunk.LevelChunk chunk = this.world.getChunkSource().getChunkAtIfLoadedImmediately(x, z);
@@ -427,7 +427,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     private boolean unloadChunk0(int x, int z, boolean save) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, x, z, "Cannot unload chunk asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, x, z, "Cannot unload chunk asynchronously"); // Folia - region threading
         if (!this.isChunkLoaded(x, z)) {
             return true;
         }
@@ -442,7 +442,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean regenerateChunk(int x, int z) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, x, z, "Cannot regenerate chunk asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, x, z, "Cannot regenerate chunk asynchronously"); // Folia - region threading
         warnUnsafeChunk("regenerating a faraway chunk", x, z); // Paper
         // Paper start - implement regenerateChunk method
         final ServerLevel serverLevel = this.world;
@@ -503,7 +503,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean refreshChunk(int x, int z) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, x, z, "Cannot refresh chunk asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, x, z, "Cannot refresh chunk asynchronously"); // Folia - region threading
         ChunkHolder playerChunk = this.world.getChunkSource().chunkMap.getVisibleChunkIfPresent(ChunkPos.asLong(x, z));
         if (playerChunk == null) return false;
 
@@ -539,7 +539,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean loadChunk(int x, int z, boolean generate) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.getHandle(), x, z, "May not sync load chunks asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.getHandle(), x, z, "May not sync load chunks asynchronously"); // Folia - region threading
         warnUnsafeChunk("loading a faraway chunk", x, z); // Paper
         // Paper start - Optimize this method
         ChunkPos chunkPos = new ChunkPos(x, z);
@@ -802,7 +802,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, loc.getX(), loc.getZ(), "Cannot generate tree asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, loc.getX(), loc.getZ(), "Cannot generate tree asynchronously"); // Folia - region threading
         io.papermc.paper.threadedregions.RegionizedWorldData worldData = world.getCurrentWorldData(); // Folia - region threading
         worldData.captureTreeGeneration = true; // Folia - region threading
         worldData.captureBlockStates = true; // Folia - region threading
@@ -916,13 +916,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, Entity source) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, x, z, "Cannot create explosion asynchronously");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, x, z, "Cannot create explosion asynchronously");
         return !this.world.explode(source == null ? null : ((CraftEntity) source).getHandle(), x, y, z, power, setFire, breakBlocks ? net.minecraft.world.level.Level.ExplosionInteraction.MOB : net.minecraft.world.level.Level.ExplosionInteraction.NONE).wasCanceled;
     }
     // Paper start
     @Override
     public boolean createExplosion(Entity source, Location loc, float power, boolean setFire, boolean breakBlocks) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, loc.getX(), loc.getZ(), "Cannot create explosion asynchronously");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, loc.getX(), loc.getZ(), "Cannot create explosion asynchronously");
         return !world.explode(source != null ? ((org.bukkit.craftbukkit.entity.CraftEntity) source).getHandle() : null, loc.getX(), loc.getY(), loc.getZ(), power, setFire, breakBlocks ? net.minecraft.world.level.Level.ExplosionInteraction.MOB : net.minecraft.world.level.Level.ExplosionInteraction.NONE).wasCanceled;
     }
     // Paper end
@@ -992,7 +992,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public int getHighestBlockYAt(int x, int z, org.bukkit.HeightMap heightMap) {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, x >> 4, z >> 4, "Cannot retrieve chunk asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, x >> 4, z >> 4, "Cannot retrieve chunk asynchronously"); // Folia - region threading
         warnUnsafeChunk("getting a faraway chunk", x >> 4, z >> 4); // Paper
         // Transient load for this tick
         return this.world.getChunk(x >> 4, z >> 4).getHeight(CraftHeightMap.toNMS(heightMap), x, z);
@@ -1023,7 +1023,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     @Override
     public void setBiome(int x, int y, int z, Holder<net.minecraft.world.level.biome.Biome> bb) {
         BlockPos pos = new BlockPos(x, 0, z);
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, pos, "Cannot retrieve chunk asynchronously"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, pos, "Cannot retrieve chunk asynchronously"); // Folia - region threading
         if (this.world.hasChunkAt(pos)) {
             net.minecraft.world.level.chunk.LevelChunk chunk = this.world.getChunkAt(pos);
 
@@ -2306,7 +2306,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         if (sourceEntity != null && !Bukkit.isOwnedByCurrentRegion(sourceEntity)) {
             throw new IllegalStateException("Cannot send game event asynchronously");
         }
-        io.papermc.paper.util.TickThread.ensureTickThread(this.world, position.getX(), position.getZ(), "Cannot send game event asynchronously");
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.world, position.getX(), position.getZ(), "Cannot send game event asynchronously");
         // Folia end - region threading
         getHandle().gameEvent(sourceEntity != null ? ((CraftEntity) sourceEntity).getHandle(): null, net.minecraft.core.registries.BuiltInRegistries.GAME_EVENT.get(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(gameEvent.getKey())), org.bukkit.craftbukkit.util.CraftVector.toBlockPos(position));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 2df67e75f8960fe07a75e88f2f650bab18054579..9a97baf4b0e10d29986619533b94531a8a561f8c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -80,9 +80,9 @@ public class CraftBlock implements Block {
 
     public net.minecraft.world.level.block.state.BlockState getNMS() {
         // Folia start - region threading
-        if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
-        }
+        /*if (world instanceof ServerLevel serverWorld) {
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
+        }*/
         // Folia end - region threading
         return this.world.getBlockState(position);
     }
@@ -162,7 +162,7 @@ public class CraftBlock implements Block {
     private void setData(final byte data, int flag) {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
         }
         // Folia end - region threading
         this.world.setBlock(position, CraftMagicNumbers.getBlock(this.getType(), data), flag);
@@ -208,7 +208,7 @@ public class CraftBlock implements Block {
     public static boolean setTypeAndData(LevelAccessor world, BlockPos position, net.minecraft.world.level.block.state.BlockState old, net.minecraft.world.level.block.state.BlockState blockData, boolean applyPhysics) {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
         }
         // Folia end - region threading
         // SPIGOT-611: need to do this to prevent glitchiness. Easier to handle this here (like /setblock) than to fix weirdness in tile entity cleanup
@@ -358,7 +358,7 @@ public class CraftBlock implements Block {
     public Biome getBiome() {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
         }
         // Folia end - region threading
         return this.getWorld().getBiome(this.getX(), this.getY(), this.getZ());
@@ -369,7 +369,7 @@ public class CraftBlock implements Block {
     public Biome getComputedBiome() {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
         }
         // Folia end - region threading
         return this.getWorld().getComputedBiome(this.getX(), this.getY(), this.getZ());
@@ -380,7 +380,7 @@ public class CraftBlock implements Block {
     public void setBiome(Biome bio) {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
         }
         // Folia end - region threading
         this.getWorld().setBiome(this.getX(), this.getY(), this.getZ(), bio);
@@ -454,7 +454,7 @@ public class CraftBlock implements Block {
     public boolean isBlockFaceIndirectlyPowered(BlockFace face) {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
         }
         // Folia end - region threading
         int power = this.world.getMinecraftWorld().getSignal(position, CraftBlock.blockFaceToNotch(face));
@@ -471,7 +471,7 @@ public class CraftBlock implements Block {
     public int getBlockPower(BlockFace face) {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
         }
         // Folia end - region threading
         int power = 0;
@@ -562,7 +562,7 @@ public class CraftBlock implements Block {
     public boolean breakNaturally(ItemStack item, boolean triggerEffect, boolean dropExperience) {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
         }
         // Folia end - region threading
         // Paper end
@@ -610,7 +610,7 @@ public class CraftBlock implements Block {
     public boolean applyBoneMeal(BlockFace face) {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
         }
         // Folia end - region threading
         Direction direction = CraftBlock.blockFaceToNotch(face);
@@ -716,7 +716,7 @@ public class CraftBlock implements Block {
     public RayTraceResult rayTrace(Location start, Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode) {
         // Folia start - region threading
         if (this.world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, this.position, "Cannot read world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, this.position, "Cannot read world asynchronously");
         }
         // Folia end - region threading
         Preconditions.checkArgument(start != null, "Location start cannot be null");
@@ -762,7 +762,7 @@ public class CraftBlock implements Block {
     public boolean canPlace(BlockData data) {
         // Folia start - region threading
         if (this.world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, this.position, "Cannot read world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, this.position, "Cannot read world asynchronously");
         }
         // Folia end - region threading
         Preconditions.checkArgument(data != null, "BlockData cannot be null");
@@ -797,7 +797,7 @@ public class CraftBlock implements Block {
     public float getDestroySpeed(ItemStack itemStack, boolean considerEnchants) {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
         }
         // Folia end - region threading
         net.minecraft.world.item.ItemStack nmsItemStack;
@@ -827,7 +827,7 @@ public class CraftBlock implements Block {
     public void tick() {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
         }
         // Folia end - region threading
         net.minecraft.world.level.block.state.BlockState blockData = this.getNMS();
@@ -840,7 +840,7 @@ public class CraftBlock implements Block {
     public void randomTick() {
         // Folia start - region threading
         if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
         }
         // Folia end - region threading
         net.minecraft.world.level.block.state.BlockState blockData = this.getNMS();
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
index 38b4d0870d21467e415d5e84457706df80c15e23..002f5136815328d5b7f92c4ca5d6cc8ab0971acc 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
@@ -203,7 +203,7 @@ public class CraftBlockState implements BlockState {
 
         // Folia start - region threading
         if (access instanceof net.minecraft.server.level.ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
+            //io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot modify world asynchronously");
         }
         // Folia end - region threading
 
@@ -343,7 +343,7 @@ public class CraftBlockState implements BlockState {
     @Override
     public java.util.Collection<org.bukkit.inventory.ItemStack> getDrops(org.bukkit.inventory.ItemStack item, org.bukkit.entity.Entity entity) {
         // Folia start - region threading
-        io.papermc.paper.util.TickThread.ensureTickThread(world.getHandle(), position, "Cannot modify world asynchronously");
+        //io.papermc.paper.util.TickThread.ensureTickThread(world.getHandle(), position, "Cannot modify world asynchronously");
         // Folia end - region threading
         net.minecraft.world.item.ItemStack nms = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(item);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
index 2c46527dfe832919b055579a0876a043c06d8b67..ba5489e466a56e3b80386b45637c157d731d699e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
@@ -67,7 +67,7 @@ public abstract class AbstractProjectile extends CraftEntity implements Projecti
 
     @Override
     public net.minecraft.world.entity.projectile.Projectile getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.Projectile) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
index c43ce4c9f6d011a7403dd37ff62953aba29852aa..3f2a5f92ccfd753d858568b55ce21af70cbfbc37 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
@@ -26,7 +26,7 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
 
     @Override
     public net.minecraft.world.entity.animal.horse.AbstractHorse getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.horse.AbstractHorse) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractSkeleton.java
index fa1bc80ae320c6d04acc20d6dec7df52a39d9920..3fb9f07e5b51accb059eb32ed3219f55f112b916 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractSkeleton.java
@@ -25,7 +25,7 @@ public abstract class CraftAbstractSkeleton extends CraftMonster implements Abst
 
     @Override
     public net.minecraft.world.entity.monster.AbstractSkeleton getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.AbstractSkeleton) super.getHandle();
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
index e3d57d4f65d1f3c03f407d497ff360dcd40a0fb1..7c1beff1aa926f1bb2bb1b83a11334cbfa491252 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
@@ -26,7 +26,7 @@ public class CraftAbstractVillager extends CraftAgeable implements AbstractVilla
 
     @Override
     public net.minecraft.world.entity.npc.AbstractVillager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Villager) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
index 69118f8ff00755ba1c31845a2704dd95fa2aee6e..78160af5f0f82c41857325e1f923803a0b1519f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
@@ -72,7 +72,7 @@ public class CraftAgeable extends CraftCreature implements Ageable {
 
     @Override
     public AgeableMob getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AgeableMob) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
index 18044b45cc001739406f8151c54f06b5d70d17e0..e7189ddff7471482afbd54a7f5121155e7519f62 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
@@ -26,7 +26,7 @@ public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay
 
     @Override
     public Allay getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Allay) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
index 93d9b4c40aa545d57650a411316210d193a6d3d7..4149754247bafe435be11fc11cd313bbea0194fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
@@ -19,7 +19,7 @@ public class CraftAmbient extends CraftMob implements Ambient {
 
     @Override
     public AmbientCreature getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AmbientCreature) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
index 5cf8ea3a7dd4e8ea96ca6061aa1aaefc7ac8fcce..96bc63fd0bfd97c07536e29b67ca6b666614b2d4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
@@ -24,7 +24,7 @@ public class CraftAnimals extends CraftAgeable implements Animals {
 
     @Override
     public Animal getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Animal) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
index f67a9f77039c29daac80359e2793bee4baf3b3c4..9aeedf1b654ba4da97ffdff9ac0351d835977eb6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
@@ -35,7 +35,7 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
 
     @Override
     public net.minecraft.world.entity.AreaEffectCloud getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+       // //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.AreaEffectCloud) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
index f678c151938ddd3e5277a05d6d8884c12b114336..55b48be494ee0f2e84ff3a2789e93e2f0931adfd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
@@ -35,7 +35,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
 
     @Override
     public net.minecraft.world.entity.decoration.ArmorStand getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.decoration.ArmorStand) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 6050a3209d893dc4b1f65f14f815840390c14eb0..d93a17155e45b2cb404411f8ab5fa6efc3ac66f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -152,7 +152,7 @@ public class CraftArrow extends AbstractProjectile implements AbstractArrow {
 
     @Override
     public net.minecraft.world.entity.projectile.AbstractArrow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.AbstractArrow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
index dec03f00091ca781f0eaa4063649883f47040b07..24ce4accd0a67d447e00aaac11bc09b65563d0c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
@@ -20,7 +20,7 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
 
     @Override
     public net.minecraft.world.entity.animal.axolotl.Axolotl getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.axolotl.Axolotl) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
index 631250c15711d0912d2ae34efed02d78d20a0098..1be3bf2e148d473282ca3d0d0ecd107a9a591cee 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
@@ -18,7 +18,7 @@ public class CraftBat extends CraftAmbient implements Bat {
 
     @Override
     public net.minecraft.world.entity.ambient.Bat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.ambient.Bat) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
index 1e636646e3baa7a77c008d9109e0dccfbc497d6e..a1e0882abcebfd7c84e7a16668b7aaed157ad089 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
@@ -23,7 +23,7 @@ public class CraftBee extends CraftAnimals implements Bee {
 
     @Override
     public net.minecraft.world.entity.animal.Bee getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Bee) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index 7dfbf7f7a94eae0c62d6830d459c34784a7e518c..6b757655c31ee4bf7a8fa55bb7e032fd10c79c76 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -18,7 +18,7 @@ public class CraftBlaze extends CraftMonster implements Blaze {
 
     @Override
     public net.minecraft.world.entity.monster.Blaze getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Blaze) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlockDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlockDisplay.java
index 29ac4ef7d2ed35e10df539b055db087f741fe4b6..3f27629cff93206123c236223a661e4cbadeeb7f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlockDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlockDisplay.java
@@ -22,7 +22,7 @@ public class CraftBlockDisplay extends CraftDisplay implements BlockDisplay {
 
     @Override
     public net.minecraft.world.entity.Display.BlockDisplay getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.Display.BlockDisplay) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
index 6671a86496394a786034cab7defa8126b55e8d5e..e5d954ddcab5a9494fe64fb185fcaef8859093b4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
@@ -101,7 +101,7 @@ public class CraftBoat extends CraftVehicle implements Boat {
 
     @Override
     public net.minecraft.world.entity.vehicle.Boat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.vehicle.Boat) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
index 17dc189187e343db0e91f642a2edc782c6419ab9..e786d8cc6843bdbc5d3c246aee22f8a0d47dda70 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
@@ -21,7 +21,7 @@ public class CraftCamel extends CraftAbstractHorse implements Camel {
 
     @Override
     public net.minecraft.world.entity.animal.camel.Camel getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.camel.Camel) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
index d2d54ba55b65108c7fdff6e6850982351f6127a6..18caff74257872bd872ec53f17eafbeb0bcc3858 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
@@ -23,7 +23,7 @@ public class CraftCat extends CraftTameableAnimal implements Cat {
 
     @Override
     public net.minecraft.world.entity.animal.Cat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Cat) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
index 86fee0d40a9dc6a18ec19dc3d85978f38b8d1cd0..8fc321613d4e7ec1600d400d79a9d4de1ea27e4d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
@@ -18,7 +18,7 @@ public class CraftCaveSpider extends CraftSpider implements CaveSpider {
 
     @Override
     public net.minecraft.world.entity.monster.CaveSpider getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.CaveSpider) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
index 0c9400446c2c69e4bd95d167c61ffe22442b4d35..731464912f4241de3cdfff0dcdc176c908c89a7d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
@@ -28,7 +28,7 @@ public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.Chest
 
     @Override
     public ChestBoat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (ChestBoat) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java
index 1a9986acde12881e32db67b9e7263072871331cb..b3122aef049c8bac0ba2cfb1de16eb25cf6956dd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java
@@ -19,7 +19,7 @@ public abstract class CraftChestedHorse extends CraftAbstractHorse implements Ch
 
     @Override
     public AbstractChestedHorse getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractChestedHorse) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
index 7066741a251d24c754058aa2553b9430de5b42d3..b3e3003b88a701f1f5672c845e4c7355dfe39149 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
@@ -19,7 +19,7 @@ public class CraftChicken extends CraftAnimals implements Chicken {
 
     @Override
     public net.minecraft.world.entity.animal.Chicken getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Chicken) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
index f3b587295e90f58b0885bc3c7070b62f3cf7805d..5ae0c4081fc68d9a360351dc8a1e42a51fc2eb21 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
@@ -19,7 +19,7 @@ public class CraftCod extends io.papermc.paper.entity.PaperSchoolableFish implem
 
     @Override
     public net.minecraft.world.entity.animal.Cod getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Cod) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
index 54aaee0d0d72c76a02e1ab5d51c47b26b6d08b93..646bc3591d1f7f6063421f70820a619d6947d8ff 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
@@ -42,7 +42,7 @@ public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
 
     @Override
     public EnderDragonPart getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (EnderDragonPart) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
index a8514a688a6fe4f19000f8f127b0a1277e4f754d..e03b2531dd78b9bee50ca2708260bbfe2feefe6e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
@@ -19,7 +19,7 @@ public class CraftCow extends CraftAnimals implements Cow {
 
     @Override
     public net.minecraft.world.entity.animal.Cow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Cow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
index 062a625e178ac9bbbb26f3d6548fb663b01d889b..a1a73f9bc01e33e1dbed7e2ee4aa5357d31de597 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
@@ -18,7 +18,7 @@ public class CraftCreature extends CraftMob implements Creature {
 
     @Override
     public PathfinderMob getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (PathfinderMob) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
index 24c6c26f0930940f88bdd0353d660ff31a0d7c33..0b86483f114c6a6520a24983b86c23f604ccf463 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
@@ -89,7 +89,7 @@ public class CraftCreeper extends CraftMonster implements Creeper {
 
     @Override
     public net.minecraft.world.entity.monster.Creeper getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Creeper) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
index e5ffc16d4d5595a7065119c97293f5b419b5a274..bf5f8d7850091c87df0eea1ad438d78ca834dbf0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
@@ -22,7 +22,7 @@ public class CraftDisplay extends CraftEntity implements Display {
 
     @Override
     public net.minecraft.world.entity.Display getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.Display) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
index 66f3a67ea0a81d4cfff8365ed055fff6967360b7..08b3c8a71b8953fc4b9bb7e3e5c25bf1823a12fa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
@@ -19,7 +19,7 @@ public class CraftDolphin extends CraftWaterMob implements Dolphin {
 
     @Override
     public net.minecraft.world.entity.animal.Dolphin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Dolphin) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
index 921a36e31f531ab43e9040463f66d8c081469ef4..c2d79df699bbc11b680dfcbacf0039668a7d1e7f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
@@ -19,7 +19,7 @@ public class CraftDrowned extends CraftZombie implements Drowned, com.destroysto
 
     @Override
     public net.minecraft.world.entity.monster.Drowned getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Drowned) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
index c439ab4e1db346d01c5de4ad9f2ce48e8830a081..7021b824799d31589700b540e6c54be2e6060ae4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
@@ -19,7 +19,7 @@ public class CraftEgg extends CraftThrowableProjectile implements Egg {
 
     @Override
     public ThrownEgg getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (ThrownEgg) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
index d07b70f42c87a92fe662fc27a2eefa474db87bcc..d8d2aa7fa1fc784ac18e410444de41f3acc0dd95 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
@@ -49,7 +49,7 @@ public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
 
     @Override
     public EndCrystal getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (EndCrystal) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index 10b827cb126d937548cc29a1b052d5acfa244f67..8fe717caf96282132233284967e3576fccbb3691 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -40,7 +40,7 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
 
     @Override
     public net.minecraft.world.entity.boss.enderdragon.EnderDragon getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.boss.enderdragon.EnderDragon) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
index c1f73d89805eca8e13bdee80bcd89ef23cc4b332..990666d7d0216a9334d9a2698603c053fc1a7ca0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
@@ -24,7 +24,7 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
 
     @Override
     public net.minecraft.world.entity.boss.EnderDragonPart getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.boss.EnderDragonPart) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
index 0cc66673866bd20ef74437866765134b0be503d3..d943ef93fe825d5a1c2d83642b8921234b9c6201 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
@@ -19,7 +19,7 @@ public class CraftEnderPearl extends CraftThrowableProjectile implements EnderPe
 
     @Override
     public ThrownEnderpearl getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (ThrownEnderpearl) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index 631dce2beaa9c8d72d45349a436d72c5417e8de7..8172d7b8f0ddbb6617563c961417566856ef5760 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -25,7 +25,7 @@ public class CraftEnderSignal extends CraftEntity implements EnderSignal {
 
     @Override
     public EyeOfEnder getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (EyeOfEnder) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
index 6061d0ea83479611d2c33cf0e001cd43e75c03c4..f1db2cdd339170e2cead155d950fb7ce74c22170 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
@@ -72,7 +72,7 @@ public class CraftEnderman extends CraftMonster implements Enderman {
 
     @Override
     public EnderMan getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (EnderMan) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
index 6d3325436a77153438bc40aa86819562e65e6a9e..155d1c25c8bab7e288526420423ed0187e9e3ac6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
@@ -19,7 +19,7 @@ public class CraftEndermite extends CraftMonster implements Endermite {
 
     @Override
     public net.minecraft.world.entity.monster.Endermite getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        ////o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Endermite) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 07220c6e52d57f409fd2ba668428eb055f2de520..eec84412297d2fab350cc17587b8c7b24547311b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -837,7 +837,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     public Entity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return this.entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index 6d7f99943ae6453edeecaea06f4a906b7b20daaf..88184b32eb5675f8fa0675d10cf877430f31b526 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -21,7 +21,7 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
 
     @Override
     public net.minecraft.world.entity.monster.Evoker getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Evoker) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
index 9fe7028cde18e4936cd2fc62a359feb6386596b3..715b0fa940082f1f8e69009efe88a4df7ed1a620 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
@@ -20,7 +20,7 @@ public class CraftEvokerFangs extends CraftEntity implements EvokerFangs {
 
     @Override
     public net.minecraft.world.entity.projectile.EvokerFangs getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.EvokerFangs) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
index 5b8333e342c639f33acf62e5f8eb72d0ba4a68c7..8440b007ff4465f8f267ef7fc0f1657a2eb3be87 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
@@ -40,7 +40,7 @@ public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
 
     @Override
     public net.minecraft.world.entity.ExperienceOrb getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.ExperienceOrb) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
index fc7d7c0645ff9a8b4d6a0bc78cf6bd64d1a0d858..3c36e242e06ba97794453d1eb55f098dfb631aea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
@@ -24,7 +24,7 @@ public class CraftFallingBlock extends CraftEntity implements FallingBlock {
 
     @Override
     public FallingBlockEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (FallingBlockEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index bd1ed5b1e58cb3ce40036a602acbb0b7a7e6322b..828663784da71d0b7f233ea06448ca8d02760708 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -56,7 +56,7 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
 
     @Override
     public AbstractHurtingProjectile getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractHurtingProjectile) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index 851cb3216184180667b068f36984bff4a7765c49..1f3c49986d1776e03707f6bd940158cdfa2805cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -47,7 +47,7 @@ public class CraftFirework extends CraftProjectile implements Firework {
 
     @Override
     public FireworkRocketEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (FireworkRocketEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
index d702e34f65de28df677a9d3616f38b2cf9abfa23..d8cfcad5f5b5414440e1ef4a7c53eea359e87411 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
@@ -19,7 +19,7 @@ public class CraftFish extends CraftWaterMob implements Fish, io.papermc.paper.e
 
     @Override
     public AbstractFish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractFish) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
index d73d18e10d9a75a43f9352f5eebaa3be485e3572..2d99d4e24919d990aec7607c806a64425b8adae1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
@@ -24,7 +24,7 @@ public class CraftFishHook extends CraftProjectile implements FishHook {
 
     @Override
     public FishingHook getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (FishingHook) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFlying.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFlying.java
index e1e51f050959aa23bd85bb794a7098a549c819c8..e419bf90415e2770125adafe6e9dfc855d558d47 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFlying.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFlying.java
@@ -19,7 +19,7 @@ public class CraftFlying extends CraftMob implements Flying {
 
     @Override
     public FlyingMob getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (FlyingMob) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
index 36997290fa276275bbcf890a7b368f40a9ad8e02..3d3d3eb9720d66fc289bfb86ec70c7b3e5e2dffa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
@@ -24,7 +24,7 @@ public class CraftFox extends CraftAnimals implements Fox {
 
     @Override
     public net.minecraft.world.entity.animal.Fox getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Fox) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
index 67e24a4c1daf6c986e34c4a41fb45285809b348f..38e9e82de69b059eeb2276e9603e4485fd6d12cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
@@ -24,7 +24,7 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
 
     @Override
     public Frog getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Frog) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index 308c39b5721dbf70ad256e5ccacc04831af398d5..0e196e36568c1c63ac8ee701f7488fe5f7d24db8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -19,7 +19,7 @@ public class CraftGhast extends CraftFlying implements Ghast, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Ghast getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Ghast) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
index f0a04ca56bd58844b40101190772786457239151..cf4c94a032b545a0cd807408795eab280ff698e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
@@ -19,7 +19,7 @@ public class CraftGiant extends CraftMonster implements Giant {
 
     @Override
     public net.minecraft.world.entity.monster.Giant getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Giant) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
index 2450dc8a0f1fc526eb0b2ed917a5bbbebeadb7bc..fb5cdfcbdeaf4b144a325b5d84fa973e200ae455 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
@@ -19,7 +19,7 @@ public class CraftGlowItemFrame extends CraftItemFrame implements GlowItemFrame
 
     @Override
     public net.minecraft.world.entity.decoration.GlowItemFrame getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.decoration.GlowItemFrame) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
index b5bac66ad28c0ed2bc41fa3ffe765c61817d6b8a..b95ff03063ac8a7e136d6c1d5493774fdf0cf5dd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
@@ -20,7 +20,7 @@ public class CraftGlowSquid extends CraftSquid implements GlowSquid {
 
     @Override
     public net.minecraft.world.entity.GlowSquid getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.GlowSquid) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
index 8081d8ef5c2e773f7a716ef33cd842cc4a5458cc..a62a421708abd8aebea6cf011de9a61c48f2df08 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
@@ -19,7 +19,7 @@ public class CraftGoat extends CraftAnimals implements Goat {
 
     @Override
     public net.minecraft.world.entity.animal.goat.Goat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.goat.Goat) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
index 1ab70f244ed31eea22cc2614788072dbf3b4bbb5..3d5f3c3c0bca889149d7658165db434cc34a573d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
@@ -18,7 +18,7 @@ public class CraftGolem extends CraftCreature implements Golem {
 
     @Override
     public AbstractGolem getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractGolem) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
index 1280dd6ecc53d681bbb311b6099817b517bc50db..00954ccec43696834cf23058aeac3ef6f7904282 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
@@ -23,7 +23,7 @@ public class CraftGuardian extends CraftMonster implements Guardian {
 
     @Override
     public net.minecraft.world.entity.monster.Guardian getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Guardian) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
index 1797199729d018d103ccae1773fc0206b8381b8d..e68d58e79907fc2c131b004db0b94a8cdc0a856e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
@@ -67,7 +67,7 @@ public class CraftHanging extends CraftEntity implements Hanging {
 
     @Override
     public HangingEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (HangingEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
index 1e312733b266e8350bc1a59113b195881c5a9e17..863d816b6220dedaa65e729b808069e5533e568e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
@@ -61,7 +61,7 @@ public class CraftHoglin extends CraftAnimals implements Hoglin, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.hoglin.Hoglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.hoglin.Hoglin) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
index a34608c74daced31ec45a96b643176a4d2ff72dc..2bc6796d2db5fa1cbc0c9b8da693bf67f7444527 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
@@ -23,7 +23,7 @@ public class CraftHorse extends CraftAbstractHorse implements Horse {
 
     @Override
     public net.minecraft.world.entity.animal.horse.Horse getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.horse.Horse) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 07347858bff8a764a140cb3fbd484301803cfa00..b82102f6bda98e040796c6f2f9bdb1bb505fcb46 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -300,7 +300,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
     @Override
     public Player getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Player) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllager.java
index 7becaa4d26df7309984b7aa271a0ae6f778acc0a..4d6bcb4ef2000e21e2ada2ddbd8d90a1bb377e44 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllager.java
@@ -19,7 +19,7 @@ public class CraftIllager extends CraftRaider implements Illager {
 
     @Override
     public AbstractIllager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractIllager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
index 3ab7929aa11584ec0f86ff8ad441f2b9660cf9c6..f46deffccf7361954f6e06649c80dc60ecbde57c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
@@ -19,7 +19,7 @@ public class CraftIllusioner extends CraftSpellcaster implements Illusioner, com
 
     @Override
     public net.minecraft.world.entity.monster.Illusioner getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Illusioner) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftInteraction.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftInteraction.java
index 7b7074a9418bbcd87c18217ea78efdbc7d01528a..77bef1230dfe1594462c33821647a45ca38423d8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftInteraction.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftInteraction.java
@@ -22,7 +22,7 @@ public class CraftInteraction extends CraftEntity implements Interaction {
 
     @Override
     public net.minecraft.world.entity.Interaction getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.Interaction) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
index 8c3818e8024ee25c29929368750dc346261db5d6..53d6e0a38a2833d64cde79d2dca69a07d54959c0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
@@ -18,7 +18,7 @@ public class CraftIronGolem extends CraftGolem implements IronGolem {
 
     @Override
     public net.minecraft.world.entity.animal.IronGolem getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.IronGolem) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemDisplay.java
index 06e2580653db00110b0f0a05cfda9d0e9baecdfa..1bb790de89651caee863faea236efaaf37a797db 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemDisplay.java
@@ -23,7 +23,7 @@ public class CraftItemDisplay extends CraftDisplay implements ItemDisplay {
 
     @Override
     public net.minecraft.world.entity.Display.ItemDisplay getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.Display.ItemDisplay) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
index 9f5825c037d26528740ba02aaf9eb1e36d564f67..88798fa4b67cd5526e6fc15924d1e7dae56a0562 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
@@ -165,7 +165,7 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
 
     @Override
     public net.minecraft.world.entity.decoration.ItemFrame getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.decoration.ItemFrame) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
index bbc439dab077bed605179129ae715f9989f2a181..dddaa9643564ea456e59f588280532ed638d1864 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
@@ -24,7 +24,7 @@ public class CraftLargeFireball extends CraftSizedFireball implements LargeFireb
 
     @Override
     public net.minecraft.world.entity.projectile.LargeFireball getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.LargeFireball) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
index ffccc8f021cdef6ed00241189aefd8217bc82d1c..3e8890acb6fd0ce996d17126773cb5a4ac873567 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
@@ -34,7 +34,7 @@ public class CraftLeash extends CraftHanging implements LeashHitch {
 
     @Override
     public LeashFenceKnotEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (LeashFenceKnotEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
index 80cac5d7362577e53ef5ca215ab3261898127b2f..7ed0d582cbcacf8844a1bce0daf8c1b2d20ae601 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
@@ -24,7 +24,7 @@ public class CraftLightningStrike extends CraftEntity implements LightningStrike
 
     @Override
     public LightningBolt getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (LightningBolt) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index fae85d064bcea3589a69483ec6ac6c4cca73ad9a..4e054e6dba778cc6095a84aca549d84e976c1050 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -437,7 +437,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public net.minecraft.world.entity.LivingEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.LivingEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
index bcb06f550033e346923026141dc96b032e9ff765..f82ee10c86fa4cded913f6554ba026f7233a3b54 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
@@ -24,7 +24,7 @@ public class CraftLlama extends CraftChestedHorse implements Llama, com.destroys
 
     @Override
     public net.minecraft.world.entity.animal.horse.Llama getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.horse.Llama) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
index ce153695ce561664fa5e184bad0ca8895f0344f3..812f8436e02697846377d7e89c90d159bc9ffed9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
@@ -20,7 +20,7 @@ public class CraftLlamaSpit extends AbstractProjectile implements LlamaSpit {
 
     @Override
     public net.minecraft.world.entity.projectile.LlamaSpit getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.LlamaSpit) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
index e9fa1f544b7350d7537729768c1a0c3f846c18ac..bb523e426e1be1cf02249c5acef4510ecc0e4e36 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
@@ -19,7 +19,7 @@ public class CraftMagmaCube extends CraftSlime implements MagmaCube {
 
     @Override
     public net.minecraft.world.entity.monster.MagmaCube getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.MagmaCube) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
index 8f28ad0cc3feb4a1a034d916da1ccd892b2149de..571743c712facceafe8abc6c85ab8b39254db1aa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
@@ -19,7 +19,7 @@ public class CraftMarker extends CraftEntity implements Marker {
 
     @Override
     public net.minecraft.world.entity.Marker getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.Marker) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
index 6cce3d64a4f506fcebbe34eae58163c57d43137c..d225bff404e745f6695e8bda9a0aeef1c9e1f378 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
@@ -95,7 +95,7 @@ public abstract class CraftMinecart extends CraftVehicle implements Minecart {
 
     @Override
     public AbstractMinecart getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractMinecart) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
index fd3eedcfa056c05761c53bccc62fb4dcd00fcb9b..b52b71cf54f3c82cc846f715ced4fe89a14025f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
@@ -30,7 +30,7 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
 
     @Override
     public MinecartCommandBlock getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (MinecartCommandBlock) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
index b7d0892953f357e58665e87fbcf794a75f1c0980..2f1e14493eb5e22fa5a9474ee975b062847aad16 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
@@ -25,7 +25,7 @@ public abstract class CraftMinecartContainer extends CraftMinecart implements Lo
 
     @Override
     public AbstractMinecartContainer getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractMinecartContainer) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
index e7c303a0f8b4e2ca26cf28b4661b7bdf56f2498f..19a2ce022b1f5df68a930c2d9c827f6c84cbd789 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
@@ -21,7 +21,7 @@ public class CraftMinecartFurnace extends CraftMinecart implements PoweredMineca
 
     @Override
     public MinecartFurnace getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (MinecartFurnace) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
index 31665297fc24f6d2e86e206ef1ddf46ded51782f..5270cec296a49ae335e28dcb6c6cfc25055be28d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
@@ -50,7 +50,7 @@ public final class CraftMinecartHopper extends CraftMinecartContainer implements
 
     @Override
     public net.minecraft.world.entity.vehicle.MinecartHopper getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.vehicle.MinecartHopper) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
index dce230dc9dc44040e925e9ab5ab95529561ba464..b72a740f81782b820c6347d6444695a9ec939690 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
@@ -52,7 +52,7 @@ public final class CraftMinecartTNT extends CraftMinecart implements ExplosiveMi
 
     @Override
     public MinecartTNT getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (MinecartTNT) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
index 148d0393b093a326f76fc34c035768f4758f3f1b..42fd7762b7dbd6bc6c9a8bbefc3c4e9c98ab8627 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
@@ -64,7 +64,7 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
 
     @Override
     public net.minecraft.world.entity.Mob getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.Mob) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
index d3b655ab5adacd60f04f912187662c5717a72962..a2d0a534dcd5adaa8abdac2c61e5fee35dfe87dd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
@@ -18,7 +18,7 @@ public class CraftMonster extends CraftCreature implements Monster, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Monster getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Monster) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
index f3016d316c1dcee3f5d7c7221668280c7bd9a76e..c0e19d93f66b4859ee4f36f10df0c15282dda710 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
@@ -20,7 +20,7 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow, io.paperm
 
     @Override
     public net.minecraft.world.entity.animal.MushroomCow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.MushroomCow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
index e6ba1a905a14ae7113decc72b121175eb85d2b36..7ab3109b96ae63f204fe2d1dff105ff8d608d32e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
@@ -19,7 +19,7 @@ public class CraftOcelot extends CraftAnimals implements Ocelot {
 
     @Override
     public net.minecraft.world.entity.animal.Ocelot getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Ocelot) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
index 2fb654411b042159da97c79e69e8845e2b73c4bb..1264f7f9b3f6d1a40b7bcf1b6b94f70ac7462532 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
@@ -61,7 +61,7 @@ public class CraftPainting extends CraftHanging implements Painting {
 
     @Override
     public net.minecraft.world.entity.decoration.Painting getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.decoration.Painting) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
index 71b307cd7029b8aeb511bfa6eb3f73736f2d0c91..12fe901b9bb3539c3399883f6ab0be1d5f38dcc8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
@@ -21,7 +21,7 @@ public class CraftPanda extends CraftAnimals implements Panda {
 
     @Override
     public net.minecraft.world.entity.animal.Panda getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Panda) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
index caee1abf4c057afa08be8495bf742f871b2d1eae..b2c079609be7ecfbf9f16c851b4801778ee82591 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
@@ -21,7 +21,7 @@ public class CraftParrot extends CraftTameableAnimal implements Parrot {
 
     @Override
     public net.minecraft.world.entity.animal.Parrot getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Parrot) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
index 8c02dabbfee88ee6c3315c8174da7236eecdd8cc..3d9c81d7f06fdccef682ee96d8e329faef469261 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
@@ -19,7 +19,7 @@ public class CraftPhantom extends CraftFlying implements Phantom, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Phantom getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Phantom) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
index f94b45ba171fcbae718b50ab2ff60d38248e622c..dac1dcf20e6685309128838fe4900237b7cabcf0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
@@ -65,7 +65,7 @@ public class CraftPig extends CraftAnimals implements Pig {
 
     @Override
     public net.minecraft.world.entity.animal.Pig getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Pig) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
index 8e4874f1bf3511e3947c48987caa098712271977..5bde175fef154836a4cfa8b166aac906a9ee248b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
@@ -40,7 +40,7 @@ public class CraftPigZombie extends CraftZombie implements PigZombie {
 
     @Override
     public ZombifiedPiglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (ZombifiedPiglin) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
index 3da995c2aa9fe947d059e76bb6e6410827f6888d..a7e837f4b2de0f277b3aec4b72df27f5aa6d656e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
@@ -85,7 +85,7 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
 
     @Override
     public net.minecraft.world.entity.monster.piglin.Piglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.piglin.Piglin) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinAbstract.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinAbstract.java
index ce763867f9c6c2d4773d76387afc0ecb479b6259..93e2f395b90e52191e96e40ef24b77b90da66d92 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinAbstract.java
@@ -104,7 +104,7 @@ public class CraftPiglinAbstract extends CraftMonster implements PiglinAbstract
 
     @Override
     public AbstractPiglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (AbstractPiglin) super.getHandle();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
index 18416b48a05a8d564b7715ad00f947e4f4c70d9d..995b0723a1e0f9981bbbc7d3b5973400da939156 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
@@ -19,7 +19,7 @@ public class CraftPiglinBrute extends CraftPiglinAbstract implements PiglinBrute
 
     @Override
     public net.minecraft.world.entity.monster.piglin.PiglinBrute getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.piglin.PiglinBrute) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
index e1b7922ed298b6b3068c3f5fbe3b4030cff13484..1bd709a27a097e87813910bf57a74705d39c49a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
@@ -21,7 +21,7 @@ public class CraftPillager extends CraftIllager implements Pillager, com.destroy
 
     @Override
     public net.minecraft.world.entity.monster.Pillager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Pillager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 39c6087cd3252e67d411f256d568e36a8af7a252..d963a7be377b6b78d2608976439214746a19b391 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1307,9 +1307,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public boolean teleport(Location location, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause, io.papermc.paper.entity.TeleportFlag... flags) {
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
-        }
+        }*/
         // Folia end - region threading
         java.util.Set<net.minecraft.world.entity.RelativeMovement> relativeArguments;
         java.util.Set<io.papermc.paper.entity.TeleportFlag> allFlags;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
index 23364bbd534a147954d72986a96aee836e0aa210..4f9d95a53566a461975133f49938b3effc767e7c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
@@ -19,7 +19,7 @@ public class CraftPolarBear extends CraftAnimals implements PolarBear {
 
     @Override
     public net.minecraft.world.entity.animal.PolarBear getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.PolarBear) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
index 1521ad3c160062f22e6e17d2dacde5d8db5ccc00..9b74b0929c1645796631568246e0febc5929fdd5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
@@ -21,7 +21,7 @@ public abstract class CraftProjectile extends AbstractProjectile implements Proj
 
     @Override
     public net.minecraft.world.entity.projectile.Projectile getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.Projectile) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
index ed0e5d32a187dd41952b923e4a1734afa7d092b1..16620d9489de4d2dc2a5d3461b4dba170649224c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
@@ -20,7 +20,7 @@ public class CraftPufferFish extends CraftFish implements PufferFish {
 
     @Override
     public Pufferfish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Pufferfish) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index 34a1b2853023006d3ef255651ffa58452ce4cc79..45b2c6b651df81e3732e51dd89e60fd5719a3898 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -21,7 +21,7 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
 
     @Override
     public net.minecraft.world.entity.animal.Rabbit getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Rabbit) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
index cfb231848766414297a13fea16308597546c86ce..147eae816010ff4febb403dc28df3288121ed2c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
@@ -25,7 +25,7 @@ public abstract class CraftRaider extends CraftMonster implements Raider {
 
     @Override
     public net.minecraft.world.entity.raid.Raider getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.raid.Raider) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
index 0e08b2f7a21a09f61ff4800439346260ef96e2d9..eb80ca76aedd0786a233a6dab9710556580013b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
@@ -19,7 +19,7 @@ public class CraftRavager extends CraftRaider implements Ravager {
 
     @Override
     public net.minecraft.world.entity.monster.Ravager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Ravager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
index 3951fa2f21932dc1b4948fab08998afaf928b27d..911b216c2e365f819fed6b8bbb23a6abcb6e4aa7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
@@ -19,7 +19,7 @@ public class CraftSalmon extends io.papermc.paper.entity.PaperSchoolableFish imp
 
     @Override
     public net.minecraft.world.entity.animal.Salmon getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Salmon) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
index e3c6a74d267ea0a10be375fc83428415ad575fc2..428eac1ec734f8622c1a19ee33661d39551ef149 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
@@ -39,7 +39,7 @@ public class CraftSheep extends CraftAnimals implements Sheep, io.papermc.paper.
 
     @Override
     public net.minecraft.world.entity.animal.Sheep getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Sheep) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
index ccf7fd9be8baeda0b47b7abf090f255842bc639c..f3f6b306f47178dc9d36a03aef5bb68b1cebaa92 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
@@ -33,7 +33,7 @@ public class CraftShulker extends CraftGolem implements Shulker, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Shulker getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Shulker) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
index 2435b081eb0587d155d8c4ffb8d67b7529965d85..390059063e3c70d891829dca54f300f442d96980 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
@@ -80,7 +80,7 @@ public class CraftShulkerBullet extends AbstractProjectile implements ShulkerBul
 
     @Override
     public net.minecraft.world.entity.projectile.ShulkerBullet getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.ShulkerBullet) entity;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
index a5a9d0daa0fd5641cbe10b5b269b26a0d589a5d5..a42fbbb42a31f0057065d763bbf0d226a4058be2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
@@ -18,7 +18,7 @@ public class CraftSilverfish extends CraftMonster implements Silverfish {
 
     @Override
     public net.minecraft.world.entity.monster.Silverfish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Silverfish) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
index c9bfe84cbd2c5835e070251ace2ef06ccb7004cf..25f608b2252231818df8320bdf563b48574b0074 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
@@ -36,7 +36,7 @@ public class CraftSizedFireball extends CraftFireball implements SizedFireball {
 
     @Override
     public Fireball getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Fireball) entity;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
index 4aed90c5ed149cc84d91c417b57edec71042d7cc..2f88f70ad816e6d8fbb9045355404e51610c3f05 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
@@ -41,7 +41,7 @@ public class CraftSkeleton extends CraftAbstractSkeleton implements Skeleton {
 
     @Override
     public net.minecraft.world.entity.monster.Skeleton getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Skeleton) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
index 2744d69cc268c809457d730e0061ebfb6c6aee11..14a20f097df401f4b6b78010870f771cbd740df1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
@@ -35,7 +35,7 @@ public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHo
 
     @Override
     public net.minecraft.world.entity.animal.horse.SkeletonHorse getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.horse.SkeletonHorse) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
index 307a2b8015c9598083bedccb0c516ea64c4fc514..53e24afb02922eea6d0e77aaabb914ac36a9dcb4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
@@ -29,7 +29,7 @@ public class CraftSlime extends CraftMob implements Slime, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Slime getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Slime) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
index 17b83eb8563586f1ddf252f438d52d554e946def..f1606653c20dc072640d5002389664d404cb3bec 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
@@ -18,7 +18,7 @@ public class CraftSmallFireball extends CraftSizedFireball implements SmallFireb
 
     @Override
     public net.minecraft.world.entity.projectile.SmallFireball getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.SmallFireball) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
index 3549d9b0c8ed9d746c38bebedaa7c729717bed92..57e6d5e7b9479d47dee1bec848d2019a58dd8d9c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
@@ -26,7 +26,7 @@ public class CraftSniffer extends CraftAnimals implements Sniffer {
 
     @Override
     public net.minecraft.world.entity.animal.sniffer.Sniffer getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.sniffer.Sniffer) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
index 117cdf4b1315f2de32aa13844f0f4c46f21cc96d..64ace20fc9273a7ea23d324daf62bad7d71369f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
@@ -18,7 +18,7 @@ public class CraftSnowball extends CraftThrowableProjectile implements Snowball
 
     @Override
     public net.minecraft.world.entity.projectile.Snowball getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.Snowball) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
index 00907c925fdb0d709ff421cdc8a1742282ad372f..cf2d828a5a69590e6331e4b014f1fff72181b0c6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
@@ -29,7 +29,7 @@ public class CraftSnowman extends CraftGolem implements Snowman, com.destroystok
 
     @Override
     public SnowGolem getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (SnowGolem) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
index f4bd0872dc725dc9040a89cbc627d86b786290df..0458c940fd4fc14e7f9417f2ca11472521ce1060 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
@@ -19,7 +19,7 @@ public class CraftSpectralArrow extends CraftArrow implements SpectralArrow {
 
     @Override
     public net.minecraft.world.entity.projectile.SpectralArrow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.SpectralArrow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
index 3dbb5f7f88979d616e185980d96cc2c377977000..b61b7694eae140ae0c32b8bd20d75472157483ec 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
@@ -21,7 +21,7 @@ public class CraftSpellcaster extends CraftIllager implements Spellcaster {
 
     @Override
     public SpellcasterIllager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (SpellcasterIllager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
index 496fb0ac11cdf32701b0d5fb4761a0ada60a78ac..1c426a2120a2f8b7fd0924814c6b9a1002b6fa78 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
@@ -19,7 +19,7 @@ public class CraftSpider extends CraftMonster implements Spider {
 
     @Override
     public net.minecraft.world.entity.monster.Spider getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Spider) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
index 10875cdf36b426de512c52ae60ac7e2c8312114b..cb319cf582a4a7dbc45951d74c348823e3b702f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
@@ -19,7 +19,7 @@ public class CraftSquid extends CraftWaterMob implements Squid {
 
     @Override
     public net.minecraft.world.entity.animal.Squid getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Squid) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
index 89cd22b73c38773961d6955d429564e816b8183a..cf538f2de4ba46b94dd24b96158eb361b8e50f1a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
@@ -75,7 +75,7 @@ public class CraftStrider extends CraftAnimals implements Strider {
 
     @Override
     public net.minecraft.world.entity.monster.Strider getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Strider) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
index 3be27209a4429c6ab618798418451bd527a2115b..ee578baba64e46c3ab121a30da41b7fcc426c119 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
@@ -52,7 +52,7 @@ public class CraftTNTPrimed extends CraftEntity implements TNTPrimed {
 
     @Override
     public PrimedTnt getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (PrimedTnt) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
index 1fab7a34e4fe624d901c0264cda980fd91dbd8e0..7de73038c239d5e9f64226ef87be88344695dded 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
@@ -19,7 +19,7 @@ public class CraftTadpole extends CraftFish implements org.bukkit.entity.Tadpole
 
     @Override
     public Tadpole getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Tadpole) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
index dc09e141ba2b12f1955bec521f2170d2fe4ba113..ac7dc749d8258359f52db19661840d4bdccc2dd2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
@@ -21,7 +21,7 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
 
     @Override
     public TamableAnimal getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (TamableAnimal) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
index 616848bf66273048dfde1f8802582fb871f8a5bb..08def0b35ee7590ec64d4580737aab9cc0e64d66 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
@@ -23,7 +23,7 @@ public class CraftTextDisplay extends CraftDisplay implements TextDisplay {
 
     @Override
     public net.minecraft.world.entity.Display.TextDisplay getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.Display.TextDisplay) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
index 8e66e9ac17a8a06130d6b039f27868d42554f337..49fb27e32cab6fa652b7e8b6193bcaa3e6d340c4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
@@ -35,7 +35,7 @@ public abstract class CraftThrowableProjectile extends CraftProjectile implement
 
     @Override
     public ThrowableItemProjectile getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (ThrowableItemProjectile) entity;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
index 34de9dcd6fa0e978c65bf48ae78923784bf575fd..cd91f8144e56598a2e6b2e347db287e9aeefbd95 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
@@ -19,7 +19,7 @@ public class CraftThrownExpBottle extends CraftThrowableProjectile implements Th
 
     @Override
     public ThrownExperienceBottle getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (ThrownExperienceBottle) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
index 6c15ba92215634a06a1d95fbd7d64bff2bb935dc..b436ca1697fbb370a2da946d67724c70d15bc270 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
@@ -71,7 +71,7 @@ public class CraftThrownPotion extends CraftThrowableProjectile implements Throw
 
     @Override
     public net.minecraft.world.entity.projectile.ThrownPotion getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.ThrownPotion) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
index 64058e89a029a75c112569c40d7216a4d349f3e8..f2008713479809097aaa04cd557705c8eaa16f7b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
@@ -31,7 +31,7 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
 
     @Override
     public net.minecraft.world.entity.projectile.Arrow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.Arrow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
index 124c78fcb7b59d6cb3d4de53609fb64f652c17e4..f39d32b28ff314485d3cfe0b2935b997e7ea8340 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
@@ -19,7 +19,7 @@ public class CraftTraderLlama extends CraftLlama implements TraderLlama {
 
     @Override
     public net.minecraft.world.entity.animal.horse.TraderLlama getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.horse.TraderLlama) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
index 4c69a367dfdf7c3b8e82dd44f005ed613e1fe0bf..c909048cd1fa4bc39df29289f48aed212278e3de 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
@@ -22,7 +22,7 @@ public class CraftTrident extends CraftArrow implements Trident {
 
     @Override
     public ThrownTrident getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (ThrownTrident) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
index f8aa5bc3d846d2fd785c612dd3906b84686e0792..842146a72195d34a4118e248c08f77735132051f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
@@ -23,7 +23,7 @@ public class CraftTropicalFish extends io.papermc.paper.entity.PaperSchoolableFi
 
     @Override
     public net.minecraft.world.entity.animal.TropicalFish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.TropicalFish) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
index 319efb68aebd6d1182dede7b2b6f368b3d7b62c2..c56800fde85779d96b4383acf085ffec087461ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
@@ -19,7 +19,7 @@ public class CraftTurtle extends CraftAnimals implements Turtle {
 
     @Override
     public net.minecraft.world.entity.animal.Turtle getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Turtle) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
index 90c295ff95bbee4f51fda1be2f58312d281925e5..1cecc35300b03be5678af46f2d7a4c2a783478af 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
@@ -23,7 +23,7 @@ public class CraftVex extends CraftMonster implements Vex {
 
     @Override
     public net.minecraft.world.entity.monster.Vex getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Vex) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 4b4167edcf9e30d50a103c5b85685e7175842f4b..3ec43aaeab95a30b53770a2121eef1bef577c354 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -39,7 +39,7 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
 
     @Override
     public net.minecraft.world.entity.npc.Villager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.npc.Villager) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
index 6231a4948fd934d2e73f15b364035c64d7e03cc8..14471b1258ba1e17bca38d3feec2dd287478924c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
@@ -28,7 +28,7 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
 
     @Override
     public net.minecraft.world.entity.monster.ZombieVillager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.ZombieVillager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
index fc7a87ed98801914d5cf3e6784f0025db30cf663..ba35bedd959cfa7073791f4cf576a93b4e7a2e1a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
@@ -19,7 +19,7 @@ public class CraftVindicator extends CraftIllager implements Vindicator {
 
     @Override
     public net.minecraft.world.entity.monster.Vindicator getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Vindicator) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
index 824e2c7aa9263195cb173da2b5612b3b8bc3a046..0b37ba6a08be70f9f1c1af96462585c2f5510cdb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
@@ -19,7 +19,7 @@ public class CraftWanderingTrader extends CraftAbstractVillager implements Wande
 
     @Override
     public net.minecraft.world.entity.npc.WanderingTrader getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.npc.WanderingTrader) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
index a4ede0f5973d18ed6b8ae3ee425c4445f39e86c4..841daba719a877a67577f1c3f78a74c1aab8f619 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
@@ -25,7 +25,7 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
 
     @Override
     public Warden getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (Warden) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
index c03b8291bac77696daf24caaff3512d6a0ba10db..e52fabe222d51869b8af8aaab5c48ff4dfe5f1ed 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
@@ -19,7 +19,7 @@ public class CraftWaterMob extends CraftCreature implements WaterMob {
 
     @Override
     public WaterAnimal getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (WaterAnimal) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
index c2bceaeabf13d37506eea540cb153d10ba18d817..3086ad0dae96dbad0b3697ecf4ff0a90cab24241 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
@@ -25,7 +25,7 @@ public class CraftWitch extends CraftRaider implements Witch, com.destroystokyo.
 
     @Override
     public net.minecraft.world.entity.monster.Witch getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Witch) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
index a6dc41a1eac7aa08a4e13489a7dabb61cd4eadd7..b4716a6b657a576a27a51382d4887ec719e30188 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
@@ -31,7 +31,7 @@ public class CraftWither extends CraftMonster implements Wither, com.destroystok
 
     @Override
     public WitherBoss getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (WitherBoss) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
index d7b5dc3632e22003f80843882652a35d7306b9d9..ac9ad575cf41469e86820ec1579a2dfb0b9346e0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
@@ -28,7 +28,7 @@ public class CraftWitherSkull extends CraftFireball implements WitherSkull {
 
     @Override
     public net.minecraft.world.entity.projectile.WitherSkull getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.projectile.WitherSkull) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
index 05372166c2cc7b48184c18a4fdd788a242ec4682..84d48a2131386f23dff65016fdd065e2421e919b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
@@ -33,7 +33,7 @@ public class CraftWolf extends CraftTameableAnimal implements Wolf {
 
     @Override
     public net.minecraft.world.entity.animal.Wolf getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.animal.Wolf) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
index 8195313de7a047e694c718609505a60b592f3565..4176bd9106061ae6fd39a1d440cad7ee3ad38cf7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
@@ -29,7 +29,7 @@ public class CraftZoglin extends CraftMonster implements Zoglin {
 
     @Override
     public net.minecraft.world.entity.monster.Zoglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Zoglin) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 631132549f454ffd6dc97e1bce2e994e7ce310d6..5f1fecaff6db507e27aa05265939582327713693 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -22,7 +22,7 @@ public class CraftZombie extends CraftMonster implements Zombie {
 
     @Override
     public net.minecraft.world.entity.monster.Zombie getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //o.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
         return (net.minecraft.world.entity.monster.Zombie) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 0a7cda6eb392d31e9b72d62f8483a52f05c0e973..7b936f2a95dde5bcbb95dd63ef6534972b26e288 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -3,17 +3,16 @@ package org.bukkit.craftbukkit.scheduler;
 import co.aikar.timings.MinecraftTimings; // Paper
 import com.google.common.base.Preconditions;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.PriorityQueue;
+
+import java.util.*;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.IntUnaryOperator;
 import java.util.logging.Level;
+
+import dev.rgbmc.folia.FakePlugin;
 import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitRunnable;
@@ -109,6 +108,8 @@ public class CraftScheduler implements BukkitScheduler {
     */ // Paper end
     private static final int RECENT_TICKS;
 
+    private static final Map<Integer, ScheduledTask> taskMap = new HashMap<>();
+
     static {
         RECENT_TICKS = 30;
     }
@@ -270,7 +271,10 @@ public class CraftScheduler implements BukkitScheduler {
         }
         // Paper start
         if (!this.isAsyncScheduler) {
-            this.asyncScheduler.cancelTask(taskId);
+            //this.asyncScheduler.cancelTask(taskId);
+            if (taskMap.containsKey(taskId)) {
+                taskMap.get(taskId).cancel();
+            }
         }
         // Paper end
         CraftTask task = this.runners.get(taskId);
@@ -308,6 +312,7 @@ public class CraftScheduler implements BukkitScheduler {
             }
             if (taskPending.getTaskId() == taskId) {
                 taskPending.cancel0();
+                taskMap.remove(taskPending.getTaskId());
             }
         }
     }
@@ -317,7 +322,8 @@ public class CraftScheduler implements BukkitScheduler {
         Preconditions.checkArgument(plugin != null, "Cannot cancel tasks of null plugin");
         // Paper start
         if (!this.isAsyncScheduler) {
-            this.asyncScheduler.cancelTasks(plugin);
+            //this.asyncScheduler.cancelTasks(plugin);
+            Bukkit.getAsyncScheduler().cancelTasks(plugin);
         }
         // Paper end
         final CraftTask task = new CraftTask(
@@ -353,6 +359,7 @@ public class CraftScheduler implements BukkitScheduler {
         for (CraftTask runner : this.runners.values()) {
             if (runner.getOwner().equals(plugin)) {
                 runner.cancel0();
+                taskMap.remove(runner.getTaskId());
             }
         }
     }
@@ -531,6 +538,9 @@ public class CraftScheduler implements BukkitScheduler {
         //if (true) throw new UnsupportedOperationException(); // Folia - region threading
         // Paper start
         Plugin owner = task.getOwner();
+        if (owner == null) {
+            owner = new FakePlugin();
+        }
         boolean repeat = task.getPeriod() != CraftTask.NO_REPEATING;
         if (!this.isAsyncScheduler && !task.isSync()) {
             long millis_delay = (long) (delay / 20.0 * 1000.0);
@@ -557,6 +567,7 @@ public class CraftScheduler implements BukkitScheduler {
                 }
             }
             task.setScheduledTask(scheduledTask);
+            taskMap.put(task.getTaskId(), scheduledTask);
             return task;
         }
         // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 17d9bd6f8ce3ea8dc757d48d301661767b99922f..0f0fd4b62baf9f4a997b9cc27ff92e4b74d496f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -159,6 +159,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
      * @return false if it is a craft future task that has already begun execution, true otherwise
      */
     boolean cancel0() {
+        cancel();
         this.setPeriod(CraftTask.CANCEL);
         return true;
     }
