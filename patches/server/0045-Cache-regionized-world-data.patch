From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Thu, 13 Jul 2023 21:38:53 +0400
Subject: [PATCH] Cache-regionized-world-data


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
index b84bfc9513a13e365f2bd471b3c77058638d1384..16a013db0ae6c034009915f59e2c7884ba2f3b60 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
@@ -51,6 +51,8 @@ public final class ChunkTaskScheduler {
 
     private static boolean initialised = false;
 
+    private boolean halted = false;
+
     public static void init(final GlobalConfiguration.ChunkSystem config) {
         if (initialised) {
             return;
@@ -813,7 +815,17 @@ public final class ChunkTaskScheduler {
                         !this.parallelGenExecutor.isActive() &&
                         !this.loadExecutor.isActive()
                 ) {
-                    return true;
+                    //return true;
+                    AtomicBoolean bool = new AtomicBoolean(true);
+                    this.world.regioniser.computeForAllRegionsUnsynchronised(region -> {
+                        if (!region.halt()) {
+                            bool.set(false);
+                        }
+                    });
+                    if (bool.get()){
+                        this.halted = true;
+                        return true;
+                    }
                 }
                 if ((System.nanoTime() - time) >= maxWaitNS) {
                     return false;
@@ -821,9 +833,14 @@ public final class ChunkTaskScheduler {
             }
         }
 
+        this.halted = true;
         return true;
     }
 
+    public boolean isHalted() {
+        return this.halted;
+    }
+
     public static final ArrayDeque<ChunkInfo> WAITING_CHUNKS = new ArrayDeque<>(); // stack
 
     public static final class ChunkInfo {
diff --git a/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java b/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
index 72a2b81a0a4dc6aab02d0dbad713ea882887d85f..f04eafe48e0779cbd6854eddbbacae3811cd47ab 100644
--- a/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
+++ b/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
@@ -879,6 +879,26 @@ public final class ThreadedRegionizer<R extends ThreadedRegionizer.ThreadedRegio
             }
         }
 
+        public boolean halt() {
+            if (this.state == STATE_DEAD) return true; //Already killed, no need to lock
+            try {
+                this.regioniser.acquireWriteLock();
+                return switch (this.state) {
+                    case STATE_TRANSIENT, STATE_READY -> {
+                        //We shouldn't remove it from world, we just stop it from being scheduled
+                        this.regioniser.callbacks.onRegionInactive(this);
+                        this.state = STATE_DEAD;
+                        yield true;
+                    }
+                    case STATE_TICKING -> false;
+                    case STATE_DEAD -> true;
+                    default -> throw new IllegalStateException("Unknown state: " + this.state);
+                };
+            } finally {
+                this.regioniser.releaseWriteLock();
+            }
+        }
+
         private boolean isDead() {
             return this.state == STATE_DEAD;
         }
diff --git a/src/main/java/io/papermc/paper/threadedregions/TickRegions.java b/src/main/java/io/papermc/paper/threadedregions/TickRegions.java
index 6c76c70574642aa4f3a8fce74e4608781ce132ec..0825069c79e25b56982f85cd880fd208e75f7b26 100644
--- a/src/main/java/io/papermc/paper/threadedregions/TickRegions.java
+++ b/src/main/java/io/papermc/paper/threadedregions/TickRegions.java
@@ -196,6 +196,13 @@ public final class TickRegions implements ThreadedRegionizer.RegionCallbacks<Tic
             return ret;
         }
 
+        public <T> T getDataAfterHalt(final RegionizedData<T> regionizedData) {
+            if (!world.chunkTaskScheduler.isHalted()) {
+                throw new IllegalStateException("World isn't halted");
+            }
+            return this.getOrCreateRegionizedData(regionizedData);
+        }
+
         @Override
         public void split(final ThreadedRegionizer<TickRegionData, TickRegionSectionData> regioniser,
                           final Long2ReferenceOpenHashMap<ThreadedRegionizer.ThreadedRegion<TickRegionData, TickRegionSectionData>> into,
diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index 493f7155e9ccc902af64e72a1ca7409859aa8d1d..b6e39f38bfe3d4dcfdc4f02d4b29d1034680c22c 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -136,6 +136,9 @@ public class TickThread extends Thread {
     }
 
     public static boolean isTickThreadFor(final ServerLevel world, final int chunkX, final int chunkZ) {
+        if (world.chunkTaskScheduler.isHalted()) { //As soon as we halt the activity, it's the global tick thread's propriety
+            return RegionizedServer.isGlobalTickThread() || isShutdownThread();
+        }
         ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
             TickRegionScheduler.getCurrentRegion();
         if (region == null) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b3f515c7c0e238f5c79f49d6f260f4592bf5208b..5f7bae9a8f926c6299586ed38abcd52cda275ef0 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -14,6 +14,8 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import dev.rgbmc.folia.CachedWorldData;
+import dev.rgbmc.folia.FakePlugin;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import java.awt.image.BufferedImage;
@@ -1473,6 +1475,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                         LOGGER.info("Initialising world '" + region.world.getWorld().getName() + "' before it can be ticked...");
                         this.initWorld(region.world, region.world.serverLevelData, worldData, region.world.serverLevelData.worldGenOptions()); // Folia - delayed until first tick of world
                         region.world.checkInitialised.set(ServerLevel.WORLD_INIT_CHECKED);
+                        CachedWorldData.update(region.world.getWorld().getName(), region.world.getCurrentWorldData());
+                        LOGGER.info("World " + region.world.getWorld().getName() + " data status: " + (CachedWorldData.get(region.world.getWorld().getName()) == null ? "(Unavailable)" : "(Cached)"));
                         LOGGER.info("Initialised world '" + region.world.getWorld().getName() + "'");
                     } // else: must be checked
                 }
@@ -1666,6 +1670,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : worldserver.getChunkSource().chunkMap.regionManagers) {
                     regionManager.recalculateRegions();
                 }
+                Bukkit.getRegionScheduler().run(new FakePlugin(), worldserver.getWorld(), 0, 0, scheduledTask -> {
+                    CachedWorldData.update(worldserver.getWorld().getName(), worldserver.getCurrentWorldData());
+                });
                 // Paper end
                 worldserver.timings.doTick.stopTiming(); // Spigot
             } catch (Throwable throwable) {
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 91a0e61611579c551955b53524872270125f2cf5..49c9088c365fdc4342b82de7f1ce2cc0b93e7ea4 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -17,6 +17,12 @@ import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import dev.rgbmc.folia.CachedRegionData;
+import io.papermc.paper.threadedregions.RegionizedWorldData;
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
+import io.papermc.paper.threadedregions.TickRegionScheduler;
+import io.papermc.paper.threadedregions.TickRegions;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -847,14 +853,25 @@ public class ServerChunkCache extends ChunkSource {
         // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
         public boolean pollTask() {
             // Folia start - region threading
-            if (ServerChunkCache.this.level != io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegionizedWorldData().world) {
+            RegionizedWorldData regionizedData = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegionizedWorldData();
+            if (regionizedData != null && ServerChunkCache.this.level != regionizedData.world) {
                 throw new IllegalStateException("Polling tasks from non-owned region");
             }
             // Folia end - region threading
             if (ServerChunkCache.this.runDistanceManagerUpdates()) {
                 return true;
             }
-            return io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegion().getData().getTaskQueueData().executeChunkTask(); // Paper - rewrite chunk system // Folia - region threading
+            //return io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegion().getData().getTaskQueueData().executeChunkTask(); // Paper - rewrite chunk system // Folia - region threading
+            ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> data = TickRegionScheduler.getCurrentRegion();
+            if (data != null && CachedRegionData.isCached(data.id)) {
+                CachedRegionData.update(data.id, data);
+                if (!CachedRegionData.isCachedWorld(ServerChunkCache.this.level.serverLevelData.getLevelName())) {
+                    CachedRegionData.updateWorld(ServerChunkCache.this.level.serverLevelData.getLevelName(), data);
+                }
+            } else if (data == null) {
+                return CachedRegionData.getWorld(ServerChunkCache.this.level.serverLevelData.getLevelName()).getData().getTaskQueueData().executeChunkTask();
+            }
+            return data.getData().getTaskQueueData().executeChunkTask();
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 2585589c6c7580f4b32034f8e232a9e3837e2722..ced3dfa5e760c6f9c13058791eefc78928a57288 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1746,12 +1746,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
     }
 
-    @Override
-    public RegionizedWorldData getCurrentWorldData() {
-        if (this.worldRegionData.get() != null)
-            return this.worldRegionData.get();
-        else
-            return super.getCurrentWorldData();
+    public io.papermc.paper.threadedregions.RegionizedWorldData getCurrentWorldData(int chunkX, int chunkZ) {
+        return chunkTaskScheduler.isHalted()
+            ? Objects.requireNonNull(regioniser.getRegionAtUnsynchronised(chunkX, chunkZ), "Chunk was not present on world activity halt")
+            .getData().getDataAfterHalt(worldRegionData)
+            : getCurrentWorldData();
     }
 
     public boolean tryAddFreshEntityWithPassengers(Entity entity) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 66d7a93732b96b6aedfae3e151e25dd6fa3ab074..b38741eb397067b84264f1f4e9962798ce32c87f 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -16,6 +16,7 @@ import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 
+import dev.rgbmc.folia.CachedWorldData;
 import io.papermc.paper.threadedregions.RegionizedData;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -281,15 +282,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public io.papermc.paper.threadedregions.RegionizedWorldData getCurrentWorldData() {
         io.papermc.paper.threadedregions.RegionizedWorldData ret = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegionizedWorldData();
         if (ret == null) {
-            try{
-                ret = worldRegionData.get();
-                if (ret == null)
-                    return ret;
-            } catch (Exception e) {
-                MinecraftServer.LOGGER.error("Failed to get current world data!", e);
-                return null;
-            }
+            return CachedWorldData.get(world.getName());
         }
+        CachedWorldData.update(world.getName(), ret);
         Level world = ret.world;
         if (world != this) {
             throw new IllegalStateException("World mismatch: expected " + this.getWorld().getName() + " but got " + world.getWorld().getName());
