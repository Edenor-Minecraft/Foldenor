From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Tue, 20 Jun 2023 15:27:54 +0400
Subject: [PATCH] Attemp-to-fix-returning-null-world-data


diff --git a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
index ee9f5e1f3387998cddbeb1dc6dc6e2b1ea7cd670..30908ec1190b82d9b31a3e7e6e1289b046e794fc 100644
--- a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
@@ -107,6 +107,8 @@ public final class TickRegionScheduler {
         if (!(currThread instanceof TickThreadRunner tickThreadRunner)) {
             return RegionShutdownThread.getWorldData();
         }
+        if (((TickThreadRunner) currThread).currentTickingWorldRegionizedData != null)
+            return ((TickThreadRunner) currThread).currentTickingWorldRegionizedData;
         return tickThreadRunner.currentTickingWorldRegionizedData;
     }
 
diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index 965f544e2714c17348610587751a711484dad5e0..493f7155e9ccc902af64e72a1ca7409859aa8d1d 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -136,10 +136,19 @@ public class TickThread extends Thread {
     }
 
     public static boolean isTickThreadFor(final ServerLevel world, final int chunkX, final int chunkZ) {
-        final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
+        ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
             TickRegionScheduler.getCurrentRegion();
         if (region == null) {
-            return isShutdownThread();
+            try{
+                region = world.regioniser.getRegionAtSynchronised(chunkX, chunkZ);
+                if (region == null){
+                    MinecraftServer.LOGGER.warn("Region at position [" + chunkX + ", " + chunkZ + "] is null!");
+                    return isShutdownThread();
+                }
+            } catch (Exception e) {
+                MinecraftServer.LOGGER.warn("Region at position [" + chunkX + ", " + chunkZ + "] is null!");
+                return isShutdownThread();
+            }
         }
         return world.regioniser.getRegionAtUnsynchronised(chunkX, chunkZ) == region;
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 12d1e4644ddfedb1af63603c80b93fb97fb0cede..1d54c1de4d0b059d5b752ed6d9e9d99a593e398d 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -6,6 +6,8 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.threadedregions.RegionizedWorldData;
+import io.papermc.paper.threadedregions.TickRegionScheduler;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
@@ -1729,9 +1731,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
         } else {
             if (entity instanceof net.minecraft.world.entity.item.ItemEntity itemEntity && itemEntity.getItem().isEmpty()) return false; // Paper - Prevent empty items from being added
             // Paper start - capture all item additions to the world
-            if (this.getCurrentWorldData().captureDrops != null && entity instanceof net.minecraft.world.entity.item.ItemEntity) { // Folia - region threading
-                this.getCurrentWorldData().captureDrops.add((net.minecraft.world.entity.item.ItemEntity) entity); // Folia - region threading
-                return true;
+            if (this.getCurrentWorldData() != null){
+                if (this.getCurrentWorldData().captureDrops != null && entity instanceof net.minecraft.world.entity.item.ItemEntity) { // Folia - region threading
+                    this.getCurrentWorldData().captureDrops.add((net.minecraft.world.entity.item.ItemEntity) entity); // Folia - region threading
+                    return true;
+                }
             }
             // Paper end
             // SPIGOT-6415: Don't call spawn event when reason is null. For example when an entity teleports to a new world.
@@ -1744,6 +1748,14 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
     }
 
+    @Override
+    public RegionizedWorldData getCurrentWorldData() {
+        if (this.worldRegionData.get() != null)
+            return this.worldRegionData.get();
+        else
+            return super.getCurrentWorldData();
+    }
+
     public boolean tryAddFreshEntityWithPassengers(Entity entity) {
         // CraftBukkit start
         return this.tryAddFreshEntityWithPassengers(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 4338b948a53d32cac5c780cbd43c6ca1cc5d11e5..f5c48e8fc6bf202b5e05edd1d6d128b10f9a9628 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -273,7 +273,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public final java.util.concurrent.ConcurrentHashMap.KeySetView<net.minecraft.server.level.ChunkHolder, Boolean> needsChangeBroadcasting = java.util.concurrent.ConcurrentHashMap.newKeySet();
 
     public io.papermc.paper.threadedregions.RegionizedWorldData getCurrentWorldData() {
-        final io.papermc.paper.threadedregions.RegionizedWorldData ret = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegionizedWorldData();
+        io.papermc.paper.threadedregions.RegionizedWorldData ret = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegionizedWorldData();
         if (ret == null) {
             return ret;
         }
