From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Sun, 16 Jul 2023 12:15:12 +0400
Subject: [PATCH] Unfuck-secure-seed-code


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index c6f1db10b124ef2814574c25a0bc0a35174fe72d..4278025f38271b3733883ba1279bf3d6a482bdde 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -55,7 +55,7 @@ import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.dimension.LevelStem;
-import net.minecraft.world.level.levelgen.NewWorldOptions;
+import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
 import net.minecraft.world.level.storage.*;
@@ -234,28 +234,28 @@ public class Main {
             AtomicReference<WorldLoader.DataLoadContext> worldLoader = new AtomicReference<>();
             // CraftBukkit end
 
-            NewWorldStem worldstem;
+            WorldStem worldstem;
 
             try {
                 WorldLoader.InitConfig worldloader_c = Main.loadOrCreateConfig(dedicatedserversettings.getProperties(), convertable_conversionsession, flag, resourcepackrepository);
 
-                worldstem = (NewWorldStem) Util.blockUntilDone((executor) -> {
+                worldstem = (WorldStem) Util.blockUntilDone((executor) -> {
                     return WorldLoader.load(worldloader_c, (worldloader_a) -> {
                         worldLoader.set(worldloader_a); // CraftBukkit
                         Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
                         DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-                        Pair<NewWorldData, WorldDimensions.Complete> pair = convertable_conversionsession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+                        Pair<WorldData, WorldDimensions.Complete> pair = convertable_conversionsession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
                         if (pair != null) {
-                            return new WorldLoader.DataLoadOutput<>((NewWorldData) pair.getFirst(), ((WorldDimensions.Complete) pair.getSecond()).dimensionsRegistryAccess());
+                            return new WorldLoader.DataLoadOutput<>((WorldData) pair.getFirst(), ((WorldDimensions.Complete) pair.getSecond()).dimensionsRegistryAccess());
                         } else {
                             LevelSettings worldsettings;
-                            NewWorldOptions worldoptions;
+                            WorldOptions worldoptions;
                             WorldDimensions worlddimensions;
 
                             if (optionset.has("demo")) { // CraftBukkit
                                 worldsettings = MinecraftServer.DEMO_SETTINGS;
-                                worldoptions = NewWorldOptions.DEMO_OPTIONS;
+                                worldoptions = WorldOptions.DEMO_OPTIONS;
                                 worlddimensions = WorldPresets.createNormalWorldDimensions(worldloader_a.datapackWorldgen());
                             } else {
                                 DedicatedServerProperties dedicatedserverproperties = dedicatedserversettings.getProperties();
@@ -270,7 +270,7 @@ public class Main {
 
                             return new WorldLoader.DataLoadOutput<>(new PrimaryLevelData(worldsettings, worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle), worlddimensions_b.dimensionsRegistryAccess());
                         }
-                    }, NewWorldStem::new, Util.backgroundExecutor(), executor);
+                    }, WorldStem::new, Util.backgroundExecutor(), executor);
                 }).get();
             } catch (Exception exception) {
                 Main.LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", exception);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5f7bae9a8f926c6299586ed38abcd52cda275ef0..fe114b5d99d5ad80bf1afa50730e86e2d71c4b65 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -273,7 +273,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private String serverId;
     public MinecraftServer.ReloadableResources resources;
     private final StructureTemplateManager structureTemplateManager;
-    protected NewWorldData worldData;
+    protected WorldData worldData;
     private volatile boolean isSaving;
 
     // CraftBukkit start
@@ -351,7 +351,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return s0;
     }
 
-    public MinecraftServer(OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, NewWorldStem worldstem, Proxy proxy, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
+    public MinecraftServer(OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, Proxy proxy, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
         super("Server");
         SERVER = this; // Paper - better singleton
         this.metricsRecorder = InactiveMetricsRecorder.INSTANCE;
@@ -371,7 +371,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.customBossEvents = new CustomBossEvents();
         this.frameTimer = new FrameTimer();
         this.registries = worldstem.registries();
-        this.worldData = (NewWorldData) worldstem.worldData();
+        this.worldData = worldstem.worldData();
         if (false && !this.registries.compositeAccess().registryOrThrow(Registries.LEVEL_STEM).containsKey(LevelStem.OVERWORLD)) { // CraftBukkit - initialised later
             throw new IllegalStateException("Missing Overworld dimension data");
         } else {
@@ -544,7 +544,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             WorldLoader.DataLoadContext worldloader_a = this.worldLoader;
             Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
             DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-            Pair<NewWorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+            Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
             if (pair != null) {
                 worlddata = (PrimaryLevelData) pair.getFirst();
@@ -568,7 +568,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 WorldDimensions.Complete worlddimensions_b = worlddimensions.bake(iregistry);
                 Lifecycle lifecycle = worlddimensions_b.lifecycle().add(worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
-                worlddata = new PrimaryLevelData(worldsettings, (NewWorldOptions) worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle);
+                worlddata = new PrimaryLevelData(worldsettings, (WorldOptions) worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle);
             }
             worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
             // Paper - move down
@@ -596,7 +596,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             ResourceKey<Level> worldKey = ResourceKey.create(Registries.DIMENSION, dimensionKey.location());
 
             if (dimensionKey == LevelStem.OVERWORLD) {
-                this.worldData = (NewWorldData) worlddata;
+                this.worldData = worlddata;
                 this.worldData.setGameType(((DedicatedServer) this).getProperties().gamemode); // From DedicatedServer.init
 
                 ChunkProgressListener worldloadlistener = this.progressListenerFactory.create(11);
@@ -2695,7 +2695,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.structureTemplateManager;
     }
 
-    public NewWorldData getWorldData() {
+    public WorldData getWorldData() {
         return this.worldData;
     }
 
diff --git a/src/main/java/net/minecraft/server/NewWorldStem.java b/src/main/java/net/minecraft/server/NewWorldStem.java
deleted file mode 100644
index 1e2bf9afa5eb9ce4588406c17f64fe44c71bbd32..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/server/NewWorldStem.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.minecraft.server;
-
-import net.minecraft.core.LayeredRegistryAccess;
-import net.minecraft.server.packs.resources.CloseableResourceManager;
-import net.minecraft.world.level.storage.NewWorldData;
-
-public record NewWorldStem(CloseableResourceManager resourceManager, ReloadableServerResources dataPackResources, LayeredRegistryAccess<RegistryLayer> registries, NewWorldData worldData) implements AutoCloseable {
-    @Override
-    public void close() {
-        this.resourceManager.close();
-    }
-}
-
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 9a54ac425b46c756c05ca64c571b5bca5278f68f..2430a891edb02ac1f0109a75ad4fe04543b4fa24 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -73,7 +73,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     private final TextFilterClient textFilterClient;
 
     // CraftBukkit start - Signature changed
-    public DedicatedServer(joptsimple.OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, NewWorldStem worldstem, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
+    public DedicatedServer(joptsimple.OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
         super(options, worldLoader, thread, convertable_conversionsession, resourcepackrepository, worldstem, Proxy.NO_PROXY, datafixer, services, worldloadlistenerfactory);
         // CraftBukkit end
         this.settings = dedicatedserversettings;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index fb4994cae07f08a44bc2741db4f98992251586c6..469b92ee1a1ce07b57fb6dd108a1d9436ff1bf93 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -38,7 +38,6 @@ import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.levelgen.FlatLevelSource;
-import net.minecraft.world.level.levelgen.NewWorldOptions;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
@@ -109,7 +108,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
     public final Settings<DedicatedServerProperties>.MutableValue<Boolean> whiteList;
     public final boolean enforceSecureProfile;
     private final DedicatedServerProperties.WorldDimensionData worldDimensionData;
-    public final NewWorldOptions worldOptions;
+    public final WorldOptions worldOptions;
 
     public final boolean enableNonFoliaPlugins = this.get("enableNonFoliaPlugins", true);
 
@@ -172,7 +171,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
             featureSeed = Globals.parseSeed(featureSeedString).orElseGet(Globals::createRandomWorldSeed);
         }
 
-        this.worldOptions = new NewWorldOptions(i, featureSeed, flag, false);
+        this.worldOptions = new WorldOptions(i, featureSeed, flag, false);
         this.worldDimensionData = new DedicatedServerProperties.WorldDimensionData((JsonObject) this.get("generator-settings", (s1) -> {
             return GsonHelper.parse(!s1.isEmpty() ? s1 : "{}");
         }, new JsonObject()), (String) this.get("level-type", (s1) -> {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NewWorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NewWorldGenSettings.java
deleted file mode 100644
index b2cc28c1e18ef349ee1de1b7e74d695a1e791261..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/world/level/levelgen/NewWorldGenSettings.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package net.minecraft.world.level.levelgen;
-
-import com.mojang.serialization.Codec;
-import com.mojang.serialization.DataResult;
-import com.mojang.serialization.DynamicOps;
-import com.mojang.serialization.codecs.RecordCodecBuilder;
-import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.registries.Registries;
-
-public record NewWorldGenSettings(NewWorldOptions options, WorldDimensions dimensions) {
-    public static final Codec<NewWorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> {
-        return instance.group(NewWorldOptions.CODEC.forGetter(NewWorldGenSettings::options), WorldDimensions.CODEC.forGetter(NewWorldGenSettings::dimensions)).apply(instance, instance.stable(NewWorldGenSettings::new));
-    });
-
-    public static <T> DataResult<T> encode(DynamicOps<T> registryOps, NewWorldOptions generatorOptions, WorldDimensions dimensionOptionsRegistryHolder) {
-        return CODEC.encodeStart(registryOps, new NewWorldGenSettings(generatorOptions, dimensionOptionsRegistryHolder));
-    }
-
-    public static <T> DataResult<T> encode(DynamicOps<T> registryOps, NewWorldOptions generatorOptions, RegistryAccess dynamicRegistryManager) {
-        return encode(registryOps, generatorOptions, new WorldDimensions(dynamicRegistryManager.registryOrThrow(Registries.LEVEL_STEM)));
-    }
-}
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NewWorldOptions.java b/src/main/java/net/minecraft/world/level/levelgen/NewWorldOptions.java
deleted file mode 100644
index 58ca557eee3c08e1c9ee4eb25830cd2d412023e1..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/world/level/levelgen/NewWorldOptions.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package net.minecraft.world.level.levelgen;
-
-import com.mojang.serialization.Codec;
-import com.mojang.serialization.MapCodec;
-import com.mojang.serialization.codecs.RecordCodecBuilder;
-import net.minecraft.util.RandomSource;
-import org.apache.commons.lang3.StringUtils;
-
-import java.util.Optional;
-import java.util.OptionalLong;
-
-import java.util.stream.LongStream;
-import net.edenor.foldenor.secureseed.Globals;
-
-public class NewWorldOptions extends WorldOptions {
-    public static final MapCodec<NewWorldOptions> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(NewWorldOptions::seed),
-           Codec.LONG_STREAM.fieldOf("feature_seed").stable().forGetter(NewWorldOptions::featureSeedStream),
-           Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(NewWorldOptions::generateStructures),
-           Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(NewWorldOptions::generateBonusChest),
-           Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((generatorOptions) -> {
-                return generatorOptions.legacyCustomOptions1;
-        })).apply(instance, instance.stable(NewWorldOptions::new));
-    });
-    public static final NewWorldOptions DEMO_OPTIONS = new NewWorldOptions((long)"North Carolina".hashCode(), Globals.createRandomWorldSeed(), true, true);
-    private final long[] featureSeed;
-
-    private final long seed1;
-    private final boolean generateStructures1;
-    private final boolean generateBonusChest1;
-    private final Optional<String> legacyCustomOptions1;
-
-    public NewWorldOptions(long seed, long[] featureSeed, boolean generateStructures, boolean bonusChest) {
-        this(seed, featureSeed, generateStructures, bonusChest, Optional.empty());
-    }
-
-    private NewWorldOptions(long seed, LongStream featureSeed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
-         this(seed, featureSeed.toArray(), generateStructures, bonusChest, legacyCustomOptions);
-    }
-    public static NewWorldOptions defaultWithRandomSeed() {
-        return new NewWorldOptions(randomSeed(), Globals.createRandomWorldSeed(), true, false);
-    }
-
-    private NewWorldOptions(long seed, long[] featureSeed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
-        super(seed, generateStructures, bonusChest);
-        this.featureSeed = featureSeed;
-        this.seed1 = seed;
-        this.generateBonusChest1 = bonusChest;
-        this.legacyCustomOptions1 = legacyCustomOptions;
-        this.generateStructures1 = generateStructures;
-    }
-
-    public long[] featureSeed() {
-        return this.featureSeed;
-    }
-
-    public LongStream featureSeedStream() {
-        return LongStream.of(this.featureSeed);
-    }
-
-    public NewWorldOptions withBonusChest(boolean bonusChest) {
-        return new NewWorldOptions(this.seed1, this.featureSeed, this.generateStructures1, bonusChest, this.legacyCustomOptions1);
-    }
-
-    public NewWorldOptions withStructures(boolean structures) {
-        return new NewWorldOptions(this.seed1, this.featureSeed, structures, this.generateBonusChest1, this.legacyCustomOptions1);
-    }
-
-    public NewWorldOptions withSeed(OptionalLong seed) {
-        return new NewWorldOptions(seed.orElse(randomSeed()), Globals.createRandomWorldSeed(), this.generateStructures1, this.generateBonusChest1, this.legacyCustomOptions1);
-    }
-
-    public static OptionalLong parseSeed(String seed) {
-        seed = seed.trim();
-        if (StringUtils.isEmpty(seed)) {
-            return OptionalLong.empty();
-        } else {
-            try {
-                return OptionalLong.of(Long.parseLong(seed));
-            } catch (NumberFormatException var2) {
-                return OptionalLong.of((long)seed.hashCode());
-            }
-        }
-    }
-
-    public static long randomSeed() {
-        return RandomSource.create().nextLong();
-    }
-}
-
-
-
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldOptions.java b/src/main/java/net/minecraft/world/level/levelgen/WorldOptions.java
index d38cabc9eeb45dd863e5f87b7df3b6327ea6a4a2..16176376ece787f3d7795739d86abdf1455f5c07 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldOptions.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldOptions.java
@@ -8,33 +8,53 @@ import java.util.OptionalLong;
 import net.minecraft.util.RandomSource;
 import org.apache.commons.lang3.StringUtils;
 
+import java.util.stream.LongStream;
+import net.edenor.foldenor.secureseed.Globals;
+
 public class WorldOptions {
     public static final MapCodec<WorldOptions> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldOptions::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldOptions::generateStructures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldOptions::generateBonusChest), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((generatorOptions) -> {
-            return generatorOptions.legacyCustomOptions;
+        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldOptions::seed),
+            Codec.LONG_STREAM.fieldOf("feature_seed").stable().forGetter(WorldOptions::featureSeedStream),
+            Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldOptions::generateStructures),
+            Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldOptions::generateBonusChest),
+            Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((generatorOptions) -> {return generatorOptions.legacyCustomOptions;
         })).apply(instance, instance.stable(WorldOptions::new));
     });
-    public static final WorldOptions DEMO_OPTIONS = new WorldOptions((long)"North Carolina".hashCode(), true, true);
+    public static final WorldOptions DEMO_OPTIONS = new WorldOptions((long)"North Carolina".hashCode(), Globals.createRandomWorldSeed(), true, true);
     private final long seed;
     private final boolean generateStructures;
     private final boolean generateBonusChest;
     private final Optional<String> legacyCustomOptions;
+    private final long[] featureSeed;
 
-    public WorldOptions(long seed, boolean generateStructures, boolean bonusChest) {
-        this(seed, generateStructures, bonusChest, Optional.empty());
+    public WorldOptions(long seed, long[] featureSeed, boolean generateStructures, boolean bonusChest) {
+        this(seed, featureSeed, generateStructures, bonusChest, Optional.empty());
     }
 
     public static WorldOptions defaultWithRandomSeed() {
-        return new WorldOptions(randomSeed(), true, false);
+        return new WorldOptions(randomSeed(), Globals.createRandomWorldSeed(), true, false);
+    }
+
+    private WorldOptions(long seed, LongStream featureSeed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
+        this(seed, featureSeed.toArray(), generateStructures, bonusChest, legacyCustomOptions);
     }
 
-    private WorldOptions(long seed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
+    private WorldOptions(long seed, long[] featureSeed, boolean generateStructures, boolean bonusChest, Optional<String> legacyCustomOptions) {
+        this.featureSeed = featureSeed;
         this.seed = seed;
         this.generateStructures = generateStructures;
         this.generateBonusChest = bonusChest;
         this.legacyCustomOptions = legacyCustomOptions;
     }
 
+    public long[] featureSeed() {
+        return this.featureSeed;
+    }
+
+    public LongStream featureSeedStream() {
+        return LongStream.of(this.featureSeed);
+    }
+
     public long seed() {
         return this.seed;
     }
@@ -52,15 +72,15 @@ public class WorldOptions {
     }
 
     public WorldOptions withBonusChest(boolean bonusChest) {
-        return new WorldOptions(this.seed, this.generateStructures, bonusChest, this.legacyCustomOptions);
+        return new WorldOptions(this.seed, this.featureSeed, this.generateStructures, bonusChest, this.legacyCustomOptions);
     }
 
     public WorldOptions withStructures(boolean structures) {
-        return new WorldOptions(this.seed, structures, this.generateBonusChest, this.legacyCustomOptions);
+        return new WorldOptions(this.seed, this.featureSeed, structures, this.generateBonusChest, this.legacyCustomOptions);
     }
 
     public WorldOptions withSeed(OptionalLong seed) {
-        return new WorldOptions(seed.orElse(randomSeed()), this.generateStructures, this.generateBonusChest, this.legacyCustomOptions);
+        return new WorldOptions(seed.orElse(randomSeed()), Globals.createRandomWorldSeed(), this.generateStructures, this.generateBonusChest, this.legacyCustomOptions);
     }
 
     public static OptionalLong parseSeed(String seed) {
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index aba29a5e8de1a15bafd12b72ba8008118875db0d..d2eb60d8db417e692079a80580b525930936cebc 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -65,8 +65,8 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.dimension.LevelStem;
-import net.minecraft.world.level.levelgen.NewWorldGenSettings;
-import net.minecraft.world.level.levelgen.NewWorldOptions;
+import net.minecraft.world.level.levelgen.WorldGenSettings;
+import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import net.minecraft.world.level.validation.ContentValidationException;
@@ -142,7 +142,7 @@ public class LevelStorageSource {
         return new LevelStorageSource(path, path.resolve("../backups"), directoryvalidator, DataFixers.getDataFixer());
     }
 
-    private static <T> DataResult<NewWorldGenSettings> readWorldGenSettings(Dynamic<T> levelData, DataFixer dataFixer, int version) {
+    private static <T> DataResult<WorldGenSettings> readWorldGenSettings(Dynamic<T> levelData, DataFixer dataFixer, int version) {
         Dynamic<T> dynamic1 = levelData.get("NewWorldGenSettings").orElseEmptyMap();
         UnmodifiableIterator unmodifiableiterator = LevelStorageSource.OLD_SETTINGS_KEYS.iterator();
 
@@ -157,7 +157,7 @@ public class LevelStorageSource {
 
         Dynamic<T> dynamic2 = DataFixTypes.WORLD_GEN_SETTINGS.updateToCurrentVersion(dataFixer, dynamic1, version);
 
-        return NewWorldGenSettings.CODEC.parse(dynamic2);
+        return WorldGenSettings.CODEC.parse(dynamic2);
     }
 
     private static WorldDataConfiguration readDataConfig(Dynamic<?> dynamic) {
@@ -315,7 +315,7 @@ public class LevelStorageSource {
             Logger logger = LevelStorageSource.LOGGER;
 
             Objects.requireNonNull(logger);
-            NewWorldGenSettings generatorsettings = (NewWorldGenSettings) dataresult.getOrThrow(false, Util.prefix("NewWorldGenSettings: ", logger::error));
+            WorldGenSettings generatorsettings = (WorldGenSettings) dataresult.getOrThrow(false, Util.prefix("NewWorldGenSettings: ", logger::error));
             LevelVersion levelversion = LevelVersion.parse(dynamic);
             LevelSettings worldsettings = LevelSettings.parse(dynamic, dataConfiguration);
             WorldDimensions.Complete worlddimensions_b = generatorsettings.dimensions().bake(dimensionOptionsRegistry);
@@ -548,7 +548,7 @@ public class LevelStorageSource {
         }
 
         @Nullable
-        public Pair<NewWorldData, WorldDimensions.Complete> getDataTag(DynamicOps<Tag> ops, WorldDataConfiguration dataConfiguration, Registry<LevelStem> dimensionOptionsRegistry, Lifecycle lifecycle) {
+        public Pair<WorldData, WorldDimensions.Complete> getDataTag(DynamicOps<Tag> ops, WorldDataConfiguration dataConfiguration, Registry<LevelStem> dimensionOptionsRegistry, Lifecycle lifecycle) {
             this.checkLock();
             return (Pair) LevelStorageSource.this.readLevelData(this.levelDirectory, LevelStorageSource.getLevelData(ops, dataConfiguration, dimensionOptionsRegistry, lifecycle));
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/NewWorldData.java b/src/main/java/net/minecraft/world/level/storage/NewWorldData.java
deleted file mode 100644
index f7ee0eeb6b29aafeb62879b2eba3a9a2dd81d1c5..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/world/level/storage/NewWorldData.java
+++ /dev/null
@@ -1,114 +0,0 @@
-package net.minecraft.world.level.storage;
-
-import com.mojang.serialization.Lifecycle;
-import java.util.Locale;
-import java.util.Set;
-import javax.annotation.Nullable;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.core.RegistryAccess;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.world.Difficulty;
-import net.minecraft.world.flag.FeatureFlagSet;
-import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.LevelSettings;
-import net.minecraft.world.level.WorldDataConfiguration;
-import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.levelgen.NewWorldOptions;
-import net.minecraft.world.level.levelgen.WorldOptions;
-
-public interface NewWorldData extends WorldData {
-    int ANVIL_VERSION_ID = 19133;
-    int MCREGION_VERSION_ID = 19132;
-
-    WorldDataConfiguration getDataConfiguration();
-
-    void setDataConfiguration(WorldDataConfiguration dataConfiguration);
-
-    boolean wasModded();
-
-    Set<String> getKnownServerBrands();
-
-    Set<String> getRemovedFeatureFlags();
-
-    void setModdedInfo(String brand, boolean modded);
-
-    default void fillCrashReportCategory(CrashReportCategory section) {
-        section.setDetail("Known server brands", () -> {
-            return String.join(", ", this.getKnownServerBrands());
-        });
-        section.setDetail("Removed feature flags", () -> {
-            return String.join(", ", this.getRemovedFeatureFlags());
-        });
-        section.setDetail("Level was modded", () -> {
-            return Boolean.toString(this.wasModded());
-        });
-        section.setDetail("Level storage version", () -> {
-            int i = this.getVersion();
-            return String.format(Locale.ROOT, "0x%05X - %s", i, this.getStorageVersionName(i));
-        });
-    }
-
-    default String getStorageVersionName(int id) {
-        switch (id) {
-            case 19132:
-                return "McRegion";
-            case 19133:
-                return "Anvil";
-            default:
-                return "Unknown?";
-        }
-    }
-
-    @Nullable
-    CompoundTag getCustomBossEvents();
-
-    void setCustomBossEvents(@Nullable CompoundTag customBossEvents);
-
-    ServerLevelData overworldData();
-
-    LevelSettings getLevelSettings();
-
-    CompoundTag createTag(RegistryAccess registryManager, @Nullable CompoundTag playerNbt);
-
-    boolean isHardcore();
-
-    int getVersion();
-
-    String getLevelName();
-
-    GameType getGameType();
-
-    void setGameType(GameType gameMode);
-
-    boolean getAllowCommands();
-
-    Difficulty getDifficulty();
-
-    void setDifficulty(Difficulty difficulty);
-
-    boolean isDifficultyLocked();
-
-    void setDifficultyLocked(boolean difficultyLocked);
-
-    GameRules getGameRules();
-
-    @Nullable
-    CompoundTag getLoadedPlayerTag();
-
-    EndDragonFight.Data endDragonFightData();
-
-    void setEndDragonFightData(EndDragonFight.Data dragonFight);
-
-    NewWorldOptions worldGenOptions();
-
-    boolean isFlatWorld();
-
-    boolean isDebugWorld();
-
-    Lifecycle worldGenSettingsLifecycle();
-
-    default FeatureFlagSet enabledFeatures() {
-        return this.getDataConfiguration().enabledFeatures();
-    }
-}
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index f4bc076b209fb5e85a0ac670e0d0463a5740c632..bab42913e64ba2ded44b639f6b71e4185632a1c5 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -37,8 +37,7 @@ import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.levelgen.NewWorldGenSettings;
-import net.minecraft.world.level.levelgen.NewWorldOptions;
+import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.timers.TimerCallbacks;
 import net.minecraft.world.level.timers.TimerQueue;
 import org.slf4j.Logger;
@@ -57,13 +56,13 @@ import org.bukkit.event.weather.ThunderChangeEvent;
 import org.bukkit.event.weather.WeatherChangeEvent;
 // CraftBukkit end
 
-public class PrimaryLevelData implements ServerLevelData, NewWorldData {
+public class PrimaryLevelData implements ServerLevelData, WorldData {
 
     private static final Logger LOGGER = LogUtils.getLogger();
     protected static final String PLAYER = "Player";
     protected static final String WORLD_GEN_SETTINGS = "NewWorldGenSettings";
     public LevelSettings settings;
-    private final NewWorldOptions worldOptions;
+    private final WorldOptions worldOptions;
     private final PrimaryLevelData.SpecialWorldProperty specialWorldProperty;
     private final Lifecycle worldGenSettingsLifecycle;
     private int xSpawn;
@@ -113,7 +112,7 @@ public class PrimaryLevelData implements ServerLevelData, NewWorldData {
     }
     // CraftBukkit end
 
-    private PrimaryLevelData(@Nullable DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, boolean modded, int spawnX, int spawnY, int spawnZ, float spawnAngle, long time, long timeOfDay, int version, int clearWeatherTime, int rainTime, boolean raining, int thunderTime, boolean thundering, boolean initialized, boolean difficultyLocked, WorldBorder.Settings worldBorder, int wanderingTraderSpawnDelay, int wanderingTraderSpawnChance, @Nullable UUID wanderingTraderId, Set<String> serverBrands, Set<String> removedFeatures, TimerQueue<MinecraftServer> scheduledEvents, @Nullable CompoundTag customBossEvents, EndDragonFight.Data dragonFight, LevelSettings levelInfo, NewWorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty specialProperty, Lifecycle lifecycle) {
+    private PrimaryLevelData(@Nullable DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, boolean modded, int spawnX, int spawnY, int spawnZ, float spawnAngle, long time, long timeOfDay, int version, int clearWeatherTime, int rainTime, boolean raining, int thunderTime, boolean thundering, boolean initialized, boolean difficultyLocked, WorldBorder.Settings worldBorder, int wanderingTraderSpawnDelay, int wanderingTraderSpawnChance, @Nullable UUID wanderingTraderId, Set<String> serverBrands, Set<String> removedFeatures, TimerQueue<MinecraftServer> scheduledEvents, @Nullable CompoundTag customBossEvents, EndDragonFight.Data dragonFight, LevelSettings levelInfo, WorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty specialProperty, Lifecycle lifecycle) {
         this.fixerUpper = dataFixer;
         this.wasModded = modded;
         this.xSpawn = spawnX;
@@ -147,11 +146,11 @@ public class PrimaryLevelData implements ServerLevelData, NewWorldData {
         this.worldGenSettingsLifecycle = lifecycle;
     }
 
-    public PrimaryLevelData(LevelSettings levelInfo, NewWorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty specialProperty, Lifecycle lifecycle) {
+    public PrimaryLevelData(LevelSettings levelInfo, WorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty specialProperty, Lifecycle lifecycle) {
         this((DataFixer) null, SharedConstants.getCurrentVersion().getDataVersion().getVersion(), (CompoundTag) null, false, 0, 0, 0, 0.0F, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, (UUID) null, Sets.newLinkedHashSet(), new HashSet(), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS), (CompoundTag) null, EndDragonFight.Data.DEFAULT, levelInfo.copy(), generatorOptions, specialProperty, lifecycle);
     }
 
-    public static <T> PrimaryLevelData parse(Dynamic<T> dynamic, DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, LevelSettings levelInfo, LevelVersion saveVersionInfo, PrimaryLevelData.SpecialWorldProperty specialProperty, NewWorldOptions generatorOptions, Lifecycle lifecycle) {
+    public static <T> PrimaryLevelData parse(Dynamic<T> dynamic, DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, LevelSettings levelInfo, LevelVersion saveVersionInfo, PrimaryLevelData.SpecialWorldProperty specialProperty, WorldOptions generatorOptions, Lifecycle lifecycle) {
         long j = dynamic.get("Time").asLong(0L);
         boolean flag = dynamic.get("WasModded").asBoolean(false);
         int k = dynamic.get("SpawnX").asInt(0);
@@ -215,7 +214,7 @@ public class PrimaryLevelData implements ServerLevelData, NewWorldData {
         levelNbt.put("Version", nbttagcompound2);
         NbtUtils.addCurrentDataVersion(levelNbt);
         DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) registryManager);
-        DataResult<Tag> dataresult = NewWorldGenSettings.encode(dynamicops, this.worldOptions, new WorldDimensions(this.customDimensions != null ? this.customDimensions : registryManager.registryOrThrow(Registries.LEVEL_STEM))); // CraftBukkit
+        DataResult<Tag> dataresult = WorldGenSettings.encode(dynamicops, this.worldOptions, new WorldDimensions(this.customDimensions != null ? this.customDimensions : registryManager.registryOrThrow(Registries.LEVEL_STEM))); // CraftBukkit
         Logger logger = PrimaryLevelData.LOGGER;
 
         Objects.requireNonNull(logger);
@@ -546,11 +545,11 @@ public class PrimaryLevelData implements ServerLevelData, NewWorldData {
     @Override
     public void fillCrashReportCategory(CrashReportCategory reportSection, LevelHeightAccessor world) {
         ServerLevelData.super.fillCrashReportCategory(reportSection, world);
-        NewWorldData.super.fillCrashReportCategory(reportSection);
+        WorldData.super.fillCrashReportCategory(reportSection);
     }
 
     @Override
-    public NewWorldOptions worldGenOptions() {
+    public WorldOptions worldGenOptions() {
         return this.worldOptions;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 145428f15f1489f170849b27cfed4a8d03b7441a..55489e8bcc88e09d6210fe392f851a840c656dce 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -44,6 +44,7 @@ import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 
 import net.edenor.foldenor.config.FoldenorConfig;
+import net.edenor.foldenor.secureseed.Globals;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -1332,14 +1333,14 @@ public final class CraftServer implements Server {
         WorldLoader.DataLoadContext worldloader_a = console.worldLoader;
         net.minecraft.core.Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
         DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-        Pair<NewWorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+        Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
         if (pair != null) {
             worlddata = (PrimaryLevelData) pair.getFirst();
             iregistry = pair.getSecond().dimensions();
         } else {
             LevelSettings worldsettings;
-            WorldOptions worldoptions = new WorldOptions(creator.seed(), creator.generateStructures(), false);
+            WorldOptions worldoptions = new WorldOptions(creator.seed(), Globals.createRandomWorldSeed() , creator.generateStructures(), false);
             WorldDimensions worlddimensions;
 
             DedicatedServerProperties.WorldDimensionData properties = new DedicatedServerProperties.WorldDimensionData(GsonHelper.parse((creator.generatorSettings().isEmpty()) ? "{}" : creator.generatorSettings()), creator.type().name().toLowerCase(Locale.ROOT));
@@ -1350,7 +1351,7 @@ public final class CraftServer implements Server {
             WorldDimensions.Complete worlddimensions_b = worlddimensions.bake(iregistry);
             Lifecycle lifecycle = worlddimensions_b.lifecycle().add(worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
-            worlddata = new PrimaryLevelData(worldsettings, (NewWorldOptions) worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle);
+            worlddata = new PrimaryLevelData(worldsettings, worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle);
             iregistry = worlddimensions_b.dimensions();
         }
         worlddata.customDimensions = iregistry;
