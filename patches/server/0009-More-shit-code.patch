From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Mon, 12 Jun 2023 12:39:14 +0400
Subject: [PATCH] More-shit-code


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index d031e34edd0b5e9af6901f86961601f2a4f6c977..8fb6abe1be994fe50cb1fb02999f93466e9dcf1a 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -59,11 +59,7 @@ import net.minecraft.world.level.levelgen.NewWorldOptions;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
-import net.minecraft.world.level.storage.LevelResource;
-import net.minecraft.world.level.storage.LevelStorageSource;
-import net.minecraft.world.level.storage.LevelSummary;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-import net.minecraft.world.level.storage.WorldData;
+import net.minecraft.world.level.storage.*;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -239,20 +235,20 @@ public class Main {
             AtomicReference<WorldLoader.DataLoadContext> worldLoader = new AtomicReference<>();
             // CraftBukkit end
 
-            WorldStem worldstem;
+            NewWorldStem worldstem;
 
             try {
                 WorldLoader.InitConfig worldloader_c = Main.loadOrCreateConfig(dedicatedserversettings.getProperties(), convertable_conversionsession, flag, resourcepackrepository);
 
-                worldstem = (WorldStem) Util.blockUntilDone((executor) -> {
+                worldstem = (NewWorldStem) Util.blockUntilDone((executor) -> {
                     return WorldLoader.load(worldloader_c, (worldloader_a) -> {
                         worldLoader.set(worldloader_a); // CraftBukkit
                         Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
                         DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-                        Pair<WorldData, WorldDimensions.Complete> pair = convertable_conversionsession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+                        Pair<NewWorldData, WorldDimensions.Complete> pair = convertable_conversionsession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
                         if (pair != null) {
-                            return new WorldLoader.DataLoadOutput<>((WorldData) pair.getFirst(), ((WorldDimensions.Complete) pair.getSecond()).dimensionsRegistryAccess());
+                            return new WorldLoader.DataLoadOutput<>((NewWorldData) pair.getFirst(), ((WorldDimensions.Complete) pair.getSecond()).dimensionsRegistryAccess());
                         } else {
                             LevelSettings worldsettings;
                             NewWorldOptions worldoptions;
@@ -275,7 +271,7 @@ public class Main {
 
                             return new WorldLoader.DataLoadOutput<>(new PrimaryLevelData(worldsettings, worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle), worlddimensions_b.dimensionsRegistryAccess());
                         }
-                    }, WorldStem::new, Util.backgroundExecutor(), executor);
+                    }, NewWorldStem::new, Util.backgroundExecutor(), executor);
                 }).get();
             } catch (Exception exception) {
                 Main.LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", exception);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 819d2f12c506c4dbd3671707deaf319bc5ca8869..cf4f667d8d9411e11286fbdf417700ff5dc3e4f3 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -349,7 +349,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return s0;
     }
 
-    public MinecraftServer(OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, Proxy proxy, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
+    public MinecraftServer(OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, NewWorldStem worldstem, Proxy proxy, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
         super("Server");
         SERVER = this; // Paper - better singleton
         this.metricsRecorder = InactiveMetricsRecorder.INSTANCE;
@@ -542,7 +542,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             WorldLoader.DataLoadContext worldloader_a = this.worldLoader;
             Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
             DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-            Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+            Pair<NewWorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
             if (pair != null) {
                 worlddata = (PrimaryLevelData) pair.getFirst();
diff --git a/src/main/java/net/minecraft/server/NewWorldStem.java b/src/main/java/net/minecraft/server/NewWorldStem.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e2bf9afa5eb9ce4588406c17f64fe44c71bbd32
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NewWorldStem.java
@@ -0,0 +1,13 @@
+package net.minecraft.server;
+
+import net.minecraft.core.LayeredRegistryAccess;
+import net.minecraft.server.packs.resources.CloseableResourceManager;
+import net.minecraft.world.level.storage.NewWorldData;
+
+public record NewWorldStem(CloseableResourceManager resourceManager, ReloadableServerResources dataPackResources, LayeredRegistryAccess<RegistryLayer> registries, NewWorldData worldData) implements AutoCloseable {
+    @Override
+    public void close() {
+        this.resourceManager.close();
+    }
+}
+
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 9eb5fc79add47129efd665bab4758e27b542a413..9754acf12d10aecebce9659799588cda7f3f848a 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -77,7 +77,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     private final TextFilterClient textFilterClient;
 
     // CraftBukkit start - Signature changed
-    public DedicatedServer(joptsimple.OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
+    public DedicatedServer(joptsimple.OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, NewWorldStem worldstem, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
         super(options, worldLoader, thread, convertable_conversionsession, resourcepackrepository, worldstem, Proxy.NO_PROXY, datafixer, services, worldloadlistenerfactory);
         // CraftBukkit end
         this.settings = dedicatedserversettings;
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 830b24c7d02171aab08d76184579195b94bda251..05ef47dfb775ff2197905c57044c826c40d9c606 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -547,7 +547,7 @@ public class LevelStorageSource {
         }
 
         @Nullable
-        public Pair<WorldData, WorldDimensions.Complete> getDataTag(DynamicOps<Tag> ops, WorldDataConfiguration dataConfiguration, Registry<LevelStem> dimensionOptionsRegistry, Lifecycle lifecycle) {
+        public Pair<NewWorldData, WorldDimensions.Complete> getDataTag(DynamicOps<Tag> ops, WorldDataConfiguration dataConfiguration, Registry<LevelStem> dimensionOptionsRegistry, Lifecycle lifecycle) {
             this.checkLock();
             return (Pair) LevelStorageSource.this.readLevelData(this.levelDirectory, LevelStorageSource.getLevelData(ops, dataConfiguration, dimensionOptionsRegistry, lifecycle));
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index 113989246083617277ac38648c4ba1438964cd2a..5746e97fd16a872b8d18ae634e4c95ea5c887e76 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -57,7 +57,7 @@ import org.bukkit.event.weather.ThunderChangeEvent;
 import org.bukkit.event.weather.WeatherChangeEvent;
 // CraftBukkit end
 
-public class PrimaryLevelData implements ServerLevelData, WorldData {
+public class PrimaryLevelData implements ServerLevelData, NewWorldData {
 
     private static final Logger LOGGER = LogUtils.getLogger();
     protected static final String PLAYER = "Player";
@@ -546,7 +546,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
     @Override
     public void fillCrashReportCategory(CrashReportCategory reportSection, LevelHeightAccessor world) {
         ServerLevelData.super.fillCrashReportCategory(reportSection, world);
-        WorldData.super.fillCrashReportCategory(reportSection);
+        NewWorldData.super.fillCrashReportCategory(reportSection);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index f9dad589652d55621902d0d1aea5e4f2c2b1f626..3209a9d8c994fdf191b3eac62eab6b67b93be298 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -105,10 +105,7 @@ import net.minecraft.world.level.levelgen.*;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
-import net.minecraft.world.level.storage.LevelStorageSource;
-import net.minecraft.world.level.storage.PlayerDataStorage;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-import net.minecraft.world.level.storage.WorldData;
+import net.minecraft.world.level.storage.*;
 import net.minecraft.world.level.storage.loot.LootDataManager;
 import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec3;
@@ -1342,7 +1339,7 @@ public final class CraftServer implements Server {
         WorldLoader.DataLoadContext worldloader_a = console.worldLoader;
         net.minecraft.core.Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
         DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-        Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+        Pair<NewWorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
         if (pair != null) {
             worlddata = (PrimaryLevelData) pair.getFirst();
